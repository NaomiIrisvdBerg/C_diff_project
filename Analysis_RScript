###C. diff project: hunting for mechanisms behind ecological resilience to C. difficile infection by synthetic gut community
#Code contains analysis and figure generation for the (Draft) Manuscript called; Emergent metabolic interactions in resistance to Clostridioides difficile invasion
##NOTE: code should be run in chronological order, since some objects are renamed later in the script
#any further details on methodology and (choice of) analysis can be found in the manuscript.


#First; install and load relevant libraries
check_install_package <- function(package) {
  if (!require(package, character.only = TRUE)) {
    install.packages(package, dependencies = TRUE)
    library(package, character.only = TRUE)
  }
}


#List of required/used packages throughout this script
packages <- c("readr", "tidyverse", "stringr", "ggplot2", 
              "dplyr", "igraph", "Hmisc", "reshape2", 
              "pheatmap", "RColorBrewer", "ggrepel", "ggsignif",
              "tidyr", "vegan", "data.table", "stats", 
              "ggpubr", "purrr", "broom", "gtools", 
              "progress", "ggbiplot", "scales", 
              "readxl", "ComplexHeatmap", "stringi")

#Install and load each package
for (package in packages) {
  check_install_package(package)
}


#First part of analysis comprises that of the Mix-14 defined community data:
##Mix-14 relative abundance data:
#adjust directory accordingly:
Metadata <- read_csv("Desktop/C_diff_2023/Metadata.csv")
#View(Metadata)

#adjust directory accordingly:
OTU_Table_Mix14 <- read_csv("Desktop/C_diff_2023/OTU_Table_Mix14.csv")
#View(OTU_Table_Mix14)

##Combine files:
#Convert the OTU table to a long format
OTU_long <- OTU_Table_Mix14 %>%
  tidyr::gather(key = "Code", value = "Abundance", -Species)

#Handle the special 'Inoculum' case
OTU_long <- OTU_long %>%
  dplyr::mutate(Code = ifelse(Code == "Inoculum", "D0X0", Code))

#First, create a new column 'Original_Code' to hold original values of Code, then separate 'Code' into 'Day', 'Condition', and 'Replicate'
parsed_code <- OTU_long %>%
  dplyr::mutate(
    Day = ifelse(Code == "Inoculum", NA, as.numeric(str_extract(Code, "(?<=D)\\d+"))),
    Condition = ifelse(Code == "Inoculum", NA, str_extract(Code, "(?<=D\\d{1,2})[A-Z]")),
    Replicate = ifelse(Code == "Inoculum", NA, as.numeric(str_extract(Code, "\\d$")))
  )

str(parsed_code)

#Join the rest of the metadata
joined_data_mix14 <- parsed_code %>%
  dplyr::left_join(Metadata, by = "Code")

joined_data_mix14 <- joined_data_mix14 %>%
  dplyr::select(-Day.y) %>%
  dplyr::rename(Day = Day.x)

joined_data_mix14 <- joined_data_mix14 %>%
  dplyr::mutate(
    Conditions_Explained = case_when(
      Condition == "A" ~ "Mix-14",
      Condition == "B" ~ "Mix-14_Antibiotics",
      Condition == "T" ~ "Mix-14_Antibiotics_C.difficile",
      Condition == "X" ~ "Inoculum",
      TRUE ~ Conditions_Explained
    )
  )


#Next, add a relative abundance column
Relative_abundances_Mix14 <- joined_data_mix14 %>%
  dplyr::group_by(Code) %>%
  dplyr::mutate(Relative_Abundance = Abundance / sum(Abundance)) %>%
  ungroup()
#View(Relative_abundances_Mix14)



#Plot relative abundances for Mix14 alone, with colour-coding for species and shape for replicate type

# Filter data for only 'Mix-14' conditions
Relative_abundances_Mix14_filtered <- Relative_abundances_Mix14 %>%
  dplyr::filter(Conditions_Explained == "Mix-14")


#Calc. the means and standard deviations
Summary_stats_mix14 <- Relative_abundances_Mix14_filtered %>%
  dplyr::group_by(Day, Species) %>%
  dplyr::summarise(
    Mean = mean(Relative_Abundance, na.rm = TRUE),
    SD = sd(Relative_Abundance, na.rm = TRUE)
  ) %>%
  ungroup()

# Plotting with shaded areas around the mean
ggplot(Summary_stats_mix14, aes(x = Day, y = Mean, color = Species, group = Species)) +
  geom_line(size = 1) +
  geom_ribbon(aes(ymin = Mean - SD, ymax = Mean + SD, fill = Species), alpha = 0.3) +
  scale_color_manual(values=c("black", "#00AFBB", "#2e37fe", "darkorchid1", "green", "#0072B2","indianred", "gold1", "firebrick4", "springgreen3",  "chocolate1","#6C0BA9", "red", "#999999", "magenta")) +
  scale_fill_manual(values=c("black", "#00AFBB", "#2e37fe", "darkorchid1", "green", "#0072B2","indianred", "gold1", "firebrick4", "springgreen3",  "chocolate1","#6C0BA9", "red", "#999999", "magenta")) +
  theme_minimal() +
  labs(title = "Mean Relative Abundance of Species across Days",
       subtitle = "For Condition 'Mix-14'",
       x = "Day",
       y = "Relative Abundance") +
  theme(legend.position = "right", 
        legend.text = element_text(size = 12), 
        axis.title.x = element_text(size = 14),
        axis.title.y = element_text(size = 14), 
        axis.text.x = element_text(size = 12),
        axis.text.y = element_text(size = 12), 
        plot.title = element_text(size = 16), 
        plot.subtitle = element_text(size = 14),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background = element_blank(),
        axis.line = element_line(color = "black"),
        axis.ticks = element_line(color = "black"))



## Now plotting both options using log-transformation of the y-axis
Summary_stats_mix14$Log_Relative_Abundance <- log10(Summary_stats_mix14$Mean + 0.0001)
Summary_stats_mix14$Log_SD <- log10(Summary_stats_mix14$SD + 0.0001)

ggplot(Summary_stats_mix14, aes(x = Day, y = Log_Relative_Abundance, color = Species, group = Species)) +
  geom_line(size = 1) +
  scale_color_manual(values=c("black", "#00AFBB", "#2e37fe", "darkorchid1", "green", "#0072B2","indianred", "gold1", "firebrick4", "springgreen3",  "chocolate1","#6C0BA9", "red", "#999999", "magenta"))+
  #geom_errorbar(aes(ymin = Log_Relative_Abundance - Log_SD, ymax = Log_Relative_Abundance + Log_SD), width = 0.2) +
  theme_minimal() +
  labs(title = "Mean Log10-Transformed Relative Abundance of Species across Days",
       subtitle = "For Condition 'Mix-14'",
       x = "Day",
       y = "Log Transformed Relative Abundance") +
  theme(legend.position = "right", 
        legend.text = element_text(size = 12), 
        axis.title.x = element_text(size = 14),
        axis.title.y = element_text(size = 14), 
        axis.text.x = element_text(size = 12),
        axis.text.y = element_text(size = 12), 
        plot.title = element_text(size = 16), 
        plot.subtitle = element_text(size = 14),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background = element_blank(),
        axis.line = element_line(color = "black"),
        axis.ticks = element_line(color = "black"))







#Filter data for only 'Mix-14_Antibiotics' conditions
Relative_abundances_Mix14_AB_filtered <- Relative_abundances_Mix14 %>%
  dplyr::filter(Conditions_Explained == "Mix-14_Antibiotics")

#Calculate the means and standard deviations
Summary_stats_mix14_AB <- Relative_abundances_Mix14_AB_filtered %>%
  dplyr::group_by(Day, Species) %>%
  dplyr::summarise(
    Mean = mean(Relative_Abundance, na.rm = TRUE),
    SD = sd(Relative_Abundance, na.rm = TRUE)
  ) %>%
  ungroup()

#Plotting with shaded areas around the mean
ggplot(Summary_stats_mix14_AB, aes(x = Day, y = Mean, color = Species, group = Species)) +
  geom_line(size = 1) +
  geom_ribbon(aes(ymin = Mean - SD, ymax = Mean + SD, fill = Species), alpha = 0.3) +
  scale_color_manual(values=c("black", "#00AFBB", "#2e37fe", "darkorchid1", "green", "#0072B2","indianred", "gold1", "firebrick4", "springgreen3",  "chocolate1","#6C0BA9", "red", "#999999", "magenta")) +
  scale_fill_manual(values=c("black", "#00AFBB", "#2e37fe", "darkorchid1", "green", "#0072B2","indianred", "gold1", "firebrick4", "springgreen3",  "chocolate1","#6C0BA9", "red", "#999999", "magenta")) +
  theme_minimal() +
  labs(title = "Mean Relative Abundance of Species across Days",
       subtitle = "For Condition 'Mix-14 with Antibiotics at day 8, 9, 10, 11'",
       x = "Day",
       y = "Relative Abundance") +
  theme(legend.position = "right", 
        legend.text = element_text(size = 12), 
        axis.title.x = element_text(size = 14),
        axis.title.y = element_text(size = 14), 
        axis.text.x = element_text(size = 12),
        axis.text.y = element_text(size = 12), 
        plot.title = element_text(size = 16), 
        plot.subtitle = element_text(size = 14),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background = element_blank(),
        axis.line = element_line(color = "black"),
        axis.ticks = element_line(color = "black"))


## Now plotting both options using log-transformation of the y-axis
Summary_stats_mix14_AB$Log_Relative_Abundance <- log10(Summary_stats_mix14_AB$Mean + 0.0001)
Summary_stats_mix14_AB$Log_SD <- log10(Summary_stats_mix14_AB$SD + 0.01)

ggplot(Summary_stats_mix14_AB, aes(x = Day, y = Log_Relative_Abundance, color = Species, group = Species)) +
  geom_line(size = 1) +
  scale_color_manual(values=c("black", "#00AFBB", "#2e37fe", "darkorchid1", "green", "#0072B2","indianred", "gold1", "firebrick4", "springgreen3",  "chocolate1","#6C0BA9", "red", "#999999", "magenta"))+
  #geom_errorbar(aes(ymin = Log_Relative_Abundance - Log_SD, ymax = Log_Relative_Abundance + Log_SD), width = 0.2) +
  theme_minimal() +
  labs(title = "Mean Log-Transformed Relative Abundance of Species across Days",
       subtitle = "'For Condition 'Mix-14 with Antibiotics at day 8, 9, 10, 11'",
       x = "Day",
       y = "Log Transformed Relative Abundance") +
  theme(legend.position = "right", 
        legend.text = element_text(size = 12), 
        axis.title.x = element_text(size = 14),
        axis.title.y = element_text(size = 14), 
        axis.text.x = element_text(size = 12),
        axis.text.y = element_text(size = 12), 
        plot.title = element_text(size = 16), 
        plot.subtitle = element_text(size = 14),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background = element_blank(),
        axis.line = element_line(color = "black"),
        axis.ticks = element_line(color = "black"))



#Filter data for only 'Mix-14_Antibiotics_C.difficile' conditions
Relative_abundances_Mix14_AB_CD_filtered <- Relative_abundances_Mix14 %>%
  dplyr::filter(Conditions_Explained == "Mix-14_Antibiotics_C.difficile")

#Calculate the means and standard deviations
Summary_stats_mix14_AB_CD <- Relative_abundances_Mix14_AB_CD_filtered %>%
  dplyr::group_by(Day, Species) %>%
  dplyr::summarise(
    Mean = mean(Relative_Abundance, na.rm = TRUE),
    SD = sd(Relative_Abundance, na.rm = TRUE)
  ) %>%
  ungroup()

#Plotting with shaded areas around the mean
ggplot(Summary_stats_mix14_AB_CD, aes(x = Day, y = Mean, color = Species, group = Species)) +
  geom_line(size = 1) +
  geom_ribbon(aes(ymin = Mean - SD, ymax = Mean + SD, fill = Species), alpha = 0.3) +
  scale_color_manual(values=c("black", "#00AFBB", "#2e37fe", "darkorchid1", "green", "#0072B2","indianred", "gold1", "firebrick4", "springgreen3",  "chocolate1","#6C0BA9", "red", "#999999", "magenta")) +
  scale_fill_manual(values=c("black", "#00AFBB", "#2e37fe", "darkorchid1", "green", "#0072B2","indianred", "gold1", "firebrick4", "springgreen3",  "chocolate1","#6C0BA9", "red", "#999999", "magenta")) +
  theme_minimal() +
  labs(title = "Mean Relative Abundance of Species across Days",
       subtitle = "For Condition 'Mix-14 with Antibiotics at day 8, 9, 10, 11, and C. difficile at day 13'",
       x = "Day",
       y = "Relative Abundance") +
  theme(legend.position = "right", 
        legend.text = element_text(size = 12), 
        axis.title.x = element_text(size = 14),
        axis.title.y = element_text(size = 14), 
        axis.text.x = element_text(size = 12),
        axis.text.y = element_text(size = 12), 
        plot.title = element_text(size = 16), 
        plot.subtitle = element_text(size = 14),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background = element_blank(),
        axis.line = element_line(color = "black"),
        axis.ticks = element_line(color = "black"))



##Now plotting w/ log-transformation of the y-axis
Summary_stats_mix14_AB_CD$Log_Relative_Abundance <- log10(Summary_stats_mix14_AB_CD$Mean + 0.0001)
Summary_stats_mix14_AB_CD$Log_SD <- log10(Summary_stats_mix14_AB_CD$SD + 0.0001)

ggplot(Summary_stats_mix14_AB_CD, aes(x = Day, y = Log_Relative_Abundance, color = Species, group = Species)) +
  geom_line(size = 1) +
  scale_color_manual(values=c("black", "#00AFBB", "#2e37fe", "darkorchid1", "green", "#0072B2","indianred", "gold1", "firebrick4", "springgreen3",  "chocolate1","#6C0BA9", "red", "#999999", "magenta"))+
  #geom_errorbar(aes(ymin = Log_Relative_Abundance - Log_SD, ymax = Log_Relative_Abundance + Log_SD), width = 0.2) +
  theme_minimal() +
  labs(title = "Mean Log-Transformed Relative Abundance of Species across Days",
       subtitle = "For Condition 'Mix-14 with Antibiotics at day 8, 9, 10, 11, and C. difficile at day 13'",
       x = "Day",
       y = "Log Transformed Relative Abundance") +
  theme(legend.position = "right", 
        legend.text = element_text(size = 12), 
        axis.title.x = element_text(size = 14),
        axis.title.y = element_text(size = 14), 
        axis.text.x = element_text(size = 12),
        axis.text.y = element_text(size = 12), 
        plot.title = element_text(size = 16), 
        plot.subtitle = element_text(size = 14),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background = element_blank(),
        axis.line = element_line(color = "black"),
        axis.ticks = element_line(color = "black"))




###Endpoint (day14) of separate chemostat run with Mix-14 (no AB) and inoculation of C. diff at day 10

OTU_Table_Mix_14_C_difficle <- read_csv("Desktop/C_diff_2023/OTU_Table_Mix-14_C.difficle.csv")
#View(OTU_Table_Mix_14_C_difficle)


###Plot the different endpoints
##Order boxplots by: Mix-14, Mix-14_C.difficile, Mix-14_Antibiotics, Mix-14_Antibiotics_C.difficile

#extracting endpoint data for three conditions from Relative_abundances_Mix14
endpoint_data_1 <- Relative_abundances_Mix14 %>% 
  dplyr::filter(Day == 23) %>%
  dplyr::select(Species, Relative_Abundance, Conditions_Explained, Replicate)

#extracting endpoint data for 'Mix-14_C.difficle' from OTU_Table_Mix_14_C_difficle
endpoint_data_2 <- OTU_Table_Mix_14_C_difficle %>%
  dplyr::filter(Day == 14) %>%
  dplyr::select(Species, Relative_Abundance = Relative_Abundance, Conditions_Explained, Replicate)

#Prior to any perturbations: 
beginning_data_1 <- Relative_abundances_Mix14 %>% 
  dplyr::filter(Day == 7) %>%
  dplyr::select(Species, Relative_Abundance, Conditions_Explained, Replicate)

beginning_data_1$Perturbation <- "Before"
endpoint_data_1$Perturbation <- "After"
endpoint_data_2$Perturbation <- "After"


#Add "Mix-14_C.difficile" to the data, averaging for each Species
beginning_data_1 <- beginning_data_1 %>%
  dplyr::mutate(Replicate = as.character(Replicate))

average_abundance <- beginning_data_1 %>%
  dplyr::group_by(Species) %>%
  dplyr::summarize(Average_Abundance = mean(Relative_Abundance, na.rm = TRUE)) %>%
  dplyr::ungroup()

#new df for the 'Mix-14_C.difficile' condition with these averages
new_condition_data <- average_abundance %>%
  dplyr::mutate(Conditions_Explained = 'Mix-14_C.difficile',
         Replicate = 'averaged',
         Perturbation = 'Before') 

new_condition_data <- new_condition_data %>%
  dplyr::select(Species, Relative_Abundance = Average_Abundance, Conditions_Explained, Replicate, Perturbation)

augmented_data <- bind_rows(beginning_data_1, new_condition_data)
str(augmented_data)


# Combining both datasets
combined_endpoint_data <- rbind(endpoint_data_1, endpoint_data_2)
combined_before_and_after_data <- rbind(endpoint_data_1, endpoint_data_2, augmented_data)


#Next, we create a scatter of before and after perturbation within the different Mix-14 treatments

#Calc. means and standard deviations
summary_data_all_Mix14_conditions <- combined_before_and_after_data %>%
  dplyr::group_by(Species, Conditions_Explained, Perturbation) %>%
  dplyr::summarize(
    Mean = mean(Relative_Abundance, na.rm = TRUE),
    SD = sd(Relative_Abundance, na.rm = TRUE),
    .groups = 'drop'
  )

# Spread the data into a wide format for 'Before' and 'After'
wide_data_all_Mix14_conditions <- summary_data_all_Mix14_conditions %>%
  tidyr::pivot_wider(
    id_cols = c(Species, Conditions_Explained),
    names_from = Perturbation,
    values_from = c(Mean, SD)
  )


#calc sum of relative abundance for each species across all conditions in mix-14 (endpoint only):
species_order_endpoint <- combined_endpoint_data %>%
  dplyr::group_by(Species) %>%
  dplyr::summarise(Total_Abundance = sum(Relative_Abundance)) %>%
  arrange(-Total_Abundance) %>%
  pull(Species)


# Set the order for Species based on the sum of relative abundance across the four conditions in mix-14 (both pre- and post perturb.)
species_order_before_and_after <- combined_before_and_after_data %>%
  dplyr::group_by(Species) %>%
  dplyr::summarize(total_abundance = sum(Relative_Abundance)) %>%
  arrange(-total_abundance) %>%
  pull(Species)


#desired order for conditions:
condition_order <- c("Mix-14", "Mix-14_C.difficile", "Mix-14_Antibiotics", "Mix-14_Antibiotics_C.difficile")


data_after <- combined_before_and_after_data %>%
  filter(Perturbation == "After")

data_before <- combined_before_and_after_data %>%
  filter(Perturbation == "Before")

#Define the position for dodging boxplots side by side
dodge <- position_dodge(width = 0.9)


# condition_colours <- c(
#   "Mix-14" = "#A8DADC",
#   "Mix-14_C.difficile" = "#FFB5E8",
#   "Mix-14_Antibiotics" = "#FFC3A0",
#   "Mix-14_Antibiotics_C.difficile" = "#FFF5A5"
# )

condition_colours <- c(
  "Mix-14" = "lightgray",
  "Mix-14_C.difficile" = "#C3B1E1",
  "Mix-14_Antibiotics" = "#A8DADC",
  "Mix-14_Antibiotics_C.difficile" = "#ffbd90"
)

#The following plot is included in the Supplementary figures of the manuscript
ghost_boxplot <- ggplot() +
  geom_boxplot(data = data_after, aes(x = Species, y = log10(Relative_Abundance + 0.0001), fill = Conditions_Explained), 
               position = position_dodge(0.9), outlier.shape = NA) +
  geom_boxplot(data = data_before, aes(x = Species, y = log10(Relative_Abundance + 0.0001), fill = Conditions_Explained,
                                       color = ifelse(Conditions_Explained == "Mix-14_C.difficile", "transparent", "lightgray")), 
               position = dodge, alpha = 0.3, outlier.shape = NA, show.legend = FALSE, linetype = "dotdash") +  # Set linetype to dashed here
  scale_x_discrete(limits = species_order_endpoint) +
  scale_fill_manual(values = condition_colours) +
  scale_color_manual(values = c("grey", "transparent")) +
  labs(title = "Relative Abundance of Species across Conditions",
       x = "Species", y = "log10(Relative Abundance)") +
  theme_minimal() +
  geom_vline(xintercept = seq(1.5, length(unique(data_after$Species))-0.5, by = 1), 
             linetype = "solid", color = "grey90") +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
    axis.text.y = element_text(size = 12),
    axis.title.x = element_text(size = 14),
    axis.title.y = element_text(size = 14),
    plot.title = element_text(size = 16),
    legend.position = "right",
    legend.text = element_text(size = 12),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.background = element_rect(fill = "white", colour = "black"),
    axis.line = element_line(color = "black")
  )
ghost_boxplot



#Associated stats analysis for the post-perturbation boxplots per species
# Define the conditions to be compared
conditions <- c("Mix-14", "Mix-14_Antibiotics", "Mix-14_Antibiotics_C.difficile", "Mix-14_C.difficile")

#Prepare a df to store the comparison results
comparison_results_mix14_post_perturb <- data.frame(
  Species = character(),
  Comparison = character(),
  p_value = numeric(),
  stringsAsFactors = FALSE
)

# Loop through each species
for(species in unique(data_after$Species)) {
  # Extract data for the current species
  species_data <- filter(data_after, Species == species)
  
  # Nested loop for each combination of conditions
  for(i in 1:(length(conditions) - 1)) {
    for(j in (i+1):length(conditions)) {
      condition1 <- conditions[i]
      condition2 <- conditions[j]
      
      # Perform the test only if both conditions have data
      if(all(c(condition1, condition2) %in% species_data$Conditions_Explained)) {
        test_data <- filter(species_data, Conditions_Explained %in% c(condition1, condition2))
        test_result <- wilcox.test(Relative_Abundance ~ Conditions_Explained, data = test_data)
        
        # Append the result
        comparison_results_mix14_post_perturb <- rbind(comparison_results_mix14_post_perturb, data.frame(
          Species = species,
          Comparison = paste(condition1, "vs", condition2),
          p_value = test_result$p.value
        ))
      }
    }
  }
}

#Check results
View(comparison_results_mix14_post_perturb)
#adjust for multiple comparisons using BH adjustment:
comparison_results_mix14_post_perturb$adjusted_p_value <- p.adjust(comparison_results_mix14_post_perturb$p_value, method = "BH")





###Now, to make a co-correlation network of end-point data only, we include new 'Species' levels
#One is 'Antibiotics', with presence (1) or absence (0) values assigned across the four Experimental conditions
#Another, similarly, is 'C. difficile inoculation'. 



#First, create new rows for 'Antibiotics' Species level
unique_combinations <- combined_endpoint_data %>%
  dplyr::select(Conditions_Explained, Replicate) %>%
  dplyr::distinct()

# Create new rows for 'Antibiotics' Species level with 6 replicates for each condition
antibiotics_data <- unique_combinations %>%
  dplyr::filter(Conditions_Explained %in% c('Mix-14_Antibiotics', 'Mix-14_Antibiotics_C.difficile', 'Mix-14', 'Mix-14_C.difficile')) %>%
  dplyr::mutate(
    Species = 'Antibiotics',
    Relative_Abundance = case_when(
      Conditions_Explained %in% c('Mix-14_Antibiotics', 'Mix-14_Antibiotics_C.difficile') ~ 1,
      Conditions_Explained %in% c('Mix-14', 'Mix-14_C.difficile') ~ 0
    )
  )

#create new rows for 'C. difficile inoculation' Species level with 6 replicates for each condition
c_diff_data <- unique_combinations %>%
  dplyr::filter(Conditions_Explained %in% c('Mix-14_Antibiotics', 'Mix-14_Antibiotics_C.difficile', 'Mix-14', 'Mix-14_C.difficile')) %>%
  dplyr::mutate(
    Species = 'C. difficile inoculation',
    Relative_Abundance = case_when(
      Conditions_Explained %in% c('Mix-14_C.difficile', 'Mix-14_Antibiotics_C.difficile') ~ 1,
      Conditions_Explained %in% c('Mix-14', 'Mix-14_Antibiotics') ~ 0
    )
  )
#Bind the original dataframe with the new rows
combined_endpoint_data_updated <- bind_rows(combined_endpoint_data, antibiotics_data, c_diff_data)



###Generate a co-correlation network

wide_data_mix14 <- combined_endpoint_data_updated %>%
  tidyr::pivot_wider(names_from = Species, values_from = Relative_Abundance) %>%
  dplyr::arrange(Replicate, Conditions_Explained) # Arranging the data based on Replicate and Conditions_Explained for better clarity

#View(wide_data_mix14)
wide_data_mix14 <- subset(wide_data_mix14, Perturbation == "After")
# Filter only numeric columns (species columns in this case)
species_data_mix14 <- dplyr::select(wide_data_mix14, -Conditions_Explained, -Replicate, -Perturbation, -Antibiotics, -`C. difficile inoculation`)
# Find columns with zero standard deviation
cols_to_remove <- which(apply(species_data_mix14, 2, sd) == 0)
# Remove those columns
species_data_mix14_filtered <- species_data_mix14[,-cols_to_remove]


#Calc. the Spearman correlation & associated p-values
rc_mix14 <- Hmisc::rcorr(as.matrix(species_data_mix14_filtered), type="spearman")


# Create a df with correlation coefficients and p-values
df_cor_mix14 <- data.frame(
  row = rownames(rc_mix14$r),
  col = rep(colnames(rc_mix14$r), each=nrow(rc_mix14$r)),
  cor = as.vector(rc_mix14$r),
  p = as.vector(rc_mix14$P)
)

#multiple comparisons:
df_cor_mix14$p_adj <- p.adjust(df_cor_mix14$p, method = "BH")
df_cor_mix14

#Filter out non-significant correlations and self-correlations
#for exploratory reasons, one may opt for selecting by p < 0.05
df_cor_mix14_filtered <- df_cor_mix14[
  df_cor_mix14$row != df_cor_mix14$col &
    df_cor_mix14$p < 0.05 &
    abs(df_cor_mix14$cor) >= 0.4, ]

# Ensure unique pairs by sorting row and col, then removing duplicates
df_cor_mix14_filtered$row2 <- pmin(df_cor_mix14_filtered$row, df_cor_mix14_filtered$col)
df_cor_mix14_filtered$col2 <- pmax(df_cor_mix14_filtered$row, df_cor_mix14_filtered$col)
df_cor_mix14_filtered <- df_cor_mix14_filtered[!duplicated(df_cor_mix14_filtered[, c("row2", "col2")]), ]

#Create an igraph object
cor_network_mix14 <- igraph::graph_from_data_frame(d=df_cor_mix14_filtered, vertices=NULL, directed=FALSE)

# Set edge width and colour based on correlation values
E(cor_network_mix14)$width <- abs(E(cor_network_mix14)$cor) * 6
E(cor_network_mix14)$color <- ifelse(E(cor_network_mix14)$cor > 0, "forestgreen", "coral2")

#assigning colours to nodes
node_colors <- rep("#C8A2C8", length(V(cor_network_mix14)$name))
node_colors[V(cor_network_mix14)$name == "C. difficile inoculation"] <- "lightblue"
  node_colors[V(cor_network_mix14)$name == "Antibiotics"] <- "lightblue"
    V(cor_network_mix14)$color <- node_colors
    
    #Plot the network
    plot(cor_network_mix14, 
         vertex.label=V(cor_network_mix14)$name,
         vertex.label.cex=1,  
         vertex.size=15, 
         vertex.label.color = "black",
         vertex.label.family = "Arial",
         edge.arrow.size=0.5,
         layout=layout_with_kk)
    
  
    
    
####Now, networks beyond endpoint data

##We investigate from day 8 onwards, as that is when the AB treatment starts
Relative_abundances_Mix14_control <- subset(Relative_abundances_Mix14, Condition == "A" & Day ==7)
Relative_abundances_Mix14_AB <- subset(Relative_abundances_Mix14, Condition == "B" & Day ==7)
Relative_abundances_Mix14_AB_CD <- subset(Relative_abundances_Mix14, Condition == "T" & Day ==7)

pivoted_Mix14_control <- Relative_abundances_Mix14_control %>%
  dplyr::select(Replicate, Day, Condition, Species, Relative_Abundance) %>% 
  tidyr::pivot_wider(names_from = Species, values_from = Relative_Abundance)

pivoted_Mix14_AB <- Relative_abundances_Mix14_AB %>%
  dplyr::select(Replicate, Day, Condition, Species, Relative_Abundance) %>% 
  tidyr::pivot_wider(names_from = Species, values_from = Relative_Abundance)

pivoted_Mix14_AB_CD <- Relative_abundances_Mix14_AB_CD %>%
  dplyr::select(Replicate, Day, Condition, Species, Relative_Abundance) %>% 
  tidyr::pivot_wider(names_from = Species, values_from = Relative_Abundance)


#Filter only numeric columns (species columns in this case)
species_data_Mix14_control <- dplyr::select(pivoted_Mix14_control, -Condition, -Replicate, -Day)
species_data_Mix14_AB <- dplyr::select(pivoted_Mix14_AB, -Condition, -Replicate, -Day)
species_data_Mix14_AB_CD <- dplyr::select(pivoted_Mix14_AB_CD, -Condition, -Replicate, -Day)


# Find columns with zero standard deviation
cols_to_remove_Mix14_control <- which(apply(species_data_Mix14_control, 2, sd) == 0)
cols_to_remove_Mix14_AB <- which(apply(species_data_Mix14_AB, 2, sd) == 0)
cols_to_remove_Mix14_AB_CD <- which(apply(species_data_Mix14_AB_CD, 2, sd) == 0)

# Remove these columns
species_data_Mix14_control_filtered <- species_data_Mix14_control [,-cols_to_remove_Mix14_control]
species_data_Mix14_AB_filtered <- species_data_Mix14_AB[,-cols_to_remove_Mix14_AB]
species_data_Mix14_AB_CD_filtered <- species_data_Mix14_AB_CD[,-cols_to_remove_Mix14_AB_CD]


#Compute correlation matrices
cor_matrix_Mix14_control_filtered <- cor(species_data_Mix14_control_filtered, method="spearman")
cor_matrix_Mix14_AB_filtered <- cor(species_data_Mix14_AB_filtered, method="spearman")
cor_matrix_Mix14_AB_CD_filtered <- cor(species_data_Mix14_AB_CD_filtered, method="spearman")

# View every matrix
#cor_matrix_Mix14_control_filtered
#cor_matrix_Mix14_AB_filtered
#cor_matrix_Mix14_AB_CD_filtered

#uncomment which one to plot
rc <- rcorr(as.matrix(species_data_Mix14_control_filtered), type="spearman")
#rc <- rcorr(as.matrix(species_data_Mix14_AB), type="spearman")
#rc <- rcorr(as.matrix(species_data_Mix14_AB_CD), type="spearman")

# Create a df with correlation coefficients and p-values
df_cor_1 <- data.frame(
  row = rownames(rc$r),
  col = rep(colnames(rc$r), each=nrow(rc$r)),
  cor = as.vector(rc$r),
  p = as.vector(rc$P)
)

#multiple comparisons adjustment:
df_cor_1$p_adj <- p.adjust(df_cor_1$p, method = "BH")


#Filter out non-significant correlations and self-correlations
#again, for exploratory reasons one may choose to select edges that satisfy: df_cor_1$p < 0.05 
df_cor_filtered_1 <- df_cor_1[
  df_cor_1$row != df_cor_1$col &
    df_cor_1$p < 0.05 &
    abs(df_cor_1$cor) >= 0.4, ]

# Ensure unique pairs by sorting row and col, then removing duplicates
df_cor_filtered_1$row2 <- pmin(df_cor_filtered_1$row, df_cor_filtered_1$col)
df_cor_filtered_1$col2 <- pmax(df_cor_filtered_1$row, df_cor_filtered_1$col)
df_cor_filtered_1 <- df_cor_filtered_1[!duplicated(df_cor_filtered_1[, c("row2", "col2")]), ]

#Create an igraph object
cor_network_1 <- igraph::graph_from_data_frame(d=df_cor_filtered_1, vertices=NULL, directed=FALSE)

# Set edge width and colour based on correlation values
E(cor_network_1)$width <- abs(E(cor_network_1)$cor) * 6
E(cor_network_1)$color <- ifelse(E(cor_network_1)$cor > 0, "forestgreen", "coral2")

#Assigning colours to nodes
node_colors <- rep("#C8A2C8", length(V(cor_network_1)$name))
node_colors[V(cor_network_1)$name == "C. difficile inoculation"] <- "lightblue"
  node_colors[V(cor_network_1)$name == "Antibiotics"] <- "lightblue"
    V(cor_network_1)$color <- node_colors
    
    # Plot the network:
    plot(cor_network_1, 
         vertex.label=V(cor_network_1)$name,
         vertex.label.cex=1,  
         vertex.size=15, 
         vertex.label.color = "black",
         vertex.label.family = "Arial",
         edge.arrow.size=0.5,
         layout=layout_with_fr)
    title(main="Mix-14 control, p<0.05, rho>|0.4|")


    


###Next, we generate Bray-Curtis dissimilarity matrices for comparisons across the three major treatments used on Mix-14 (see Figure 2 in manuscript)
##We investigate from before differential treatment and after differential treatment
#Before the differential treatments (i.e., treatments along the experimental timeline that stop the commonality of sequence of treatments between any two conditions)
    
    
Relative_abundances_Mix14_control <- subset(Relative_abundances_Mix14, Condition == "A" & Day > 7)
Relative_abundances_Mix14_AB <- subset(Relative_abundances_Mix14, Condition == "B" & Day > 7)
Relative_abundances_Mix14_AB_CD <- subset(Relative_abundances_Mix14, Condition == "T" & Day > 7)

###Bray-Curtis dissimilarity for endpoints of 4 conditions: 

#add an averaged lane for Before perturbation (day 7) conditions; compile all 3 for 'Mix-14', 'Mix-14_AB', 'Mix-14_AB_C.difficile'
#make all the 'before' in "Perturbation" 'Pre-perturbation, day 7' in "Conditions_Explained" 
combined_before_and_after_data_1 <- combined_before_and_after_data %>%
  dplyr::mutate(Conditions_Explained = ifelse(Perturbation == "Before", 
                                       "Before_perturbation_Day_7", 
                                       Conditions_Explained))

combined_before_and_after_data_2 <- combined_before_and_after_data %>%
  dplyr::mutate(Conditions_Explained = gsub("_", " + ", Conditions_Explained)) %>%
  dplyr::mutate(Conditions_Explained = ifelse(Perturbation == "After", 
                                       paste(Conditions_Explained, ", endpoint", sep=""),
                                       ifelse(Perturbation == "Before",
                                              paste(Conditions_Explained, ", day 7", sep=""),
                                              Conditions_Explained)))


# Average the Relative_Abundance for each Species in each Condition
data.table::setDT(combined_endpoint_data)
avg_abundance <- combined_endpoint_data[, .(Average_Abundance = mean(Relative_Abundance)), by = .(Species, Conditions_Explained)]

data.table::setDT(combined_before_and_after_data_1)
avg_abundance <- combined_before_and_after_data_1[, .(Average_Abundance = mean(Relative_Abundance)), by = .(Species, Conditions_Explained)]

data.table::setDT(combined_before_and_after_data_2)
avg_abundance <- combined_before_and_after_data_2[, .(Average_Abundance = mean(Relative_Abundance)), by = .(Species, Conditions_Explained)]

#pivot the data to create a matrix where rows are Species and columns are Conditions
abundance_matrix <- dcast(avg_abundance, Species ~ Conditions_Explained, value.var = "Average_Abundance")
row.names(abundance_matrix) <- abundance_matrix$Species
abundance_matrix$Species <- NULL

#Calc. the Bray-Curtis distance between Conditions
bc_distance <- vegdist(t(abundance_matrix), method = "bray")

#Visualise the distance matrix
pheatmap(as.matrix(bc_distance))

pheatmap(as.matrix(bc_distance), 
         angle_col = 45,   
         las = 3,
         #color = colorRampPalette(c("blue", "white", "red"))(100),
         legend_title = "Bray-Curtis Dissimilarity")         


 

###Boxplots of alpha diversity within Mix-14 communities
# Calculate Shannon Diversity Index
diversity_data <- combined_endpoint_data %>%
  dplyr::group_by(Conditions_Explained, Replicate) %>%
  dplyr::summarise(Shannon_Index = -sum(Relative_Abundance * log(Relative_Abundance), na.rm = TRUE)) %>%
  ungroup()

#Perform pairwise comparisons using t-test 
# Adjust p-values for multiple comparisons using p.adjust
pairwise_comparisons <- pairwise.t.test(diversity_data$Shannon_Index, diversity_data$Conditions_Explained,
                                        p.adjust.method = "BH")

#create a boxplot with individual data points
#& reorder the levels of Conditions_Explained
diversity_data$Conditions_Explained <- factor(diversity_data$Conditions_Explained, 
                                              levels = c("Mix-14", 
                                                         "Mix-14_Antibiotics", 
                                                         "Mix-14_C.difficile", 
                                                         "Mix-14_Antibiotics_C.difficile"))

Shannon_alpha_Mix14_endpoints_boxplot <- ggplot(diversity_data, aes(x = Conditions_Explained, y = Shannon_Index)) +
  geom_boxplot(alpha = 0.6) +
  geom_jitter(width = 0.2, color = "grey32", size = 3, alpha = 0.6) +
  labs(y = "Shannon Alpha Diversity Index", x = " ") +
  ggpubr::stat_compare_means(paired=FALSE, comparisons = list(c("Mix-14", "Mix-14_Antibiotics"), 
                                        c("Mix-14", "Mix-14_C.difficile"),
                                        c("Mix-14", "Mix-14_Antibiotics_C.difficile"),
                                        c("Mix-14_Antibiotics", "Mix-14_C.difficile"),
                                        c("Mix-14_Antibiotics", "Mix-14_Antibiotics_C.difficile"),
                                        c("Mix-14_C.difficile", "Mix-14_Antibiotics_C.difficile")),
                     p.adjust.method = "BH",  # Using Benjamini-Hochberg adjustment
                     label = "p.value") +
  theme_minimal() +
  theme(legend.position = "none",
        axis.text = element_text(size = 12),            
        axis.title = element_text(size = 14),           
        axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background = element_blank(),
        axis.line = element_line(color = "black"))

Shannon_alpha_Mix14_endpoints_boxplot

#Since default in stat_compare_means function is ANOVA with HSD post-hoc, we here check whether assumptions of normality etc. are met:
diversity_data %>%
  dplyr::group_by(Conditions_Explained) %>%
  dplyr::summarise(
    shapiro_test_p = shapiro.test(Shannon_Index)$p.value
  )


# Conducting Levene's test
car::leveneTest(Shannon_Index ~ Conditions_Explained, data = diversity_data)

#Check if OK to use parameteric test




#Combining the alpha diversity info with the relative abundance info:


combined_data_with_div <- combined_endpoint_data_updated %>%
  dplyr::left_join(diversity_data, by = c("Conditions_Explained", "Replicate"))


#identify species with only one unique value for Relative_Abundance within each Conditions_Explained
species_to_remove <- combined_data_with_div %>%
  dplyr::group_by(Conditions_Explained, Species) %>%
  dplyr::summarise(n_unique = n_distinct(Relative_Abundance), .groups = "drop") %>%
  filter(n_unique == 1)

#filter out those species from the main dataset
filtered_data <- combined_data_with_div %>%
  dplyr::anti_join(species_to_remove, by = c("Conditions_Explained", "Species"))


full_model_Mix14 <- glm(Shannon_Index ~ Relative_Abundance * Species, data = subset(filtered_data), family = gaussian())
full_model_Mix14_Antibiotics <- glm(Shannon_Index ~ Relative_Abundance * Species, data = subset(filtered_data, Conditions_Explained =="Mix-14_Antibiotics"), family = gaussian())
full_model_Mix14_C.difficile <- glm(Shannon_Index ~ Relative_Abundance * Species, data = subset(filtered_data, Conditions_Explained =="Mix-14_C.difficile"), family = gaussian())
full_model_Mix14_AB_C.difficile <- glm(Shannon_Index ~ Relative_Abundance * Species, data = subset(filtered_data, Conditions_Explained =="Mix-14_Antibiotics_C.difficile"), family = gaussian())

#View the summaries
summary(full_model_Mix14)
summary(full_model_Mix14_Antibiotics)
summary(full_model_Mix14_C.difficile)
summary(full_model_Mix14_AB_C.difficile)


#Suppressive ecological cluster (SEC) members showed up in the GLM as significant predictors of diversity in Mix-14 + AB + C.diff:
filtered_data_P_distasonis <- subset(filtered_data, Species == "Parabacteroides distasonis")
filtered_data_B_theta <- subset(filtered_data, Species == "Bacteroides thetaiotaomicron")
filtered_data_P_dorei <- subset(filtered_data, Species == "Bacteroides dorei")

#inspect:
plot(subset(filtered_data_P_distasonis, Conditions_Explained =="Mix-14_Antibiotics_C.difficile")$Shannon_Index, subset(filtered_data_P_distasonis, Conditions_Explained =="Mix-14_Antibiotics_C.difficile")$Relative_Abundance)
plot(subset(filtered_data_B_theta, Conditions_Explained =="Mix-14_Antibiotics_C.difficile")$Shannon_Index, subset(filtered_data_B_theta, Conditions_Explained =="Mix-14_Antibiotics_C.difficile")$Relative_Abundance)
plot(subset(filtered_data_P_dorei, Conditions_Explained =="Mix-14_Antibiotics_C.difficile")$Shannon_Index, subset(filtered_data_P_dorei, Conditions_Explained =="Mix-14_Antibiotics_C.difficile")$Relative_Abundance)


#inspect correlation between F. sacch rel ab (in Mix-14 control) versus alpha div: appears negative
Fusc_in_control <- subset(combined_data_with_div, Species == "Fusicatenibacter saccharivorans" & Conditions_Explained == "Mix-14")
cor.test(Fusc_in_control$Relative_Abundance, Fusc_in_control$Shannon_Index, method="spearman")
plot(Fusc_in_control$Relative_Abundance, Fusc_in_control$Shannon_Index)

#near-significant negative correlation between E. coli and Shannon alpha div across all conditions of Mix-14
plot(subset(combined_data_with_div, Species == "Escherichia coli")$Relative_Abundance, subset(combined_data_with_div, Species == "Escherichia coli")$Shannon_Index)





#Ratio analysis (as per Fig. 2 in the manuscript):

##As the Bray-Curtis dissimilarity matrix shows, Mix-14+C.difficile and Mix-14+AB+C.difficile are very different from each other in terms of community composition, yet they have successful suppression of C. difficile in common
#We know that species like B. caccae increase significantly in perturbed Mix-14 compared to control.
#Yet, we want to look beyond this. 
#To look beyond any individual species difference, we are here interested in looking at internal configurations that suppressive Mix-14 communities share in common

combined_endpoint_data <- rbind(endpoint_data_1, endpoint_data_2)

#Step 1: Create a new column 'Genus' by extracting it from 'Species'
combined_endpoint_data$Genus <- sapply(strsplit(as.character(combined_endpoint_data$Species), " "), `[`, 1)

#Potential step 2: take out Genera that are consistently ~0 rel. abundance in experimental conditions (i.e., cannot confer suppressiveness in both perturbation regimes)
#Bifidobacterium, Blautia, Roseburia 
#combined_endpoint_data_1 <- subset(combined_endpoint_data, Genus != "Bifidobacterium" & Genus != "Blautia" & Genus != "Roseburia")

#Alternative, more robust step 2: add a small value to all relative abundance data to avoid later issues with ratio calculation (i.e., 'NA' and 'Inf' outcomes)
combined_endpoint_data$Relative_Abundance <- combined_endpoint_data$Relative_Abundance + 0.0001


#list the genera of interest
unique_genera <- unique(combined_endpoint_data$Genus)
#unique_genera <- unique(combined_endpoint_data_1$Genus)

#distill the different permutations (i.e., A:B and B:A, as well as (A+B):C, (A+C):B, (B+C):A)
pair_combinations <- permutations(length(unique_genera), 2, unique_genera)
pair_combinations <- lapply(1:nrow(pair_combinations), function(i) as.character(pair_combinations[i, ]))
triple_combinations <- permutations(length(unique_genera), 3, unique_genera)
triple_combinations <- lapply(1:nrow(triple_combinations), function(i) as.character(triple_combinations[i, ]))

#triple_combinations1 <- combn(unique_genera, 3, simplify = FALSE)

filter_duplicate_triplets <- function(triplet_combinations) {
  # Function to ensure the first two elements of each triplet are in order
  is_ordered <- function(triplet) {
    return(triplet[1] < triplet[2])
  }
  
  # Apply the function to each triplet and keep only the ordered ones
  ordered_triplets <- lapply(triplet_combinations, function(triplet) {
    if (is_ordered(triplet)) {
      return(triplet)
    } else {
      return(NULL)
    }
  })
  
  # Remove NULL elements from the list
  ordered_triplets <- ordered_triplets[!sapply(ordered_triplets, is.null)]
  
  return(ordered_triplets)
}

# Apply this function to triplet combinations to take out unnecessary duplicates
# e.g., the ratio for (A + B):C does not need also to be calculated as (B + A):C
triple_combinations <- filter_duplicate_triplets(triple_combinations)

#Step 3: calculate
calculate_ratios <- function(df, genera){
  if(length(genera) == 2){
    genus1 <- filter(df, Genus == genera[1]) %>% dplyr::summarize(Total = sum(Relative_Abundance)) %>% .$Total
    genus2 <- filter(df, Genus == genera[2]) %>% dplyr::summarize(Total = sum(Relative_Abundance)) %>% .$Total
    return(genus1 / genus2)
  } else {
    genus1 <- filter(df, Genus == genera[1]) %>% dplyr::summarize(Total = sum(Relative_Abundance)) %>% .$Total
    genus2 <- filter(df, Genus == genera[2]) %>% dplyr::summarize(Total = sum(Relative_Abundance)) %>% .$Total
    genus3 <- filter(df, Genus == genera[3]) %>% dplyr::summarize(Total = sum(Relative_Abundance)) %>% .$Total
    return((genus1 + genus2) / genus3)
  }
}

#Create a df to store ratios
ratios_df <- data.frame()

for(condition in unique(combined_endpoint_data$Conditions_Explained)){
  for(replicate in unique(combined_endpoint_data$Replicate)){
    for(combo in c(pair_combinations, triple_combinations)){
      # Calculate the ratio
      ratio <- calculate_ratios(
        df = combined_endpoint_data %>% 
          dplyr::filter(Conditions_Explained == condition, Replicate == replicate),
        genera = combo
      )
      # Check the length of the combination to decide on the display format
      if (length(combo) == 2) {
        genus_combination <- paste(combo, collapse = ' to ')
      } else if (length(combo) == 3) {
        genus_combination <- paste(combo[1], '+', combo[2], 'to', combo[3])
      }
      # Append the result to the ratios dataframe
      ratios_df <- rbind(ratios_df, data.frame(
        Conditions_Explained = condition,
        Replicate = replicate,
        Genus_Combination = genus_combination,
        Ratio = ratio
      ))
    }
  }
}



#Remove rows with inf entries due to divisions by 0
ratios_df_1 <- ratios_df[!is.infinite(ratios_df$Ratio), ]
#ratios_df_1 <- ratios_df_1[!is.na(ratios_df$Ratio), ]
#ratios_df_1 <- subset(ratios_df_1, Ratio != "NaN")

#Step 4: Create a binary outcome variable: Mix-14 becomes 'Control', any other condition (shown to be suppressive, or very similar to suppressive, such as Mix-14 + AB) becomes 'Experimental'
ratios_df_1$Condition_Type <- ifelse(ratios_df_1$Conditions_Explained == 'Mix-14', 'Control', 'Experimental')

#Step 5: Reshape the df so each genus combination becomes a column
ratios_wide <- ratios_df_1 %>%
  tidyr::spread(key = Genus_Combination, value = Ratio) %>%
  replace(is.na(.), 0) # Replace NA values with 0


#subset only for pairs:
ratios_wide_subset_pairs <- dplyr::select(ratios_wide, -matches("\\+"))
variables_pairs <- names(ratios_wide_subset_pairs)[4:59]

#log10 ratios for pairs:
ratios_wide_subset_pairs_log10 <- ratios_wide_subset_pairs %>%
  dplyr::mutate(across(where(is.numeric), ~ log10(.)))

# inspect distribution of logged ratios (from rel abundance values + 0.0001)
data_long_pairs_log10 <- pivot_longer(ratios_wide_subset_pairs_log10, cols = where(is.numeric), names_to = "Variable", values_to = "Value")

# Plot histogram; expect it to be symmetrical
distribution_data_long_pairs_log10 <- ggplot(data_long_pairs_log10, aes(x = Value)) +
  geom_histogram(bins = 30, fill = "steelblue", color = "black") +
  labs(title = "Pooled Distribution of Numeric Values", x = "Value", y = "Frequency") +
  theme_minimal()
distribution_data_long_pairs_log10



#or only for triplets (i.e., [genus A + B] to genus C ratios)
ratios_wide_subset_triplets <- dplyr::select(ratios_wide, contains("+"), "Conditions_Explained", "Replicate", "Condition_Type")

ratios_wide_subset_triplets_log10 <- ratios_wide_subset_triplets %>%
  dplyr::mutate(across(where(is.numeric), ~ log10(.)))

# inspect distribution of logged ratios (from rel abundance values + 0.0001)
data_long_triplets_log10 <- pivot_longer(ratios_wide_subset_triplets_log10, cols = where(is.numeric), names_to = "Variable", values_to = "Value")

#Plot histogram; expect it to be skewed positively because [Genus A + Genus B] / Genus C
distribution_data_long_triplets_log10 <- ggplot(data_long_triplets_log10, aes(x = Value)) +
  geom_histogram(bins = 30, fill = "steelblue", color = "black") +
  labs(title = "Pooled Distribution of Numeric Values", x = "Value", y = "Frequency") +
  theme_minimal()
distribution_data_long_triplets_log10


##Next: wilcox test
#Also: get effect size idea
results_Wilcox_test_pairs <- data.frame(variable = character(), p_value = numeric(), median_diff = numeric(), stringsAsFactors = FALSE)
results_Wilcox_test_triplet <- data.frame(variable = character(), p_value = numeric(), median_diff = numeric(), stringsAsFactors = FALSE)


#Wilcox test for each variable and calculate median difference
for (variable in variables_pairs) {
  # Extract the current variable data
  current_data <- select(ratios_wide_subset_pairs_log10, Condition_Type, all_of(variable))
  
  # Check if there are enough data points to perform the test
  if (length(unique(current_data[[variable]][current_data$Condition_Type == 'Experimental'])) > 1 &&
      length(unique(current_data[[variable]][current_data$Condition_Type == 'Control'])) > 1) {
    
    # Perform the Wilcoxon test
    test_result <- wilcox.test(reformulate('Condition_Type', variable), data = current_data)
    
    # Use broom to tidy the test result and extract p-value
    tidy_result <- broom::tidy(test_result)
  } else {
    # Not enough data to perform Wilcoxon test
    tidy_result <- tibble(p.value = NA, estimate = NA, conf.low = NA, conf.high = NA, method = "Insufficient data")
  }
  
  #Calc. the median difference
  median_suppressive <- median(current_data[[variable]][current_data$Condition_Type == 'Experimental'], na.rm = TRUE)
  median_non_suppressive <- median(current_data[[variable]][current_data$Condition_Type == 'Control'], na.rm = TRUE)
  median_diff <- median_suppressive - median_non_suppressive
  
  #Create a new df for the results
  new_row <- data.frame(variable = variable, p_value = tidy_result$p.value, median_diff = median_diff, stringsAsFactors = FALSE)
  
  #Add the new row to the results dataframe
  results_Wilcox_test_pairs <- rbind(results_Wilcox_test_pairs, new_row)
}

results_Wilcox_test_pairs$p_value_adjusted <- p.adjust(results_Wilcox_test_pairs$p_value, method = "BH")

#30 significant (15 on either 'side', since symmetric after calculating log10 over the ratios, which in itself were calculated by adding + 0.0001 to the relative abudnance values before calculation)
View(subset(results_Wilcox_test_pairs, p_value_adjusted < 0.05))



##Now for triplets (i.e., [Genus A + Genus B to Genus C]
#Wilcox test for each variable and calculate median difference
for (variable in variables_triplets) {
  # Extract the current variable data
  current_data <- select(ratios_wide_subset_triplets_log10, Condition_Type, all_of(variable))
  
  # Check if there are enough data points to perform the test
  if (length(unique(current_data[[variable]][current_data$Condition_Type == 'Experimental'])) > 1 &&
      length(unique(current_data[[variable]][current_data$Condition_Type == 'Control'])) > 1) {
    
    # Perform the Wilcoxon test
    test_result <- wilcox.test(reformulate('Condition_Type', variable), data = current_data)
    
    # Use broom to tidy the test result and extract p-value
    tidy_result <- broom::tidy(test_result)
  } else {
    # Not enough data to perform Wilcoxon test
    tidy_result <- tibble(p.value = NA, estimate = NA, conf.low = NA, conf.high = NA, method = "Insufficient data")
  }
  
  #Calc the median difference (to gauge difference direction)
  median_suppressive <- median(current_data[[variable]][current_data$Condition_Type == 'Experimental'], na.rm = TRUE)
  median_non_suppressive <- median(current_data[[variable]][current_data$Condition_Type == 'Control'], na.rm = TRUE)
  median_diff <- median_suppressive - median_non_suppressive
  
  #Create a new df for the results
  new_row <- data.frame(variable = variable, p_value = tidy_result$p.value, median_diff = median_diff, stringsAsFactors = FALSE)
  
  #Add the new row to the results dataframe
  results_Wilcox_test_triplet <- rbind(results_Wilcox_test_triplet, new_row)
}

results_Wilcox_test_triplet$p_value_adjusted <- p.adjust(results_Wilcox_test_triplet$p_value, method = "BH")

View(results_Wilcox_test_triplet)

#86 significant ones
View(subset(results_Wilcox_test_triplet, p_value_adjusted < 0.05))


#For pairs:
results_pairs <- results_Wilcox_test_pairs %>%
  tidyr::separate(variable, into = c("Species1", "Species2"), sep = " to ")


#For triplets: 
results_triplets <- results_Wilcox_test_triplet %>%
  tidyr::separate(variable, into = c("Combination", "Individual"), sep = " to ")

print(str(results_pairs))
print(str(results_triplets))

#Create a wide-format df with combinations as rows and individuals as columns for 'median_diff'
#for triplets:
wide_results_triplets <- results_triplets %>%
  tidyr::pivot_wider(id_cols = Combination, names_from = Individual, values_from = median_diff)
# for pairs
wide_results_pairs <- results_pairs %>%
  tidyr::pivot_wider(id_cols = Species1, names_from = Species2, values_from = median_diff)

print(str(wide_results_pairs))
print(str(wide_results_triplets))

# Create a wide-format df for 'p_value'
# for triplets
p_values_wide_triplets <- results_triplets %>%
  tidyr::pivot_wider(id_cols = Combination, names_from = Individual, values_from = p_value_adjusted)
# for pairs
p_values_wide_pairs <- results_pairs %>%
  tidyr::pivot_wider(id_cols = Species1, names_from = Species2, values_from = p_value_adjusted)

# Check the structure after creating the wide p-values
print(str(p_values_wide_pairs))
print(str(p_values_wide_triplets))

# for triplets:
heatmap_data_triplets <- merge(wide_results_triplets, p_values_wide_triplets, by = "Combination", suffixes = c("_diff", "_pval"))

#for pairs:
heatmap_data_pairs <- merge(wide_results_pairs, p_values_wide_pairs, by = "Species1", suffixes = c("_diff", "_pval"))

#Melt the median_diff values
# for triplets:
long_heatmap_diff_triplet <- reshape2::melt(heatmap_data_triplets, id.vars = "Combination", 
                          measure.vars = grep("_diff$", names(heatmap_data_triplets), value = TRUE),
                          variable.name = "Individual", value.name = "median_diff")
# for pairs
long_heatmap_diff_pairs <- reshape2::melt(heatmap_data_pairs, id.vars = "Species1", 
                          measure.vars = grep("_diff$", names(heatmap_data_pairs), value = TRUE),
                          variable.name = "Species2", value.name = "median_diff")

# Melt the p_values
# for triple:
long_heatmap_pval_triplet <- reshape2::melt(heatmap_data_triplets, id.vars = "Combination", 
                          measure.vars = grep("_pval$", names(heatmap_data_triplets), value = TRUE),
                          variable.name = "Individual", value.name = "p_value_adjusted")

#for pairs:
long_heatmap_pval_pairs <- reshape2::melt(heatmap_data_pairs, id.vars = "Species1", 
                          measure.vars = grep("_pval$", names(heatmap_data_pairs), value = TRUE),
                          variable.name = "Species2", value.name = "p_value_adjusted")

#Remove suffixes from Individual column to match between the two melted data frames
# for triplets:
long_heatmap_diff_triplet$Individual <- gsub("_diff$", "", long_heatmap_diff_triplet$Individual)
long_heatmap_pval_triplet$Individual <- gsub("_pval$", "", long_heatmap_pval_triplet$Individual)
# for pairs:
long_heatmap_diff_pairs$Species2 <- gsub("_diff$", "", long_heatmap_diff_pairs$Species2)
long_heatmap_pval_pairs$Species2 <- gsub("_pval$", "", long_heatmap_pval_pairs$Species2)

# Merge the two melted data frames
# for triplets:
long_heatmap_data_triplet <- merge(long_heatmap_diff_triplet, long_heatmap_pval_triplet, by = c("Combination", "Individual"))
# for pairs: 
long_heatmap_data_pairs <- merge(long_heatmap_diff_pairs, long_heatmap_pval_pairs, by = c("Species1", "Species2"))

#for both:
long_heatmap_data_pairs <- long_heatmap_data_pairs %>%
  dplyr::mutate(median_diff = ifelse(p_value_adjusted > 0.05, 0, median_diff))

long_heatmap_data_triplet <- long_heatmap_data_triplet %>%
  dplyr::mutate(median_diff = ifelse(p_value_adjusted > 0.05, 0, median_diff))


# Add an 'alpha' column: 
long_heatmap_data_pairs <- long_heatmap_data_pairs %>%
  dplyr::mutate(alpha = case_when(
    p_value_adjusted < 0.0001 ~ 1,
    p_value_adjusted < 0.001 ~ 0.8,
    p_value_adjusted < 0.01 ~ 0.6,
    p_value_adjusted < 0.05 ~ 0.4,
    TRUE ~ 0  # p_value is not significant
  ))

long_heatmap_data_triplet <- long_heatmap_data_triplet %>%
  dplyr::mutate(alpha = case_when(
    p_value_adjusted < 0.0001 ~ 1,
    p_value_adjusted < 0.001 ~ 0.8,
    p_value_adjusted < 0.01 ~ 0.6,
    p_value_adjusted < 0.05 ~ 0.4,
    TRUE ~ 0  # p_value is not significant
  ))


#Create a 'colour' column for the fill aesthetic based on 'median_diff'
long_heatmap_data_pairs <- long_heatmap_data_pairs %>%
  dplyr::mutate(colour = case_when(
    median_diff < 0 & p_value_adjusted <= 0.05 ~ "blue",
    median_diff > 0 & p_value_adjusted <= 0.05 ~ "red",
    TRUE ~ "white"  
  ))

long_heatmap_data_triplet <- long_heatmap_data_triplet %>%
  dplyr::mutate(colour = case_when(
    median_diff < 0 & p_value_adjusted <= 0.05 ~ "blue",
    median_diff > 0 & p_value_adjusted <= 0.05 ~ "red",
    TRUE ~ "white"  
  ))

#for triplets:
D_Heat_triplet <- ggplot(long_heatmap_data_triplet, aes(x = Individual, y = Combination)) +
  geom_tile(aes(fill = colour), color = NA) +
  scale_fill_identity() +  
  scale_fill_manual(values = c("blue", "red", "white"),
                    labels = c("Lower", "Higher", "Not significant"),
                    name = "Median Difference") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        axis.text.y = element_text(angle = 0),
        axis.title = element_blank()) +
  labs(fill = "Median Difference", alpha = "Significance")
D_Heat_triplet

#for pairs:
D_Heat_pairs <- ggplot(long_heatmap_data_pairs, aes(x = Species2, y = Species1)) +
  geom_tile(aes(fill = colour), color = NA) +
  scale_fill_identity() +  # Use actual color names 
  scale_fill_manual(values = c("blue", "red", "white"),
                    labels = c("Lower", "Higher", "Not significant"),
                    name = "Median Difference") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        axis.text.y = element_text(angle = 0),
        axis.title = element_blank()) +
  labs(fill = "Median Difference", alpha = "Significance")

D_Heat_pairs






##Next: analysis of fecal inoculum (in bioreactor) 16S data

##First: Load in the OTU table 2 and the metadata
OTU_Table_2_ <- readr::read_csv("Desktop/C_diff_2023/OTU_Table (2).csv")
#View(OTU_Table_2_)

Metadata_OTU2 <- readr::read_csv("Desktop/C_diff_2023/Metadata_OTU2.csv")
#View(Metadata_OTU2)

#Add a Genus column
OTU_Table_2_ <- OTU_Table_2_ %>%
  dplyr::mutate(Genus = stringr::str_extract(`#NAME`, "(?<=g:)[^,]+"))

#Normalise data 
OTU_Table_2_ <- OTU_Table_2_ %>%
  dplyr::mutate(across(c(-`#NAME`, -Genus), ~ . / sum(.)))

#Take out rows with NAs (unassigned OTUs)
OTU_Table_Fecal <- na.omit(OTU_Table_2_)

#Add all relative abundances for a genus together for each column and then transpose
OTU_Table_Fecal_T<- OTU_Table_Fecal[, (2:58)]
OTU_Table_Fecal_T <- OTU_Table_Fecal_T[, c(ncol(OTU_Table_Fecal_T), 1:(ncol(OTU_Table_Fecal_T)-1))]
OTU_Table_Fecal_Tr <-t(OTU_Table_Fecal_T)

#Set column names to be the values in the first row
colnames(OTU_Table_Fecal_Tr) <- OTU_Table_Fecal_Tr[1,]

#Remove the first row
OTU_Table_Fecal_Tr <- OTU_Table_Fecal_Tr[-1,]


# Convert the matrix to a df
OTU_Table_Fecal_Tr <- as.data.frame(OTU_Table_Fecal_Tr)

##First: sum relative abundances of all columns with same genera names together:
OTU_Table_Fecal_Tr_backup <- OTU_Table_Fecal_Tr


#Convert all columns from character to numeric
OTU_Table_Fecal_Tr[] <- lapply(OTU_Table_Fecal_Tr, as.numeric)

#next, sum columns with the same name
for (col_name in unique(colnames(OTU_Table_Fecal_Tr))) {
  # Find columns with this name
  matching_cols <- which(colnames(OTU_Table_Fecal_Tr) == col_name)
  
  # If there's more than one column with this name, sum them
  if (length(matching_cols) > 1) {
    OTU_Table_Fecal_Tr[, col_name] <- rowSums(OTU_Table_Fecal_Tr[, matching_cols])
  }
}

#Keep only unique column names
OTU_Table_Fecal_Tr_A <- OTU_Table_Fecal_Tr[, !duplicated(colnames(OTU_Table_Fecal_Tr))]

#quick cross-check if summations of genera went well
row_sums <- rowSums(OTU_Table_Fecal_Tr_A)

#Display the row sums (will not be a perfect 100 due to exclusion of some unannotated OTUs)
print(row_sums)

#we expect some samples to have a sum less than 1 because of OTUs not assigned to a Genus level resolution, etc.


#Assign metadata to the column that now contains the codes
#Extract the "Replicate" value from the rownames
# Next, we can extract the "Code" and "Replicate" from the row names and add the "Treatment" from the Metadata
OTU_Table_Fecal_Tr_A$Code <- rownames(OTU_Table_Fecal_Tr_A)
OTU_Table_Fecal_Tr_A$Replicate <- as.numeric(stringr::str_extract(OTU_Table_Fecal_Tr_A$Code, "\\d$"))

# Join with Metadata_OTU2 to get the "Treatment" value 
OTU_Table_Fecal_Tr_AF <- OTU_Table_Fecal_Tr_A %>%
  left_join(dplyr::select(Metadata_OTU2, Code, Treatment), by = "Code")

OTU_Table_Fecal_Tr_AF <- OTU_Table_Fecal_Tr_AF %>%
  left_join(dplyr::select(Metadata_OTU2, Code, Days), by = "Code")

OTU_Table_Fecal_Transposed <- OTU_Table_Fecal_Tr_AF %>%
  left_join(dplyr::select(Metadata_OTU2, Code, Conditions_Explained), by = "Code")


View(OTU_Table_Fecal_Transposed)


##Next, we want to calculate the ratio of Bacteroides to `Escherichia/Shigella`, and make boxplots
OTU_Table_Fecal_Transposed <- OTU_Table_Fecal_Transposed %>%
  dplyr::mutate(Ratio = Bacteroides / `Escherichia/Shigella`)


conditions <- unique(OTU_Table_Fecal_Transposed$Conditions_Explained)
conditions

comparisons_list <- list()

for (i in 1:(length(conditions) - 1)) {
  for (j in (i+1):length(conditions)) {
    comparisons_list[[paste(conditions[i], conditions[j], sep = " vs. ")]] <- c(conditions[i], conditions[j])
  }
}

comparisons_list

ggplot((subset(OTU_Table_Fecal_Transposed, Days >16)), aes(x = Conditions_Explained, y = log10(Ratio))) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(width = 0.2, alpha = 0.6) +
  #stat_compare_means(comparisons = comparisons_list, method = "t.test", label = "p.signif") +
  ggtitle("") +
  xlab("Condition") +
  ylab("Log10(Ratio)") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 60, hjust = 1))



#Import the t0 timepoint:
Fecal_t0 <- readr::read_csv("Downloads/Fecal.csv")

#Keep rows with SRA and genus-level information
filtered_Fecal_t0 <- Fecal_t0 %>% 
  dplyr::filter(grepl("\\|g_", `#Classification`))
first_row <- filtered_Fecal_t0[1, ]
filtered_Fecal_t0[,-1] <- lapply(filtered_Fecal_t0[,-1], as.numeric)

# Convert the rest of the df columns to numeric (excluding the first row and first column)
filtered_Fecal_t0[-1, -1] <- lapply(filtered_Fecal_t0[-1, -1], function(x) as.numeric(as.character(x)))
# Normalise each column (excluding the first column) starting from the second row
normalised_data <- filtered_Fecal_t0 %>%
  dplyr::mutate(across(where(is.numeric), ~ .x / sum(.x, na.rm = TRUE), .names = "{.col}"))


#Next: merge rows with identical info following '|g_' in accordance with info in second column
#First, extract the genus name and create a new column for it
normalised_data <- normalised_data %>%
  dplyr::mutate(Genus = stringr::str_extract(`#Classification`, "(?<=\\|g__)[^|]+")) %>%
  # If encountering NAs or extraction issues, ensure regex is correctly applied
  filter(!is.na(Genus)) # Optional: Filter out rows where Genus could not be extracted

#Summarise data by Genus, summing up all numerical columns
normalised_data_summarised <- normalised_data %>%
  dplyr::group_by(Genus) %>%
  dplyr::summarise(across(where(is.numeric), sum, na.rm = TRUE),
                   .groups = 'drop')

# The `#Classification` column will now contain the Genus name only
normalised_data_summarised <- normalised_data_summarised %>%
  dplyr::rename(`#Classification` = Genus)

str(normalised_data_summarised)


filtered_Fecal_t0_t <- tidyr::pivot_wider(normalised_data_summarised, 
                                   names_from = `#Classification`, 
                                   values_from = Fecal)
str(filtered_Fecal_t0_t)

#Calc. the Shannon Alpha Diversity Index for each row
filtered_Fecal_t0_t$Alpha_Index <- apply(filtered_Fecal_t0_t[-1], 1, function(x) {
  x <- x[x > 0] 
  p <- x / sum(x) 
  -sum(p * log(p)) 
})

#Calc. Ratio of "Bacteroides" to "Escherichia" for each row
# As well as another ratio of interest, e.g., Ratio "Bifidobacterium + Escherichia" to "Bacteroides"
filtered_Fecal_t0_t$Ratio <- (filtered_Fecal_t0_t$Bacteroides) / filtered_Fecal_t0_t$Escherichia
filtered_Fecal_t0_t$Ratio2 <-(filtered_Fecal_t0_t$Escherichia + filtered_Fecal_t0_t$Bifidobacterium) / (filtered_Fecal_t0_t$Bacteroides)

# Handle potential division by zero or where genera are not present
filtered_Fecal_t0_t$Ratio[is.nan(filtered_Fecal_t0_t$Ratio)] <- 0
filtered_Fecal_t0_t$Ratio[is.infinite(filtered_Fecal_t0_t$Ratio)] <- NA

filtered_Fecal_t0_t$Ratio2[is.nan(filtered_Fecal_t0_t$Ratio2)] <- 0
filtered_Fecal_t0_t$Ratio2[is.infinite(filtered_Fecal_t0_t$Ratio2)] <- NA

#Check the structure to verify
str(filtered_Fecal_t0_t)

#Pull ratio and alpha div forward
filtered_Fecal_t0_t <- filtered_Fecal_t0_t %>% select(Ratio, everything())
filtered_Fecal_t0_t <- filtered_Fecal_t0_t %>% select(Alpha_Index, everything())

#Lastly, add Study specifics for later when dataframes get merged
filtered_Fecal_t0_t$Days <- 0
filtered_Fecal_t0_t$Treatment <- "inoculum"
filtered_Fecal_t0_t$Conditions_Explained <- "inoculum"
filtered_Fecal_t0_t$Replicate <- NA
filtered_Fecal_t0_t$Code <- "inoc"


#####Fecal + C. diff (Healthy fecal)
#Reshape  data
OTU_long_Fecal_Inoculation_C.difficile_infection <- subset(OTU_Table_Fecal_Transposed, Conditions_Explained== "Fecal_Inoculation_C.difficile _infection") %>%
  dplyr::select(-Code, -Replicate, -Treatment, -Conditions_Explained, -Ratio) %>% # Exclude metadata columns
  tidyr::gather(Genus, Relative_Abundance, -Days) 


OTU_long_Fecal_Inoculation_C.difficile_infection <- OTU_long_Fecal_Inoculation_C.difficile_infection %>%
  dplyr::group_by(Days, Genus) %>%
  dplyr::mutate(Replicate = row_number()) %>%
  dplyr::ungroup()

# Convert to wide format
wide_data <- OTU_long_Fecal_Inoculation_C.difficile_infection %>%
  tidyr::spread(key = Genus, value = Relative_Abundance, fill = 0)

##add day 0 / inoculum info:

missing_cols <- setdiff(names(wide_data), names(filtered_Fecal_t0_t))

#Add the missing columns to 'filtered_Fecal_t0_t' and fill them with 0
for (col in missing_cols) {
  filtered_Fecal_t0_t[[col]] <- 0
}

#both dfs have the same columns, combine them
# The original 'wide_data' dataframe is unchanged, 'filtered_Fecal_t0_t' is appended beneath it
combined_data <- bind_rows(wide_data, filtered_Fecal_t0_t)
combined_data <- combined_data %>% select(names(wide_data))

#to avoid issues in the next step, add a row for t0 for each replicate (copy)
row_to_copy <- combined_data %>% 
  dplyr::filter(Days == 0 & is.na(Replicate))

if(nrow(row_to_copy) == 1) {
  #Replicate the row and set Replicate values
  rows_to_add <- bind_rows(
    dplyr::mutate(row_to_copy, Replicate = 1),
    dplyr::mutate(row_to_copy, Replicate = 2),
    dplyr::mutate(row_to_copy, Replicate = 3),
    dplyr::mutate(row_to_copy, Replicate = 4)
  )
  
  #Append so the new fecal t0 rows are added to the original dataframe
  combined_data <- bind_rows(combined_data, rows_to_add)
  
  #arrange by Days and Replicate if needed
  combined_data <- combined_data %>% arrange(Days, Replicate)
} else {
  message("No row with Days = 0 and Replicate = NA found to copy.")
}

combined_data <- combined_data %>%
  dplyr::filter(!(Days == 0 & is.na(Replicate)))


# Now we need to make pairwise comparisons between all the days for each replicate
#Initialise an empty data frame to store the Bray-Curtis results
bray_curtis_results <- data.frame(Replicate = integer(), Day_Pair = character(), Bray_Curtis = numeric())

# Loop over each replicate and calculate Bray-Curtis dissimilarity for each pair of days
unique_replicates <- unique(combined_data$Replicate)
for (rep in unique_replicates) {
  # Filter data for the current replicate
  replicate_data <- filter(combined_data, Replicate == rep)
  
  #extract all unique pairs of days to compare
  day_pairs <- combn(unique(replicate_data$Days), 2)
  
  #Calculate Bray-Curtis dissimilarity for each pair of days
  for (i in 1:ncol(day_pairs)) {
    day1_data <- filter(replicate_data, Days == day_pairs[1, i])
    day2_data <- filter(replicate_data, Days == day_pairs[2, i])
        bray_curtis_value <- vegan::vegdist(rbind(day1_data[-(1:2)], day2_data[-(1:2)]), method = "bray")
        bray_curtis_results <- rbind(bray_curtis_results, data.frame(
      Replicate = rep,
      Day_Pair = paste(day_pairs[1, i], day_pairs[2, i], sep = "-"),
      Bray_Curtis = as.numeric(bray_curtis_value)
    ))
  }
}

summary_table <- bray_curtis_results %>%
  dplyr::group_by(Day_Pair) %>%
  dplyr::summarize(
    Mean_Bray_Curtis = mean(Bray_Curtis),
    SD_Bray_Curtis = sd(Bray_Curtis),
    N = n(),
    SE_Bray_Curtis = SD_Bray_Curtis / sqrt(N),
    CI_Bray_Curtis = qt(0.975, df = N-1) * SE_Bray_Curtis
  ) %>%
  dplyr::mutate(
    Lower_CI = Mean_Bray_Curtis - CI_Bray_Curtis,
    Upper_CI = Mean_Bray_Curtis + CI_Bray_Curtis
  ) %>%
  dplyr::select(Day_Pair, Mean_Bray_Curtis, Lower_CI, Upper_CI)


summary_table <- summary_table %>%
  dplyr::mutate(Day_Pair = factor(Day_Pair, levels = unique(Day_Pair)))

filtered_summary_table <- summary_table %>%
  dplyr::filter(Day_Pair %in% c("0-8", "8-16", "16-20", "20-23")) %>%
  dplyr::mutate(Day_Pair = factor(Day_Pair, levels = c("0-8", "8-16", "16-20", "20-23")))

summary_table
filtered_summary_table


ggplot(filtered_summary_table, aes(x = Day_Pair, y = Mean_Bray_Curtis, group = 1)) +  
  geom_line(color = "blue") +
  geom_ribbon(aes(ymin = Lower_CI, ymax = Upper_CI, group = 1), fill = "blue", alpha = 0.2) +  
  labs(x = "Day Pair", y = "Mean Bray-Curtis Dissimilarity", 
       title = "Mean Bray-Curtis Dissimilarity over Time with Confidence Intervals") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) 

scaled_summary_table <- summary_table %>%
  dplyr::filter(Day_Pair %in% c("0-8", "8-16", "16-20", "20-23")) %>%
  dplyr::mutate(Scaled_Days = case_when(
    Day_Pair == "0-8" ~ 0,
    Day_Pair == "8-16" ~ 8,
    Day_Pair == "16-20" ~ 12,
    Day_Pair == "20-23" ~ 15
  ))

ggplot(scaled_summary_table, aes(x = Scaled_Days, y = Mean_Bray_Curtis, group = 1)) +
  geom_line(color = "blue") +
  geom_ribbon(aes(ymin = Lower_CI, ymax = Upper_CI, group = 1), fill = "blue", alpha = 0.2) +
  scale_x_continuous(breaks = c(0, 8, 12, 15), labels = c("0-8", "8-16", "16-20", "20-23"),
                     expand = c(0, 0), limits = c(0, 15)) +
  scale_y_continuous(limits = c(0, 1)) +  # Set y-axis limits
  labs(x = "Time Interval (Days)", y = "Bray-Curtis Dissimilarity", 
       title = "Bray-Curtis Dissimilarity for Fecal + C. difficile") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 0, hjust = 1),
    panel.grid.major = element_blank(), 
    panel.grid.minor = element_blank(),
    panel.border = element_rect(colour = "black", fill=NA, size=1),
    axis.line = element_line(color = "black")
  )



#Next, Calculate mean and standard deviation

Summary_stats <- OTU_long_Fecal_Inoculation_C.difficile_infection %>%
  dplyr::group_by(Days, Genus) %>%
  dplyr::summarise(
    Mean = mean(Relative_Abundance, na.rm = TRUE),
    SD = sd(Relative_Abundance, na.rm = TRUE)
  ) %>%
  ungroup()


# Convert to long format
filtered_Fecal_t0_t_long <- filtered_Fecal_t0_t %>%
  tidyr::pivot_longer(cols = -c(Alpha_Index, Ratio, Treatment, Conditions_Explained, Code), names_to = "Genus", values_to = "Value")

filtered_Fecal_t0_t_long <- filtered_Fecal_t0_t_long %>%
  dplyr::rename(Mean = Value)

filtered_Fecal_t0_t_long <- filtered_Fecal_t0_t_long %>%
  dplyr::mutate(Genus = ifelse(Genus == "Escherichia", "Escherichia/Shigella", Genus))


##add day 0 / inoculum info:
unique_genus_filtered = unique(filtered_Fecal_t0_t_long$Genus)
unique_genus_summary = unique(Summary_stats$Genus)

filtered_Fecal_t0_t_long_updated <- filtered_Fecal_t0_t_long %>%
  dplyr::filter(Genus %in% unique_genus_summary)




#both dataframes have the same columns, combine them
# The original 'wide_data' dataframe is unchanged, 'filtered_Fecal_t0_t' is appended beneath it
combined_data <- bind_rows(Summary_stats, filtered_Fecal_t0_t_long_updated)
#combined_data <- combined_data %>% select(names(wide_data))

combined_data <- combined_data %>%
  dplyr::mutate(Days = replace_na(Days, 0))


genus_colours <- c(
  "Alistipes" = "#1f77b4",
  "Allisonella" = "#ff7f0e",
  "Anaerococcus" = "#2ca02c",
  "Anaerostipes" = "#d62728",
  "Anoxybacillus" = "#9467bd",
  "Bacteroides" = "black",
  "Barnesiella" = "#e377c2",
  "Bifidobacterium" = "#7f7f7f",
  "Blautia" = "#bcbd22",
  "Butyricicoccus" = "#17becf",
  "Catenibacterium" = "#aec7e8",
  "Clostridium_IV" = "#ffbb78",
  "Clostridium_XI" = "magenta",
  "Clostridium_XVIII" = "#ff9896",
  "Clostridium_XlVa" = "#c5b0d5",
  "Clostridium_sensu_stricto" = "#c49c94",
  "Collinsella" = "#f7b6d2",
  "Coprobacillus" = "#c7c7c7",
  "Coprococcus" = "#dbdb8d",
  "Dialister" = "slategray3",
  "Dorea" = "turquoise",
  "Eggerthella" = "#393b79",
  "Eisenbergiella" = "royalblue2",
  "Enterococcus" = "blue",
  "Erysipelotrichaceae_incertae_sedis" = "#6b6ecf",
  "Escherichia/Shigella" = "#637939",
  "Eubacterium" = "#8ca252",
  "Exiguobacterium" = "cyan",
  "Faecalibacterium" = "#cedb9c",
  "Finegoldia" = "#8c6d31",
  "Flavonifractor" = "#bd9e39",
  "Fusicatenibacter" = "#e7ba52",
  "Gemmiger" = "#e7cb94",
  "Holdemanella" = "#843c39",
  "Holdemania" = "coral3",
  "Intestinimonas" = "#d6616b",
  "Klebsiella" = "#e7969c",
  "Lachnospiracea_incertae_sedis" = "#7b4173",
  "Lactobacillus" = "#a55194",
  "Lactococcus" = "#ce6dbd",
  "Megasphaera" = "#de9ed6",
  "Murdochiella" = "#3182bd",
  "Olsenella" = "#6baed6",
  "Oribacterium" = "#c6dbef",
  "Oscillibacter" = "yellow",
  "Parabacteroides" = "#e6550d",
  "Peptoniphilus" = "orange",
  "Phascolarctobacterium" = "orange3",
  "Prevotella" = "#fdd0a2",
  "Roseburia" = "#31a354",
  "Ruminococcus2" = "yellowgreen",
  "Senegalimassilia" = "#a1d99b",
  "Slackia" = "#c7e9c0",
  "Streptococcus" = "purple2",
  "Sutterella" = "#bcbddc",
  "Veillonella" = "#756bb1" 
)



ggplot(combined_data, aes(x = Days, y = Mean, fill = Genus)) +
  geom_bar(stat = "identity", position = "stack") +
  scale_fill_manual(values = genus_colours) +
  theme_minimal() +
  scale_y_continuous(limits = c(0, 1)) +  # Set y-axis limits
  scale_x_continuous(breaks = c(0, 8, 16, 20, 23)) + # Set x-axis breaks
  labs(title = "Fecal + C.difficile",
       x = "Days",
       y = "Mean Relative Abundance") +
  theme(
    axis.text.x = element_text(angle = 0, hjust = 1),
    panel.grid.major = element_blank(), 
    panel.grid.minor = element_blank(),
    panel.border = element_rect(colour = "black", fill=NA, size=0),
    axis.line = element_line(color = "black")
  )


# Plot dynamics: 
#Only take genera with greater than 1%
Summary_stats_main <- subset(Summary_stats, Mean > 0.01)

#Next; plot
colours <- c("black", "#00AFBB", "#2e37fe", "darkorchid1", "green", "#0072B2","indianred", "gold1", "firebrick4", "springgreen3",  "chocolate1","#6C0BA9", "red", "#999999", "magenta", "forestgreen")

ggplot(Summary_stats_main, aes(x = Days, y = Mean, color = Genus, group = Genus)) +
  geom_line(size = 1) +
  geom_ribbon(aes(ymin = Mean - SD, ymax = Mean + SD, fill = Genus), alpha = 0.3) +
  scale_color_manual(values = colours) +
  scale_fill_manual(values = colours) +
  theme_minimal() +
  labs(title = "Mean Relative Abundance of Genus across Days",
       subtitle = "Fecal_Inoculation_C.difficile _infection",
       x = "Day",
       y = "Relative Abundance") +
  theme(legend.position = "right", 
        legend.text = element_text(size = 12),
        axis.title.x = element_text(size = 14),
        axis.title.y = element_text(size = 14),
        axis.text.x = element_text(size = 12),
        axis.text.y = element_text(size = 12),
        plot.title = element_text(size = 16),
        plot.subtitle = element_text(size = 14))



#with error bars
colours <- c("black", "#00AFBB", "#2e37fe", "darkorchid1", "green", "#0072B2", "indianred", 
                   "gold1", "firebrick4", "springgreen3", "chocolate1", "#6C0BA9", "red", "#999999", "magenta", "forestgreen")
                   
ggplot(Summary_stats_main, aes(x = Days, y = Mean, color = Genus, group = Genus)) +
  geom_line(size = 1) +
  geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD), width = 0.2) +
  scale_color_manual(values = colours) +
  theme_minimal() +
  labs(title = "Mean Relative Abundance of Genus across Days",
       subtitle = "Fecal_Inoculation_C.difficile _infection",
       x = "Day",
       y = "Relative Abundance") +
  theme(legend.position = "right", 
        legend.text = element_text(size = 12),
        axis.title.x = element_text(size = 14),
        axis.title.y = element_text(size = 14),
        axis.text.x = element_text(size = 12),
        axis.text.y = element_text(size = 12),
        plot.title = element_text(size = 16),
        plot.subtitle = element_text(size = 14))


##Log scale
# Adding log-transformed columns
Summary_stats_main$Log_Relative_Abundance <- log10(Summary_stats_main$Mean + 0.0001)
Summary_stats_main$Log_SD <- log10(Summary_stats_main$SD + 0.01)

ggplot(Summary_stats_main, aes(x = Days, y = Log_Relative_Abundance, color = Genus, group = Genus)) +
  geom_line(size = 1) +
  #geom_errorbar(aes(ymin = Log_Relative_Abundance - Log_SD, ymax = Log_Relative_Abundance + Log_SD), width = 0.2) +
  scale_color_manual(values = colours) +
  theme_minimal() +
  labs(title = "Mean Log-Transformed Relative Abundance of Genus across Days",
       subtitle = "Fecal_Inoculation_C.difficile _infection",
       x = "Day",
       y = "Log Transformed Relative Abundance") +
  theme(legend.position = "right", 
        legend.text = element_text(size = 12),
        axis.title.x = element_text(size = 14),
        axis.title.y = element_text(size = 14),
        axis.text.x = element_text(size = 12),
        axis.text.y = element_text(size = 12),
        plot.title = element_text(size = 16),
        plot.subtitle = element_text(size = 14))








#########Fecal + AB + C. Diff

#First, we reshape the data
OTU_long_Fecal_Inoculation_Antibiotic_treatment_C.difficile <- subset(OTU_Table_Fecal_Transposed, Conditions_Explained== "Fecal_Inoculation_Antibiotic_treatment_C.difficile") %>%
  dplyr::select(-Code, -Replicate, -Treatment, -Conditions_Explained, -Ratio) %>% 
  gather(Genus, Relative_Abundance, -Days) 

OTU_long_Fecal_Inoculation_Antibiotic_treatment_C.difficile <- OTU_long_Fecal_Inoculation_Antibiotic_treatment_C.difficile %>%
  dplyr::group_by(Days, Genus) %>%
  dplyr::mutate(Replicate = row_number()) %>%
  dplyr::ungroup()


# Convert to wide format
wide_data <- OTU_long_Fecal_Inoculation_Antibiotic_treatment_C.difficile %>%
  tidyr::spread(key = Genus, value = Relative_Abundance, fill = 0)

##add day 0 / inoculum info:

missing_cols <- setdiff(names(wide_data), names(filtered_Fecal_t0_t))

#Add the missing columns to 'filtered_Fecal_t0_t' and fill them with 0
for (col in missing_cols) {
  filtered_Fecal_t0_t[[col]] <- 0
}

#both dfs have the same columns, combine them
# The original 'wide_data' dataframe is unchanged, 'filtered_Fecal_t0_t' is appended beneath it
combined_data <- bind_rows(wide_data, filtered_Fecal_t0_t)
combined_data <- combined_data %>% select(names(wide_data))

#to avoid issues in the next step, add a row for t0 for each replicate (copy)
row_to_copy <- combined_data %>% 
  filter(Days == 0 & is.na(Replicate))

if(nrow(row_to_copy) == 1) {
  #Replicate the row and set Replicate values
  rows_to_add <- bind_rows(
    dplyr::mutate(row_to_copy, Replicate = 1),
    dplyr::mutate(row_to_copy, Replicate = 2),
    dplyr::mutate(row_to_copy, Replicate = 3),
    dplyr::mutate(row_to_copy, Replicate = 4)
  )
  
  #Append so the new fecal t0 rows are added to the original dataframe
  combined_data <- bind_rows(combined_data, rows_to_add)
  
  #arrange by Days and Replicate if needed
  combined_data <- combined_data %>% arrange(Days, Replicate)
} else {
  message("No row with Days = 0 and Replicate = NA found to copy.")
}

combined_data <- combined_data %>%
  dplyr::filter(!(Days == 0 & is.na(Replicate)))


# Now we need to make pairwise comparisons between all the days for each replicate
#Initialise an empty data frame to store the Bray-Curtis results
bray_curtis_results <- data.frame(Replicate = integer(), Day_Pair = character(), Bray_Curtis = numeric())

##Loop over each replicate and calculate Bray-Curtis dissimilarity for each pair of days
unique_replicates <- unique(combined_data$Replicate)
for (rep in unique_replicates) {
  # Filter data for the current replicate
  replicate_data <- filter(combined_data, Replicate == rep)
  
  #extract all unique pairs of days to compare
  day_pairs <- combn(unique(replicate_data$Days), 2)
  
  #Calc. Bray-Curtis dissimilarity for each pair of days
  for (i in 1:ncol(day_pairs)) {
    day1_data <- filter(replicate_data, Days == day_pairs[1, i])
    day2_data <- filter(replicate_data, Days == day_pairs[2, i])
    bray_curtis_value <- vegan::vegdist(rbind(day1_data[-(1:2)], day2_data[-(1:2)]), method = "bray")
    bray_curtis_results <- rbind(bray_curtis_results, data.frame(
      Replicate = rep,
      Day_Pair = paste(day_pairs[1, i], day_pairs[2, i], sep = "-"),
      Bray_Curtis = as.numeric(bray_curtis_value)
    ))
  }
}

summary_table <- bray_curtis_results %>%
  dplyr::group_by(Day_Pair) %>%
  dplyr::summarize(
    Mean_Bray_Curtis = mean(Bray_Curtis),
    SD_Bray_Curtis = sd(Bray_Curtis),
    N = n(),
    SE_Bray_Curtis = SD_Bray_Curtis / sqrt(N),
    CI_Bray_Curtis = qt(0.975, df = N-1) * SE_Bray_Curtis
  ) %>%
  dplyr::mutate(
    Lower_CI = Mean_Bray_Curtis - CI_Bray_Curtis,
    Upper_CI = Mean_Bray_Curtis + CI_Bray_Curtis
  ) %>%
  dplyr::select(Day_Pair, Mean_Bray_Curtis, Lower_CI, Upper_CI)


summary_table <- summary_table %>%
  dplyr::mutate(Day_Pair = factor(Day_Pair, levels = unique(Day_Pair)))

filtered_summary_table <- summary_table %>%
  dplyr::filter(Day_Pair %in% c("0-8", "8-16", "16-20", "20-23")) %>%
  dplyr::mutate(Day_Pair = factor(Day_Pair, levels = c("0-8", "8-16", "16-20", "20-23")))

summary_table
filtered_summary_table


ggplot(filtered_summary_table, aes(x = Day_Pair, y = Mean_Bray_Curtis, group = 1)) +  
  geom_line(color = "blue") +
  geom_ribbon(aes(ymin = Lower_CI, ymax = Upper_CI, group = 1), fill = "blue", alpha = 0.2) +  
  labs(x = "Day Pair", y = "Mean Bray-Curtis Dissimilarity", 
       title = "Mean Bray-Curtis Dissimilarity over Time with Confidence Intervals") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) 

scaled_summary_table <- summary_table %>%
  dplyr::filter(Day_Pair %in% c("0-8", "8-16", "16-20", "20-23")) %>%
  dplyr::mutate(Scaled_Days = case_when(
    Day_Pair == "0-8" ~ 0,
    Day_Pair == "8-16" ~ 8,
    Day_Pair == "16-20" ~ 12,
    Day_Pair == "20-23" ~ 15
  ))

ggplot(scaled_summary_table, aes(x = Scaled_Days, y = Mean_Bray_Curtis, group = 1)) +
  geom_line(color = "blue") +
  geom_ribbon(aes(ymin = Lower_CI, ymax = Upper_CI, group = 1), fill = "blue", alpha = 0.2) +
  scale_x_continuous(breaks = c(0, 8, 12, 15), labels = c("0-8", "8-16", "16-20", "20-23"),
                     expand = c(0, 0), limits = c(0, 15)) +
  scale_y_continuous(limits = c(0, 1)) +  # Set y-axis limits
  labs(x = "Time Interval (Days)", y = "Bray-Curtis Dissimilarity", 
       title = "Bray-Curtis Dissimilarity for Fecal + AB + C. difficile") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 0, hjust = 1),
    panel.grid.major = element_blank(), 
    panel.grid.minor = element_blank(),
    panel.border = element_rect(colour = "black", fill=NA, size=1),
    axis.line = element_line(color = "black")
  )



#Next, calc mean and standard deviation

Summary_stats <- OTU_long_Fecal_Inoculation_Antibiotic_treatment_C.difficile %>%
  dplyr::group_by(Days, Genus) %>%
  dplyr::summarise(
    Mean = mean(Relative_Abundance, na.rm = TRUE),
    SD = sd(Relative_Abundance, na.rm = TRUE)
  ) %>%
  dplyr::ungroup()


# Convert to long format
filtered_Fecal_t0_t_long <- filtered_Fecal_t0_t %>%
  tidyr::pivot_longer(cols = -c(Alpha_Index, Ratio, Treatment, Conditions_Explained, Code), names_to = "Genus", values_to = "Value")

filtered_Fecal_t0_t_long <- filtered_Fecal_t0_t_long %>%
  dplyr::rename(Mean = Value)

filtered_Fecal_t0_t_long <- filtered_Fecal_t0_t_long %>%
  dplyr::mutate(Genus = ifelse(Genus == "Escherichia", "Escherichia/Shigella", Genus))


##add day 0 / inoculum info:
unique_genus_filtered = unique(filtered_Fecal_t0_t_long$Genus)
unique_genus_summary = unique(Summary_stats$Genus)

filtered_Fecal_t0_t_long_updated <- filtered_Fecal_t0_t_long %>%
  dplyr::filter(Genus %in% unique_genus_summary)




#both dfs have the same columns, combine them
# The original 'wide_data' dataframe is unchanged, 'filtered_Fecal_t0_t' is appended beneath it
combined_data <- bind_rows(Summary_stats, filtered_Fecal_t0_t_long_updated)
#combined_data <- combined_data %>% select(names(wide_data))

combined_data <- combined_data %>%
  dplyr::mutate(Days = replace_na(Days, 0))

genus_colours <- c(
  "Alistipes" = "#1f77b4",
  "Allisonella" = "#ff7f0e",
  "Anaerococcus" = "#2ca02c",
  "Anaerostipes" = "#d62728",
  "Anoxybacillus" = "#9467bd",
  "Bacteroides" = "black",
  "Barnesiella" = "#e377c2",
  "Bifidobacterium" = "#7f7f7f",
  "Blautia" = "#bcbd22",
  "Butyricicoccus" = "#17becf",
  "Catenibacterium" = "#aec7e8",
  "Clostridium_IV" = "#ffbb78",
  "Clostridium_XI" = "magenta",
  "Clostridium_XVIII" = "#ff9896",
  "Clostridium_XlVa" = "#c5b0d5",
  "Clostridium_sensu_stricto" = "#c49c94",
  "Collinsella" = "#f7b6d2",
  "Coprobacillus" = "#c7c7c7",
  "Coprococcus" = "#dbdb8d",
  "Dialister" = "slategray3",
  "Dorea" = "turquoise",
  "Eggerthella" = "#393b79",
  "Eisenbergiella" = "royalblue2",
  "Enterococcus" = "blue",
  "Erysipelotrichaceae_incertae_sedis" = "#6b6ecf",
  "Escherichia/Shigella" = "#637939",
  "Eubacterium" = "#8ca252",
  "Exiguobacterium" = "cyan",
  "Faecalibacterium" = "#cedb9c",
  "Finegoldia" = "#8c6d31",
  "Flavonifractor" = "#bd9e39",
  "Fusicatenibacter" = "#e7ba52",
  "Gemmiger" = "#e7cb94",
  "Holdemanella" = "#843c39",
  "Holdemania" = "coral3",
  "Intestinimonas" = "#d6616b",
  "Klebsiella" = "#e7969c",
  "Lachnospiracea_incertae_sedis" = "#7b4173",
  "Lactobacillus" = "#a55194",
  "Lactococcus" = "#ce6dbd",
  "Megasphaera" = "#de9ed6",
  "Murdochiella" = "#3182bd",
  "Olsenella" = "#6baed6",
  "Oribacterium" = "#c6dbef",
  "Oscillibacter" = "yellow",
  "Parabacteroides" = "#e6550d",
  "Peptoniphilus" = "orange",
  "Phascolarctobacterium" = "orange3",
  "Prevotella" = "#fdd0a2",
  "Roseburia" = "#31a354",
  "Ruminococcus2" = "yellowgreen",
  "Senegalimassilia" = "#a1d99b",
  "Slackia" = "#c7e9c0",
  "Streptococcus" = "purple2",
  "Sutterella" = "#bcbddc",
  "Veillonella" = "#756bb1" 
)



ggplot(combined_data, aes(x = Days, y = Mean, fill = Genus)) +
  geom_bar(stat = "identity", position = "stack") +
  scale_fill_manual(values = genus_colours) +
  theme_minimal() +
  scale_y_continuous(limits = c(0, 1)) + 
  scale_x_continuous(breaks = c(0, 8, 16, 20, 23)) + 
  labs(title = "Fecal + AB + C.difficile",
       x = "Days",
       y = "Mean Relative Abundance") +
  theme(
    axis.text.x = element_text(angle = 0, hjust = 1),
    panel.grid.major = element_blank(), 
    panel.grid.minor = element_blank(),
    panel.border = element_rect(colour = "black", fill=NA, size=0),
    axis.line = element_line(color = "black")
  )


# Plot dynamics: 
#Only take genera with greater than 1%
Summary_stats_main <- subset(Summary_stats, Mean > 0.01)

#Next; plot
colours <- c("black", "#00AFBB", "#2e37fe", "darkorchid1", "green", "#0072B2","indianred", "gold1", "firebrick4", "springgreen3",  "chocolate1","#6C0BA9", "red", "#999999", "magenta", "forestgreen", "blue")

ggplot(Summary_stats_main, aes(x = Days, y = Mean, color = Genus, group = Genus)) +
  geom_line(size = 1) +
  geom_ribbon(aes(ymin = Mean - SD, ymax = Mean + SD, fill = Genus), alpha = 0.3) +
  scale_color_manual(values = colours) +
  scale_fill_manual(values = colours) +
  theme_minimal() +
  labs(title = "Mean Relative Abundance of Genus across Days",
       subtitle = "Fecal_Inoculation_AB_C.difficile _infection",
       x = "Day",
       y = "Relative Abundance") +
  theme(legend.position = "right", 
        legend.text = element_text(size = 12),
        axis.title.x = element_text(size = 14),
        axis.title.y = element_text(size = 14),
        axis.text.x = element_text(size = 12),
        axis.text.y = element_text(size = 12),
        plot.title = element_text(size = 16),
        plot.subtitle = element_text(size = 14))



#with error bars
colours <- c("black", "#00AFBB", "#2e37fe", "darkorchid1", "green", "#0072B2", "indianred", 
                   "gold1", "firebrick4", "springgreen3", "chocolate1", "#6C0BA9", "red", "#999999", "magenta", "forestgreen", "blue")
                   
ggplot(Summary_stats_main, aes(x = Days, y = Mean, color = Genus, group = Genus)) +
  geom_line(size = 1) +
  geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD), width = 0.2) +
  scale_color_manual(values = colours) +
  theme_minimal() +
  labs(title = "Mean Relative Abundance of Genus across Days",
       subtitle = "Fecal_Inoculation_AB_C.difficile _infection",
       x = "Day",
       y = "Relative Abundance") +
  theme(legend.position = "right", 
        legend.text = element_text(size = 12),
        axis.title.x = element_text(size = 14),
        axis.title.y = element_text(size = 14),
        axis.text.x = element_text(size = 12),
        axis.text.y = element_text(size = 12),
        plot.title = element_text(size = 16),
        plot.subtitle = element_text(size = 14))


##Log scale
# Adding log-transformed columns
Summary_stats_main$Log_Relative_Abundance <- log10(Summary_stats_main$Mean + 0.0001)
Summary_stats_main$Log_SD <- log10(Summary_stats_main$SD + 0.01)

ggplot(Summary_stats_main, aes(x = Days, y = Log_Relative_Abundance, color = Genus, group = Genus)) +
  geom_line(size = 1) +
  #geom_errorbar(aes(ymin = Log_Relative_Abundance - Log_SD, ymax = Log_Relative_Abundance + Log_SD), width = 0.2) +
  scale_color_manual(values = colours) +
  theme_minimal() +
  labs(title = "Mean Log-Transformed Relative Abundance of Genus across Days",
       subtitle = "Fecal_Inoculation_AB_C.difficile _infection",
       x = "Day",
       y = "Log Transformed Relative Abundance") +
  theme(legend.position = "right", 
        legend.text = element_text(size = 12),
        axis.title.x = element_text(size = 14),
        axis.title.y = element_text(size = 14),
        axis.text.x = element_text(size = 12),
        axis.text.y = element_text(size = 12),
        plot.title = element_text(size = 16),
        plot.subtitle = element_text(size = 14))







####Fecal + AB + C. diff + Mix-14
# 1. Reshape data
OTU_long_Fecal_Inoculation_Antibiotic_treatment_C.difficile_infection_Mix14_treatment <- subset(OTU_Table_Fecal_Transposed, Conditions_Explained== "Fecal_Inoculation_Antibiotic_treatment_C.difficile_infection_Mix-14_treatment") %>%
  dplyr::select(-Code, -Replicate, -Treatment, -Conditions_Explained, -Ratio) %>% # Exclude metadata columns
  tidyr::gather(Genus, Relative_Abundance, -Days) # Convert to long format


OTU_long_Fecal_Inoculation_Antibiotic_treatment_C.difficile_infection_Mix14_treatment <- OTU_long_Fecal_Inoculation_Antibiotic_treatment_C.difficile_infection_Mix14_treatment %>%
  dplyr::group_by(Days, Genus) %>%
  dplyr::mutate(Replicate = row_number()) %>%
  dplyr::ungroup()


#Convert to wide format
wide_data <- OTU_long_Fecal_Inoculation_Antibiotic_treatment_C.difficile_infection_Mix14_treatment %>%
  tidyr::spread(key = Genus, value = Relative_Abundance, fill = 0)

##add day 0 / inoculum info:

missing_cols <- setdiff(names(wide_data), names(filtered_Fecal_t0_t))

# Add the missing columns to 'filtered_Fecal_t0_t' and fill them with 0
for (col in missing_cols) {
  filtered_Fecal_t0_t[[col]] <- 0
}

#both dfs have the same columns, combine them
# The original 'wide_data' dataframe is unchanged, 'filtered_Fecal_t0_t' is appended beneath it
combined_data <- bind_rows(wide_data, filtered_Fecal_t0_t)
combined_data <- combined_data %>% select(names(wide_data))

#to avoid issues in the next step, add a row for t0 for each replicate (copy)
row_to_copy <- combined_data %>% 
  dplyr::filter(Days == 0 & is.na(Replicate))

if(nrow(row_to_copy) == 1) {
  #Replicate the row and set Replicate values
  rows_to_add <- bind_rows(
    dplyr::mutate(row_to_copy, Replicate = 1),
    dplyr::mutate(row_to_copy, Replicate = 2),
    dplyr::mutate(row_to_copy, Replicate = 3),
    dplyr::mutate(row_to_copy, Replicate = 4)
  )
  
  #Append so the new fecal t0 rows are added to the original dataframe
  combined_data <- bind_rows(combined_data, rows_to_add)
  
  #arrange by Days and Replicate if needed
  combined_data <- combined_data %>% arrange(Days, Replicate)
} else {
  message("No row with Days = 0 and Replicate = NA found to copy.")
}

combined_data <- combined_data %>%
  dplyr::filter(!(Days == 0 & is.na(Replicate)))


# Now we need to make pairwise comparisons between all the days for each replicate
#Initialise an empty data frame to store the Bray-Curtis results
bray_curtis_results <- data.frame(Replicate = integer(), Day_Pair = character(), Bray_Curtis = numeric())

##Loop over each replicate and calculate Bray-Curtis dissimilarity for each pair of days
unique_replicates <- unique(combined_data$Replicate)
for (rep in unique_replicates) {
  # Filter data for the current replicate
  replicate_data <- filter(combined_data, Replicate == rep)
  
  #extract all unique pairs of days to compare
  day_pairs <- combn(unique(replicate_data$Days), 2)
  
  #Calc. Bray-Curtis dissimilarity for each pair of days
  for (i in 1:ncol(day_pairs)) {
    day1_data <- filter(replicate_data, Days == day_pairs[1, i])
    day2_data <- filter(replicate_data, Days == day_pairs[2, i])
    bray_curtis_value <- vegan::vegdist(rbind(day1_data[-(1:2)], day2_data[-(1:2)]), method = "bray")
    bray_curtis_results <- rbind(bray_curtis_results, data.frame(
      Replicate = rep,
      Day_Pair = paste(day_pairs[1, i], day_pairs[2, i], sep = "-"),
      Bray_Curtis = as.numeric(bray_curtis_value)
    ))
  }
}

summary_table <- bray_curtis_results %>%
  dplyr::group_by(Day_Pair) %>%
  dplyr::summarize(
    Mean_Bray_Curtis = mean(Bray_Curtis),
    SD_Bray_Curtis = sd(Bray_Curtis),
    N = n(),
    SE_Bray_Curtis = SD_Bray_Curtis / sqrt(N),
    CI_Bray_Curtis = qt(0.975, df = N-1) * SE_Bray_Curtis
  ) %>%
  dplyr::mutate(
    Lower_CI = Mean_Bray_Curtis - CI_Bray_Curtis,
    Upper_CI = Mean_Bray_Curtis + CI_Bray_Curtis
  ) %>%
  dplyr::select(Day_Pair, Mean_Bray_Curtis, Lower_CI, Upper_CI)


summary_table <- summary_table %>%
  dplyr::mutate(Day_Pair = factor(Day_Pair, levels = unique(Day_Pair)))

filtered_summary_table <- summary_table %>%
  dplyr::filter(Day_Pair %in% c("0-8", "8-16", "16-20", "20-23")) %>%
  dplyr::mutate(Day_Pair = factor(Day_Pair, levels = c("0-8", "8-16", "16-20", "20-23")))

summary_table
filtered_summary_table


ggplot(filtered_summary_table, aes(x = Day_Pair, y = Mean_Bray_Curtis, group = 1)) +  
  geom_line(color = "blue") +
  geom_ribbon(aes(ymin = Lower_CI, ymax = Upper_CI, group = 1), fill = "blue", alpha = 0.2) +  
  labs(x = "Day Pair", y = "Mean Bray-Curtis Dissimilarity", 
       title = "Mean Bray-Curtis Dissimilarity over Time with Confidence Intervals") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) 

scaled_summary_table <- summary_table %>%
  dplyr::filter(Day_Pair %in% c("0-8", "8-16", "16-20", "20-23")) %>%
  dplyr::mutate(Scaled_Days = case_when(
    Day_Pair == "0-8" ~ 0,
    Day_Pair == "8-16" ~ 8,
    Day_Pair == "16-20" ~ 12,
    Day_Pair == "20-23" ~ 15
  ))

ggplot(scaled_summary_table, aes(x = Scaled_Days, y = Mean_Bray_Curtis, group = 1)) +
  geom_line(color = "blue") +
  geom_ribbon(aes(ymin = Lower_CI, ymax = Upper_CI, group = 1), fill = "blue", alpha = 0.2) +
  scale_x_continuous(breaks = c(0, 8, 12, 15), labels = c("0-8", "8-16", "16-20", "20-23"),
                     expand = c(0, 0), limits = c(0, 15)) +
  scale_y_continuous(limits = c(0, 1)) +  # Set y-axis limits
  labs(x = "Time Interval (Days)", y = "Bray-Curtis Dissimilarity", 
       title = "Bray-Curtis Dissimilarity for Fecal + AB + C. difficile + Mix-14") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 0, hjust = 1),
    panel.grid.major = element_blank(), 
    panel.grid.minor = element_blank(),
    panel.border = element_rect(colour = "black", fill=NA, size=1),
    axis.line = element_line(color = "black")
  )



#Next; calc mean and standard deviation

Summary_stats <- OTU_long_Fecal_Inoculation_Antibiotic_treatment_C.difficile_infection_Mix14_treatment %>%
  dplyr::group_by(Days, Genus) %>%
  dplyr::summarise(
    Mean = mean(Relative_Abundance, na.rm = TRUE),
    SD = sd(Relative_Abundance, na.rm = TRUE)
  ) %>%
  dplyr::ungroup()


# Convert to long format
filtered_Fecal_t0_t_long <- filtered_Fecal_t0_t %>%
  tidyr::pivot_longer(cols = -c(Alpha_Index, Ratio, Treatment, Conditions_Explained, Code), names_to = "Genus", values_to = "Value")

filtered_Fecal_t0_t_long <- filtered_Fecal_t0_t_long %>%
  dplyr::rename(Mean = Value)

filtered_Fecal_t0_t_long <- filtered_Fecal_t0_t_long %>%
  dplyr::mutate(Genus = ifelse(Genus == "Escherichia", "Escherichia/Shigella", Genus))


##add day 0 / inoculum info:
unique_genus_filtered = unique(filtered_Fecal_t0_t_long$Genus)
unique_genus_summary = unique(Summary_stats$Genus)

filtered_Fecal_t0_t_long_updated <- filtered_Fecal_t0_t_long %>%
  dplyr::filter(Genus %in% unique_genus_summary)




#both dfs have the same columns, combine them
# The original 'wide_data' dataframe is unchanged, 'filtered_Fecal_t0_t' is appended beneath it
combined_data <- bind_rows(Summary_stats, filtered_Fecal_t0_t_long_updated)
#combined_data <- combined_data %>% select(names(wide_data))

combined_data <- combined_data %>%
  dplyr::mutate(Days = replace_na(Days, 0))


genus_colours <- c(
  "Alistipes" = "#1f77b4",
  "Allisonella" = "#ff7f0e",
  "Anaerococcus" = "#2ca02c",
  "Anaerostipes" = "#d62728",
  "Anoxybacillus" = "#9467bd",
  "Bacteroides" = "black",
  "Barnesiella" = "#e377c2",
  "Bifidobacterium" = "#7f7f7f",
  "Blautia" = "#bcbd22",
  "Butyricicoccus" = "#17becf",
  "Catenibacterium" = "#aec7e8",
  "Clostridium_IV" = "#ffbb78",
  "Clostridium_XI" = "magenta",
  "Clostridium_XVIII" = "#ff9896",
  "Clostridium_XlVa" = "#c5b0d5",
  "Clostridium_sensu_stricto" = "#c49c94",
  "Collinsella" = "#f7b6d2",
  "Coprobacillus" = "#c7c7c7",
  "Coprococcus" = "#dbdb8d",
  "Dialister" = "slategray3",
  "Dorea" = "turquoise",
  "Eggerthella" = "#393b79",
  "Eisenbergiella" = "royalblue2",
  "Enterococcus" = "blue",
  "Erysipelotrichaceae_incertae_sedis" = "#6b6ecf",
  "Escherichia/Shigella" = "#637939",
  "Eubacterium" = "#8ca252",
  "Exiguobacterium" = "cyan",
  "Faecalibacterium" = "#cedb9c",
  "Finegoldia" = "#8c6d31",
  "Flavonifractor" = "#bd9e39",
  "Fusicatenibacter" = "#e7ba52",
  "Gemmiger" = "#e7cb94",
  "Holdemanella" = "#843c39",
  "Holdemania" = "coral3",
  "Intestinimonas" = "#d6616b",
  "Klebsiella" = "#e7969c",
  "Lachnospiracea_incertae_sedis" = "#7b4173",
  "Lactobacillus" = "#a55194",
  "Lactococcus" = "#ce6dbd",
  "Megasphaera" = "#de9ed6",
  "Murdochiella" = "#3182bd",
  "Olsenella" = "#6baed6",
  "Oribacterium" = "#c6dbef",
  "Oscillibacter" = "yellow",
  "Parabacteroides" = "#e6550d",
  "Peptoniphilus" = "orange",
  "Phascolarctobacterium" = "orange3",
  "Prevotella" = "#fdd0a2",
  "Roseburia" = "#31a354",
  "Ruminococcus2" = "yellowgreen",
  "Senegalimassilia" = "#a1d99b",
  "Slackia" = "#c7e9c0",
  "Streptococcus" = "purple2",
  "Sutterella" = "#bcbddc",
  "Veillonella" = "#756bb1" 
)



ggplot(combined_data, aes(x = Days, y = Mean, fill = Genus)) +
  geom_bar(stat = "identity", position = "stack") +
  scale_fill_manual(values = genus_colours) +
  theme_minimal() +
  scale_y_continuous(limits = c(0, 1)) +  # Set y-axis limits
  scale_x_continuous(breaks = c(0, 8, 16, 20, 23)) + # Set x-axis breaks
  labs(title = "Fecal + AB + C.difficile + Mix-14",
       x = "Days",
       y = "Mean Relative Abundance") +
  theme(
    axis.text.x = element_text(angle = 0, hjust = 1),
    panel.grid.major = element_blank(), 
    panel.grid.minor = element_blank(),
    panel.border = element_rect(colour = "black", fill=NA, size=0),
    axis.line = element_line(color = "black")
  )


#Plot dynamics: 
#Only take genera with greater than 1%
Summary_stats_main <- subset(Summary_stats, Mean > 0.01)

#Next; plot
colours <- c("black", "#00AFBB", "#2e37fe", "darkorchid1", "green", "#0072B2","indianred", "gold1", "firebrick4", "springgreen3",  "chocolate1","#6C0BA9", "red", "#999999", "magenta", "forestgreen", "blue")

ggplot(Summary_stats_main, aes(x = Days, y = Mean, color = Genus, group = Genus)) +
  geom_line(size = 1) +
  geom_ribbon(aes(ymin = Mean - SD, ymax = Mean + SD, fill = Genus), alpha = 0.3) +
  scale_color_manual(values = colours) +
  scale_fill_manual(values = colours) +
  theme_minimal() +
  labs(title = "Mean Relative Abundance of Genus across Days",
       subtitle = "Fecal_Inoculation_AB_C.difficile_infection_Mix-14",
       x = "Day",
       y = "Relative Abundance") +
  theme(legend.position = "right", 
        legend.text = element_text(size = 12),
        axis.title.x = element_text(size = 14),
        axis.title.y = element_text(size = 14),
        axis.text.x = element_text(size = 12),
        axis.text.y = element_text(size = 12),
        plot.title = element_text(size = 16),
        plot.subtitle = element_text(size = 14))



#with error bars
colours <- c("black", "#00AFBB", "#2e37fe", "darkorchid1", "green", "#0072B2", "indianred", 
                   "gold1", "firebrick4", "springgreen3", "chocolate1", "#6C0BA9", "red", "#999999", "magenta", "forestgreen", "blue")
                   
ggplot(Summary_stats_main, aes(x = Days, y = Mean, color = Genus, group = Genus)) +
  geom_line(size = 1) +
  geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD), width = 0.2) +
  scale_color_manual(values = colours) +
  theme_minimal() +
  labs(title = "Mean Relative Abundance of Genus across Days",
       subtitle = "Fecal_Inoculation_AB_C.difficile _infection_Mix-14",
       x = "Day",
       y = "Relative Abundance") +
  theme(legend.position = "right", 
        legend.text = element_text(size = 12),
        axis.title.x = element_text(size = 14),
        axis.title.y = element_text(size = 14),
        axis.text.x = element_text(size = 12),
        axis.text.y = element_text(size = 12),
        plot.title = element_text(size = 16),
        plot.subtitle = element_text(size = 14))


##Log scale
# Adding log-transformed columns
Summary_stats_main$Log_Relative_Abundance <- log10(Summary_stats_main$Mean + 0.0001)
Summary_stats_main$Log_SD <- log10(Summary_stats_main$SD + 0.01)

ggplot(Summary_stats_main, aes(x = Days, y = Log_Relative_Abundance, color = Genus, group = Genus)) +
  geom_line(size = 1) +
  #geom_errorbar(aes(ymin = Log_Relative_Abundance - Log_SD, ymax = Log_Relative_Abundance + Log_SD), width = 0.2) +
  scale_color_manual(values = colours) +
  theme_minimal() +
  labs(title = "Mean Log-Transformed Relative Abundance of Genus across Days",
       subtitle = "Fecal_Inoculation_AB_C.difficile _infection_Mix-14",
       x = "Day",
       y = "Log Transformed Relative Abundance") +
  theme(legend.position = "right", 
        legend.text = element_text(size = 12),
        axis.title.x = element_text(size = 14),
        axis.title.y = element_text(size = 14),
        axis.text.x = element_text(size = 12),
        axis.text.y = element_text(size = 12),
        plot.title = element_text(size = 16),
        plot.subtitle = element_text(size = 14))



#calc alpha div experiment 2 (i.e., fecal inoculum in bioreactor + AB and ± Mix-14 intervention)

#calculate Shannon Index for a single row of relative abundances
shannon_index <- function(row) {
  #Filter out zeros to avoid taking log(0)
  valid_values <- row[row > 0]
  
  #Calculate Shannon Index
  -sum(valid_values * log(valid_values))
}

# Apply the function to each row
OTU_Table_Fecal_Transposed$Shannon_Index <- apply(OTU_Table_Fecal_Transposed[, 1:56], 1, shannon_index)



# Define custom colours to represent suppressiveness
library(ggplot2)
library(ggpubr)

OTU_Table_Fecal_Transposed$Conditions_Explained <- gsub(" ", "", OTU_Table_Fecal_Transposed$Conditions_Explained)


colour_mapping <- c("Fecal_Inoculation_Antibiotic_treatment_C.difficile" = "#F8766D", 
                   "Fecal_Inoculation_Antibiotic_treatment_C.difficile_infection_Mix-14_treatment" = "#00BFC4", 
                   "Fecal_Inoculation_C.difficile_infection" = "#00BFC4")

legend_labels <- c("Fecal_Inoculation_Antibiotic_treatment_C.difficile" = "non-suppressive", 
                   "Fecal_Inoculation_Antibiotic_treatment_C.difficile_infection_Mix-14_treatment" = "suppressive", 
                   "Fecal_Inoculation_C.difficile_infection" = "suppressive")

#Create boxplot
fecal_exp_alpha_div_boxplot <- ggplot(subset(OTU_Table_Fecal_Transposed, Days > 13), 
            aes(x = Conditions_Explained, y = Shannon_Index)) +
  geom_boxplot(aes(color = Conditions_Explained), 
               outlier.shape = NA, position = position_dodge(0.8), lwd=0.5) +
  geom_jitter(aes(color = Conditions_Explained), position = position_jitterdodge(jitter.width = 0.2), size = 2, alpha = 0.6) + 
  scale_color_manual(values = colour_mapping, labels = legend_labels, name = "Legend") +
  scale_fill_manual(values = colour_mapping, labels = legend_labels, name = "Legend") +
  labs(title = "Shannon Diversity Index across Conditions for 
Fecal background experiment, after Day 13 (C. diff inoculation)",
       x = "Condition",
       y = "Shannon Diversity Index") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 70, hjust = 1),
        legend.position = "right",
        legend.title = element_text(size = 11),
        plot.title = element_text(size = 11),
        legend.text = element_text(size = 11))

fecal_exp_alpha_div_boxplot

fecal_exp_alpha_div_boxplot + stat_compare_means(comparisons = list(c("Fecal_Inoculation_Antibiotic_treatment_C.difficile", "Fecal_Inoculation_Antibiotic_treatment_C.difficile_infection_Mix-14_treatment"), 
                                          c("Fecal_Inoculation_Antibiotic_treatment_C.difficile", "Fecal_Inoculation_C.difficile_infection"), 
                                          c("Fecal_Inoculation_Antibiotic_treatment_C.difficile_infection_Mix-14_treatment", "Fecal_Inoculation_C.difficile_infection")), 
                       method = "t.test", label = "p.signif")




###Calculate ratios

ratio_results <- OTU_Table_Fecal_Transposed %>%
  dplyr::filter(Days >=16) %>%
  dplyr::mutate(Ratio = Bacteroides / `Escherichia/Shigella`) %>%
  dplyr::select(Code, Conditions_Explained, Ratio)

print(ratio_results)


colour_mapping <- c("Fecal_Inoculation_Antibiotic_treatment_C.difficile" = "#F8766D", 
                   "Fecal_Inoculation_Antibiotic_treatment_C.difficile_infection_Mix-14_treatment" = "#00BFC4", 
                   "Fecal_Inoculation_C.difficile_infection" = "#00BFC4")

legend_labels <- c("Fecal_Inoculation_Antibiotic_treatment_C.difficile" = "non-suppressive", 
                   "Fecal_Inoculation_Antibiotic_treatment_C.difficile_infection_Mix-14_treatment" = "suppressive", 
                   "Fecal_Inoculation_C.difficile_infection" = "suppressive")

#Create the boxplot
fecal_exp_ratio_boxplot <- ggplot(ratio_results, 
            aes(x = Conditions_Explained, y = Ratio + 0.0001)) +
  geom_boxplot(aes(color = Conditions_Explained), 
               outlier.shape = NA, position = position_dodge(0.8), lwd=0.5) +
  geom_jitter(aes(color = Conditions_Explained), position = position_jitterdodge(jitter.width = 0.2), size = 2, alpha = 0.6) + 
  scale_color_manual(values = colour_mapping, labels = legend_labels, name = "Legend") +
  scale_fill_manual(values = colour_mapping, labels = legend_labels, name = "Legend") +
  labs(title = "Ratio of Bacteroides vs. Escherichia/Shigella 
across Conditions for Fecal background experiment, from Day 16 onwards",
       x = "Condition",
       y = "log10(Bacteroides to Escherichia/Shigella Ratio + 0.0001)") +
  theme_minimal() +
  scale_y_log10() +  # sets the y-axis to log10 scale
  theme(axis.text.x = element_text(angle = 80, hjust = 1),
        legend.position = "right",
        legend.title = element_text(size = 11),
        plot.title = element_text(size = 11),
        legend.text = element_text(size = 11))

fecal_exp_ratio_boxplot

fecal_exp_ratio_boxplot + stat_compare_means(comparisons = list(c("Fecal_Inoculation_Antibiotic_treatment_C.difficile", "Fecal_Inoculation_Antibiotic_treatment_C.difficile_infection_Mix-14_treatment"), 
                                          c("Fecal_Inoculation_Antibiotic_treatment_C.difficile", "Fecal_Inoculation_C.difficile_infection"), 
                                          c("Fecal_Inoculation_Antibiotic_treatment_C.difficile_infection_Mix-14_treatment", "Fecal_Inoculation_C.difficile_infection")), 
                       method = "t.test", label = "p.signif")




###Next: focus on individual genera

##bacteroides
genus_results <- OTU_Table_Fecal_Transposed %>%
  dplyr::filter(Days >= 16) %>%
  dplyr::mutate(Ratio = Bacteroides) %>%
  dplyr::select(Code, Conditions_Explained, Ratio)

colour_mapping <- c("Fecal_Inoculation_Antibiotic_treatment_C.difficile" = "#F8766D", 
                   "Fecal_Inoculation_Antibiotic_treatment_C.difficile_infection_Mix-14_treatment" = "#00BFC4", 
                   "Fecal_Inoculation_C.difficile_infection" = "#00BFC4")

legend_labels <- c("Fecal_Inoculation_Antibiotic_treatment_C.difficile" = "non-suppressive", 
                   "Fecal_Inoculation_Antibiotic_treatment_C.difficile_infection_Mix-14_treatment" = "suppressive", 
                   "Fecal_Inoculation_C.difficile_infection" = "suppressive")

#Create the boxplot
fecal_exp_bacteroides_boxplot <- ggplot(genus_results, 
            aes(x = Conditions_Explained, y = log10(Ratio))) +
  geom_boxplot(aes(color = Conditions_Explained), 
               outlier.shape = NA, position = position_dodge(0.8), lwd=0.5) +
  geom_jitter(aes(color = Conditions_Explained), position = position_jitterdodge(jitter.width = 0.2), size = 2, alpha = 0.6) + 
  scale_color_manual(values = colour_mapping, labels = legend_labels, name = "Legend") +
  scale_fill_manual(values = colour_mapping, labels = legend_labels, name = "Legend") +
  labs(title = "Bacteroides relative abundance across Conditions 
for Fecal background experiment, from Day 16 onwards",
       x = "Condition",
       y = "Bacteroides") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 80, hjust = 1),
        legend.position = "right",
        legend.title = element_text(size = 11),
        plot.title = element_text(size = 11),
        legend.text = element_text(size = 11))

fecal_exp_bacteroides_boxplot

fecal_exp_bacteroides_boxplot + stat_compare_means(comparisons = list(c("Fecal_Inoculation_Antibiotic_treatment_C.difficile", "Fecal_Inoculation_Antibiotic_treatment_C.difficile_infection_Mix-14_treatment"), 
                                          c("Fecal_Inoculation_Antibiotic_treatment_C.difficile", "Fecal_Inoculation_C.difficile_infection"), 
                                          c("Fecal_Inoculation_Antibiotic_treatment_C.difficile_infection_Mix-14_treatment", "Fecal_Inoculation_C.difficile_infection")), 
                       method = "t.test", label = "p.signif")



##The next experiment done using the fecal inoculum in the bioreacter was experiment 3:
#This experiment was aimed at elucidating the suppressive capacities of sub-configurations of Mix-14 
#Exp 3: fecal + AB (D9-12) + C. diff (D13) + Mix 13 (Mix14-B. caccae) / Mix 4 (E. coli + B. vulgatus + B. unif) / Mix 3 (E. coli, B. vulgatus, B. unif) at D16
##Let's import the data and the metadata for experiment 3


OTU_Table_3 <- read_csv("Desktop/C_diff_2023/OTU_Table_3.csv")
#View(OTU_Table_3)

Metadata_OTU3 <- read_csv("Desktop/C_diff_2023/Metadata_3.csv")
#View(Metadata_OTU3)

#Add a Genus column
OTU_Table_3 <- OTU_Table_3 %>%
  dplyr::mutate(Genus = str_extract(`#NAME`, "(?<=g:)[^,]+"))

#Normalise data
OTU_Table_3 <- OTU_Table_3 %>%
  dplyr::mutate(across(c(-`#NAME`, -Genus), ~ . / sum(.)))

#Take out rows with NAs (unassigned OTUs)
OTU_Table_Fecal <- na.omit(OTU_Table_3)

#Add all relative abundances for a genus together for each column and then transpose
OTU_Table_Fecal_T<-OTU_Table_Fecal[, (2:25)]
OTU_Table_Fecal_T <- OTU_Table_Fecal_T[, c(ncol(OTU_Table_Fecal_T), 1:(ncol(OTU_Table_Fecal_T)-1))]
OTU_Table_Fecal_Tr_3 <-t(OTU_Table_Fecal_T)

# Set column names to be the values in the first row
colnames(OTU_Table_Fecal_Tr_3) <- OTU_Table_Fecal_Tr_3[1,]

# Remove the first row
OTU_Table_Fecal_Tr_3 <- OTU_Table_Fecal_Tr_3[-1,]

# Convert the matrix to a data frame
OTU_Table_Fecal_Tr_3 <- as.data.frame(OTU_Table_Fecal_Tr_3)

##First: sum relative abundances of all columns with same genera names together:
OTU_Table_Fecal_Tr_3_backup <- OTU_Table_Fecal_Tr_3

#Convert all columns from character to numeric
OTU_Table_Fecal_Tr_3[] <- lapply(OTU_Table_Fecal_Tr_3, as.numeric)

#Sum columns with the same name
for (col_name in unique(colnames(OTU_Table_Fecal_Tr_3))) {
  # Find columns with this name
  matching_cols <- which(colnames(OTU_Table_Fecal_Tr_3) == col_name)
  
  # If there's more than one column with this name, sum them
  if (length(matching_cols) > 1) {
    OTU_Table_Fecal_Tr_3[, col_name] <- rowSums(OTU_Table_Fecal_Tr_3[, matching_cols])
  }
}

#Keep only unique column names
OTU_Table_Fecal_Tr_A_3 <- OTU_Table_Fecal_Tr_3[, !duplicated(colnames(OTU_Table_Fecal_Tr_3))]

#quick cross-check if summations of genera went well
row_sums <- rowSums(OTU_Table_Fecal_Tr_A_3)

#Display the row sums (will not be a perfect 100% due to exclusion of some unannotated OTUs)
print(row_sums)


#Assign metadata to the column that now contains the codes
#Extract the "Replicate" value from the rownames
# Next, we can extract the "Code" and "Replicate" from the row names and add the "Treatment" from the Metadata
OTU_Table_Fecal_Tr_A_3$Code <- rownames(OTU_Table_Fecal_Tr_A_3)
OTU_Table_Fecal_Tr_A_3$Replicate <- as.numeric(stringr::str_extract(OTU_Table_Fecal_Tr_A_3$Code, "\\d$"))

# Join with Metadata_OTU2 to get the "Treatment" value 
OTU_Table_Fecal_Tr_AF_3 <- OTU_Table_Fecal_Tr_A_3 %>%
  dplyr::left_join(dplyr::select(Metadata_OTU3, Code, Treatment), by = "Code")

OTU_Table_Fecal_Tr_AF_3 <- OTU_Table_Fecal_Tr_AF_3 %>%
  dplyr::left_join(dplyr::select(Metadata_OTU3, Code, Days), by = "Code")

OTU_Table_Fecal_Transposed_3 <- OTU_Table_Fecal_Tr_AF_3 %>%
  dplyr::left_join(dplyr::select(Metadata_OTU3, Code, Conditions_Explained), by = "Code")



###Experiment 4 with fecal inoculum in the bioreactor setup: Individual bugs as intervention experiment
#this experiment aims to elucidate which species are key for an intervention mix to have success:
OTU_Table_4 <- read_csv("Desktop/C_diff_2023/OTU_Table_4.csv")
#View(OTU_Table_4)

Metadata_OTU4 <- read_csv("Desktop/C_diff_2023/Metadata_4.csv")
#View(Metadata_OTU4)

#Add a Genus column
OTU_Table_4 <- OTU_Table_4 %>%
  dplyr::mutate(Genus = str_extract(`#NAME`, "(?<=g:)[^,]+"))

#Normalise data 
OTU_Table_4 <- OTU_Table_4 %>%
  dplyr::mutate(across(c(-`#NAME`, -Genus), ~ . / sum(.)))

#Take out rows with NAs (unassigned OTUs)
OTU_Table_Fecal <- na.omit(OTU_Table_4)

#Add all relative abundances for a genus together for each column and then transpose
OTU_Table_Fecal_T<-OTU_Table_Fecal[, (2:31)]
OTU_Table_Fecal_T <- OTU_Table_Fecal_T[, c(ncol(OTU_Table_Fecal_T), 1:(ncol(OTU_Table_Fecal_T)-1))]
OTU_Table_Fecal_Tr_4 <-t(OTU_Table_Fecal_T)

# Set column names to be the values in the first row
colnames(OTU_Table_Fecal_Tr_4) <- OTU_Table_Fecal_Tr_4[1,]

# Remove the first row
OTU_Table_Fecal_Tr_4 <- OTU_Table_Fecal_Tr_4[-1,]


# Convert the matrix to a data frame
OTU_Table_Fecal_Tr_4 <- as.data.frame(OTU_Table_Fecal_Tr_4)

##First: sum relative abundances of all columns with same genera names together:
OTU_Table_Fecal_Tr_4_backup <- OTU_Table_Fecal_Tr_4

#Convert all columns from character to numeric
OTU_Table_Fecal_Tr_4[] <- lapply(OTU_Table_Fecal_Tr_4, as.numeric)

#Sum columns with the same name
for (col_name in unique(colnames(OTU_Table_Fecal_Tr_4))) {
  # Find columns with this name
  matching_cols <- which(colnames(OTU_Table_Fecal_Tr_4) == col_name)
  
  # If there's more than one column with this name, sum them
  if (length(matching_cols) > 1) {
    OTU_Table_Fecal_Tr_4[, col_name] <- rowSums(OTU_Table_Fecal_Tr_4[, matching_cols])
  }
}

#Keep only unique column names
OTU_Table_Fecal_Tr_A_4 <- OTU_Table_Fecal_Tr_4[, !duplicated(colnames(OTU_Table_Fecal_Tr_4))]

#quick cross-check if summations of genera went well
row_sums <- rowSums(OTU_Table_Fecal_Tr_A_4)

#Display the row sums (will not be a perfect 100 due to exclusion of some unannotated OTUs)
print(row_sums)


#Assign metadata to the column that now contains the codes
#Extract the "Replicate" value from the rownames
# Next, we can extract the "Code" and "Replicate" from the row names and add the "Treatment" from the Metadata
OTU_Table_Fecal_Tr_A_4$Code <- rownames(OTU_Table_Fecal_Tr_A_4)
OTU_Table_Fecal_Tr_A_4$Replicate <- as.numeric(stringr::str_extract(OTU_Table_Fecal_Tr_A_4$Code, "\\d$"))

# Join with Metadata_OTU2 to get the "Treatment" value using dplyr
OTU_Table_Fecal_Tr_AF_4 <- OTU_Table_Fecal_Tr_A_4 %>%
  dplyr::left_join(dplyr::select(Metadata_OTU4, Code, Treatment), by = "Code")

OTU_Table_Fecal_Transposed_4 <- OTU_Table_Fecal_Tr_AF_4 %>%
  dplyr::left_join(dplyr::select(Metadata_OTU4, Code, Conditions_Explained), by = "Code")


#Calc alpha div

OTU_Table_Fecal_Transposed_4 <- OTU_Table_Fecal_Transposed_4 %>%
  dplyr::rowwise() %>%
  dplyr::mutate(Shannon_Index = -sum(across(1:49) * log(across(1:49) + 1e-10), na.rm = TRUE)) %>%
  dplyr::ungroup()

OTU_Table_Fecal_Transposed_3 <- OTU_Table_Fecal_Transposed_3 %>%
  dplyr::rowwise() %>%
  dplyr::mutate(Shannon_Index = -sum(across(1:51) * log(across(1:51) + 1e-10), na.rm = TRUE)) %>%
  dplyr::ungroup()


####Plot alpha div

colour_mapping <- c("Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_E.coli_Treatment" = "#F8766D", 
                   "Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_B.uniformis_Treatment" = "#F8766D", 
                   "Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_B.vulgatus_Treatment" = "#F8766D",
                   "Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection" = "#F8766D",
                   "Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_B.caccae_Treatment" = "#00BFC4", 
                   "Fecal_inoculation_C.difficile_infection" = "#00BFC4")

legend_labels <- c("Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_E.coli_Treatment" = "non-suppressive", 
                   "Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_B.uniformis_Treatment" = "non-suppressive", 
                   "Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_B.vulgatus_Treatment" = "non-suppressive", 
                   "Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection" = "non-suppressive", 
                   "Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_B.caccae_Treatment" = "suppressive", 
                   "Fecal_inoculation_C.difficile_infection" = "suppressive")

boxplot_alpha_div_fecal_exp4 <- ggplot(OTU_Table_Fecal_Transposed_4, 
            aes(x = Conditions_Explained, y = Shannon_Index)) +
  geom_boxplot(aes(color = Conditions_Explained), 
               outlier.shape = NA, position = position_dodge(0.8), lwd=0.5) +
  geom_jitter(aes(color = Conditions_Explained), position = position_jitterdodge(jitter.width = 0.2), size = 2, alpha = 0.6) + 
  scale_color_manual(values = colour_mapping, labels = legend_labels, name = "Legend") +
  scale_fill_manual(values = colour_mapping, labels = legend_labels, name = "Legend") +
  labs(title = "Shannon Alpha Diversity Index 
across Conditions for Fecal background experiment, Day 20",
       x = "Condition",
       y = "Shannon Diversity Index") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 80, hjust = 1),
        legend.position = "right",
        legend.title = element_text(size = 11),
        plot.title = element_text(size = 11),
        legend.text = element_text(size = 11))

boxplot_alpha_div_fecal_exp4

boxplot_alpha_div_fecal_exp4 + stat_compare_means(
  comparisons = list(
    c("Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_E.coli_Treatment", "Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_B.uniformis_Treatment"),
    c("Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_E.coli_Treatment", "Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_B.vulgatus_Treatment"),
    c("Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_E.coli_Treatment", "Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection"),
    c("Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_E.coli_Treatment", "Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_B.caccae_Treatment"),
    c("Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_E.coli_Treatment", "Fecal_inoculation_C.difficile_infection"),
    c("Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_B.uniformis_Treatment", "Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_B.vulgatus_Treatment"),
    c("Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_B.uniformis_Treatment", "Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection"),
    c("Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_B.uniformis_Treatment", "Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_B.caccae_Treatment"),
    c("Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_B.uniformis_Treatment", "Fecal_inoculation_C.difficile_infection"),
    c("Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_B.vulgatus_Treatment", "Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection"),
    c("Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_B.vulgatus_Treatment", "Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_B.caccae_Treatment"),
    c("Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_B.vulgatus_Treatment", "Fecal_inoculation_C.difficile_infection"),
    c("Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection", "Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_B.caccae_Treatment"),
    c("Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection", "Fecal_inoculation_C.difficile_infection"),
    c("Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_B.caccae_Treatment", "Fecal_inoculation_C.difficile_infection")
  ), 
  method = "t.test", label = "p.signif"
)




colour_mapping <- c("Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection" = "#F8766D", 
                   "Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_Mix-13_Treatment" = "#F8766D", 
                   "Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_Mix-3_Treatment" = "#F8766D", 
                   "Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_Mix-4_Treatment" = "#00BFC4", 
                   "Fecal_inoculation_C.difficile_infection" = "#00BFC4")

legend_labels <- c("Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection" = "non-suppressive", 
                   "Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_Mix-13_Treatment" = "non-suppressive", 
                   "Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_Mix-3_Treatment" = "non-suppressive", 
                   "Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_Mix-4_Treatment" = "suppressive", 
                   "Fecal_inoculation_C.difficile_infection" = "suppressive")

boxplot_alpha_div_fecal_exp3 <- ggplot(OTU_Table_Fecal_Transposed_3, 
            aes(x = Conditions_Explained, y = Shannon_Index)) +
  geom_boxplot(aes(color = Conditions_Explained), 
               outlier.shape = NA, position = position_dodge(0.8), lwd=0.5) +
  geom_jitter(aes(color = Conditions_Explained), position = position_jitterdodge(jitter.width = 0.2), size = 2, alpha = 0.6) + 
  scale_color_manual(values = colour_mapping, labels = legend_labels, name = "Legend") +
  scale_fill_manual(values = colour_mapping, labels = legend_labels, name = "Legend") +
  labs(title = "Shannon Alpha Diversity Index 
across Conditions for Fecal background experiment, Day 20",
       x = "Condition",
       y = "Shannon Alpha Diversity Index") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 80, hjust = 1),
        legend.position = "right",
        legend.title = element_text(size = 11),
        plot.title = element_text(size = 11),
        legend.text = element_text(size = 11))

boxplot_alpha_div_fecal_exp3

boxplot_alpha_div_fecal_exp3 + stat_compare_means(
  comparisons = list(
    c("Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection", "Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_Mix-13_Treatment"),
    c("Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection", "Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_Mix-3_Treatment"),
    c("Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection", "Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_Mix-4_Treatment"),
    c("Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection", "Fecal_inoculation_C.difficile_infection"),
    c("Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_Mix-13_Treatment", "Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_Mix-3_Treatment"),
    c("Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_Mix-13_Treatment", "Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_Mix-4_Treatment"),
    c("Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_Mix-13_Treatment", "Fecal_inoculation_C.difficile_infection"),
    c("Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_Mix-3_Treatment", "Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_Mix-4_Treatment"),
    c("Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_Mix-3_Treatment", "Fecal_inoculation_C.difficile_infection"),
    c("Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_Mix-4_Treatment", "Fecal_inoculation_C.difficile_infection")
  ), 
  method = "t.test",
  label = "p.format",  # to show the actual p-values
  label.args = list(
    digits = 2  # number of decimal places
  ),
  hide.ns = FALSE,  # don't hide non-significant results
  symnum.args = list(cutpoints = c(0, 0.1, 1), symbols = c("*", "ns"))
)



##For each df individually, add a column to distinguish suppressiveness

#Experiment 2
OTU_Table_Fecal_Transposed <- OTU_Table_Fecal_Transposed %>%
  dplyr::mutate(Suppressiveness = case_when(
    Conditions_Explained == "Fecal_Inoculation_Antibiotic_treatment_C.difficile" ~ "non-suppressive",
    
    Conditions_Explained %in% c("Fecal_Inoculation_Antibiotic_treatment_C.difficile_infection_Mix-14_treatment",
                                "Fecal_Inoculation_C.difficile _infection") ~ "suppressive",
    
    TRUE ~ NA_character_
  ))

#Experiment 3A
OTU_Table_Fecal_Transposed_3 <- OTU_Table_Fecal_Transposed_3 %>%
  dplyr::mutate(Suppressiveness = case_when(
    Conditions_Explained %in% c("Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection",
                                "Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_Mix-13_Treatment",
                                "Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_Mix-3_Treatment") ~ "non-suppressive",
    
    Conditions_Explained %in% c("Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_Mix-4_Treatment",
                                "Fecal_inoculation_C.difficile_infection") ~ "suppressive",
    
    TRUE ~ NA_character_
  ))

#Experiment 3B
OTU_Table_Fecal_Transposed_4 <- OTU_Table_Fecal_Transposed_4 %>%
  dplyr::mutate(Suppressiveness = case_when(
    Conditions_Explained %in% c("Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_E.coli_Treatment",
                                "Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_B.uniformis_Treatment",
                                "Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_B.vulgatus_Treatment",
                                "Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection") ~ "non-suppressive",
    
    Conditions_Explained %in% c("Fecal_inoculation_Antibiotic _Treatment_C.difficile_infection_B.caccae_Treatment",
                                "Fecal_inoculation_C.difficile_infection") ~ "suppressive",
    
    TRUE ~ NA_character_
  ))


##Add experiment type to each of the dfs
OTU_Table_Fecal_Transposed$Experiment_type <- "Experiment_2"
OTU_Table_Fecal_Transposed_3$Experiment_type <-"Experiment_3A"
OTU_Table_Fecal_Transposed_4$Experiment_type <-"Experiment_3B"

##Bring both experiment 3A and 3B (and possibly 2 at day 20) together in one df
##First, merge

# Find the union of all column names
all_columns <- unique(c(names(OTU_Table_Fecal_Transposed),
                        names(OTU_Table_Fecal_Transposed_3),
                        names(OTU_Table_Fecal_Transposed_4)))


# Function to ensure all columns are present and fill with zeros if missing
ensure_columns <- function(df, all_columns) {
  missing_columns <- setdiff(all_columns, names(df))
  df[missing_columns] <- 0  # Add missing columns with value 0
  
  df <- df %>%
    dplyr::select(all_of(all_columns)) %>%
    dplyr::mutate(across(everything(), ~replace_na(.x, 0)))
  return(df)
}



OTU_Table_Fecal_Transposed$Conditions_Explained <- gsub(" ", "", OTU_Table_Fecal_Transposed$Conditions_Explained)
OTU_Table_Fecal_Transposed_3$Conditions_Explained <- gsub(" ", "", OTU_Table_Fecal_Transposed_3$Conditions_Explained)
OTU_Table_Fecal_Transposed_4$Conditions_Explained <- gsub(" ", "", OTU_Table_Fecal_Transposed_4$Conditions_Explained)

OTU_Table_Fecal_Transposed <- OTU_Table_Fecal_Transposed %>%
  dplyr::mutate(Suppressiveness = ifelse(Conditions_Explained == 'Fecal_Inoculation_C.difficile_infection', 'suppressive', Suppressiveness))


OTU_Table_Fecal_Transposed <- ensure_columns(OTU_Table_Fecal_Transposed, all_columns)
OTU_Table_Fecal_Transposed_3 <- ensure_columns(OTU_Table_Fecal_Transposed_3, all_columns)
OTU_Table_Fecal_Transposed_4 <- ensure_columns(OTU_Table_Fecal_Transposed_4, all_columns)


OTU_Table_Fecal_Transposed_4 <- OTU_Table_Fecal_Transposed_4 %>%
  dplyr::mutate(Days = ifelse(Days == 0, 20, Days))

#Merge the dfs, take endpoint data (day 20, day 23)
merged_dataframe_fecal_experiments <- bind_rows(subset(OTU_Table_Fecal_Transposed, Days %in% c(20, 23)), 
                              OTU_Table_Fecal_Transposed_3, 
                              OTU_Table_Fecal_Transposed_4)

#pull metadata/other variables forward
merged_dataframe_fecal_experiments <- merged_dataframe_fecal_experiments %>%
  dplyr::select(Experiment_type, Suppressiveness, Shannon_Index, Ratio, 
         Conditions_Explained, Days, Treatment, Replicate, Code, everything())


custom_colours <- c("non-suppressive" = "#F8766D", "suppressive" = "#00BFC4")
shapes_vector <- c(0, 17, 8, 19, 21, 12, 23, 24, 25, 10, 11)

merged_dataframe_fecal_experiments <- merged_dataframe_fecal_experiments %>%
  dplyr::mutate(Treatment = ifelse(Treatment == "Fecal_Ab_CD_B.caccae_D20",
                            "Fecal_AB_CD_B.caccae_D20",
                            Treatment))


#subset for columns with rel_ab info
columns_to_filter_fecal_experiments <- c(10:70)

# Subset the df to remove columns with all values < 0.0025 in the specified columns
filtered_df_fecal_experiments <- merged_dataframe_fecal_experiments %>%
  dplyr::select(all_of(columns_to_filter_fecal_experiments)) %>%
  dplyr::select_if(~!all(.x < 0.0025))

# To combine the filtered columns with the rest of the dataframe
merged_dataframe_fecal_experiments_1 <- merged_dataframe_fecal_experiments %>%
  dplyr::select(-all_of(columns_to_filter_fecal_experiments)) %>%
  dplyr::bind_cols(filtered_df_fecal_experiments)

#transpose 
#take out non-rel abundance cols
merged_dataframe_fecal_experiments_1_long <- merged_dataframe_fecal_experiments_1 %>%
  tidyr::pivot_longer(
    cols = c(10:46),  
    names_to = "Genus",  
    values_to = "Relative_Abundance"  
  )

#keep treatment as only non-numerical col
merged_dataframe_fecal_experiments_genera_only <- merged_dataframe_fecal_experiments[, c(7, 10:70)]
merged_dataframe_fecal_experiments_genera_only <- merged_dataframe_fecal_experiments_genera_only %>%
  dplyr::select(Treatment, everything())

##compare day 20 only for the pheatmap:
merged_dataframe_fecal_experiments_genera_only <- subset(merged_dataframe_fecal_experiments_genera_only, !grepl("D23", Treatment))


#aggregate data by 'Treatment'
aggregated_data_fecal_experiments <- merged_dataframe_fecal_experiments_genera_only %>%
  dplyr::group_by(Treatment) %>%
  dplyr::summarise(across(starts_with("Escherichia/Shigella"):ends_with("Mitsuokella"), mean, .names = "mean_{.col}"))

# Remove non-species columns
aggregated_data_fecal_experiments_species_only <- aggregated_data_fecal_experiments %>%
  dplyr::select(starts_with("mean_"))

# Calc. Bray-Curtis dissimilarity matrix
bc_matrix_fecal_experiments <- vegan::vegdist(aggregated_data_fecal_experiments_species_only, method = "bray")

bc_matrix_fecal_experiments_mat <- as.matrix(bc_matrix_fecal_experiments)
rownames(bc_matrix_fecal_experiments_mat) <- colnames(bc_matrix_fecal_experiments_mat) <- aggregated_data_fecal_experiments$Treatment


pheatmap(bc_matrix_fecal_experiments_mat,
         main = "Bray-Curtis Dissimilarity between Treatment Levels",
         fontsize = 12,
         angle_col = 90) 




#Next: do not toss out any genera for the Mix-14 genera only focus
filtered_df_all_fecal_experiments <- merged_dataframe_fecal_experiments %>%
  dplyr::select(all_of(columns_to_filter_fecal_experiments)) %>%
  dplyr::select_if(~!all(.x < 0))

##To combine the filtered columns with the rest of the dataframe
merged_dataframe_all_fecal_experiments_1 <- merged_dataframe_fecal_experiments %>%
  dplyr::select(-all_of(columns_to_filter_fecal_experiments)) %>%
  dplyr::bind_cols(filtered_df_all_fecal_experiments)

#transpose 
merged_dataframe_all_fecal_experiments_1_long <- merged_dataframe_all_fecal_experiments_1 %>%
  tidyr::pivot_longer(
    cols = c(10:70),  
    names_to = "Genus",  
    values_to = "Relative_Abundance"  
  )

#if we choose to add 0.0001 to every value to circumvent 'Inf' values in ratio calculations later:
merged_dataframe_all_fecal_experiments_1_long <- merged_dataframe_all_fecal_experiments_1 %>%
  tidyr::pivot_longer(
    cols = c(10:70),  
    names_to = "Genus",  
    values_to = "Relative_Abundance"  
  ) %>%
  dplyr::mutate(Relative_Abundance = Relative_Abundance + 0.0001)  # Add 0.0001 to each relative abundance value


#if taking out other endpoint / D23 data:
#merged_dataframe_all_fecal_experiments_1_long <- subset(merged_dataframe_all_fecal_experiments_1_long, !grepl("D23", Treatment))
unique(merged_dataframe_all_fecal_experiments_1_long$Treatment)

##Explore ratios that suppressive fecal backgrounds have in common:
#for the complete dataframe with all genera: unique(colnames(merged_dataframe_fecal_experiments[, c(1:56,66:70)]))
#list the genera of interest
#unique_genera_F <- unique(colnames(merged_dataframe_all_fecal_experiments_1[, c(10:49)]))
unique_genera_F <- unique(merged_dataframe_all_fecal_experiments_1_long$Genus)
unique_genera_F
#subset only for mix-14 genera (since we are looking for ecological signatures of suppression shared in common between the defined mix-14 and the undefined fecal communities):
merged_dataframe_all_fecal_experiments_1_long_1<-subset(merged_dataframe_all_fecal_experiments_1_long, Genus == "Escherichia/Shigella" | Genus == "Roseburia" | Genus == "Bacteroides" | Genus == "Parabacteroides" | Genus == "Collinsella" | Genus == "Fusicatenibacter" | Genus == "Blautia" | Genus == "Bifidobacterium")
unique_genera_F <- unique(merged_dataframe_all_fecal_experiments_1_long_1$Genus)
unique_genera_F


#distill the different permutations (i.e., A:B and B:A, as well as (A+B):C, (A+C):B, (B+C):A)

pair_combinations_F <- permutations(length(unique_genera_F), 2, unique_genera_F)
pair_combinations_F <- lapply(1:nrow(pair_combinations_F), function(i) as.character(pair_combinations_F[i, ]))
triple_combinations_F <- permutations(length(unique_genera_F), 3, unique_genera_F)
triple_combinations_F <- lapply(1:nrow(triple_combinations_F), function(i) as.character(triple_combinations_F[i, ]))

filter_duplicate_triplets <- function(triplet_combinations_F) {
  # Function to ensure the first two elements of each triplet are in order
  is_ordered <- function(triplet) {
    return(triplet[1] < triplet[2])
  }
  
  # Apply the function to each triplet and keep only the ordered ones
  ordered_triplets <- lapply(triplet_combinations_F, function(triplet) {
    if (is_ordered(triplet)) {
      return(triplet)
    } else {
      return(NULL)
    }
  })
  
  # Remove NULL elements from the list
  ordered_triplets <- ordered_triplets[!sapply(ordered_triplets, is.null)]
  
  return(ordered_triplets)
}

# Apply this function to triplet combinations to take out unnecessary duplicates
# e.g., the ratio for (A + B):C does not need also to be calculated as (B + A):C
#triple_combinations_F <- filter_duplicate_triplets(triple_combinations_F)
triple_combinations_F <- filter_duplicate_triplets(triple_combinations_F)


#Next step: function to calculate ratios
calculate_ratios <- function(df, genera){
  if(length(genera) == 2){
    genus1 <- filter(df, Genus == genera[1]) %>% dplyr::summarize(Total = sum(Relative_Abundance)) %>% .$Total
    genus2 <- filter(df, Genus == genera[2]) %>% dplyr::summarize(Total = sum(Relative_Abundance)) %>% .$Total
    return(genus1 / genus2)
  } else {
    genus1 <- filter(df, Genus == genera[1]) %>% dplyr::summarize(Total = sum(Relative_Abundance)) %>% .$Total
    genus2 <- filter(df, Genus == genera[2]) %>% dplyr::summarize(Total = sum(Relative_Abundance)) %>% .$Total
    genus3 <- filter(df, Genus == genera[3]) %>% dplyr::summarize(Total = sum(Relative_Abundance)) %>% .$Total
    return((genus1 + genus2) / genus3)
  }
}



# Create a df to store ratios
ratios_df_F <- data.frame()

#ensure formatting of the genus "Escherichia/Shigella" is consistent with the triple_combinations_F & pair_combinations_F defined above:
merged_dataframe_all_fecal_experiments_1_long_1 <- merged_dataframe_all_fecal_experiments_1_long_1 %>%
  dplyr::mutate(Genus = ifelse(Genus == "Escherichia", "Escherichia/Shigella", Genus))

# Start time tracking
start_time <- Sys.time()

#identify unique conditions
unique_conditions <- unique(merged_dataframe_all_fecal_experiments_1_long_1$Treatment)
unique_replicates <- unique(merged_dataframe_all_fecal_experiments_1_long_1$Replicate)
unique_conditions
unique_replicates

#Calc. the total number of iterations for the progress bar
total_iterations_F <- length(unique_conditions) * length(unique_replicates) * length(c(pair_combinations_F, triple_combinations_F))

results_list <- list()

##Start time tracking
start_time <- Sys.time()

# Create a progress bar
pb <- progress_bar$new(format = "[:bar] :percent :elapsedfull", total = total_iterations_F, clear = FALSE)

##Loop through each condition and replicate
for (condition in unique_conditions) {
  for (replicate in unique_replicates) {
    # Filter the dataframe once per condition and replicate
    filtered_df <- merged_dataframe_all_fecal_experiments_1_long_1 %>%
      filter(Treatment == condition, Replicate == replicate)
    
    # Skip iteration if the filtered df is empty
    if (nrow(filtered_df) == 0) {
      next
    }
    
    # Get unique values of Shannon_Index and Suppressiveness, or NA if none exist
    shannon_index <- if (length(unique(filtered_df$Shannon_Index)) > 0) unique(filtered_df$Shannon_Index)[1] else NA
    suppressiveness <- if (length(unique(filtered_df$Suppressiveness)) > 0) unique(filtered_df$Suppressiveness)[1] else NA
    
    #Calc. ratios for each combination
    for (combo in c(pair_combinations_F, triple_combinations_F)) {
      # Calculate the ratio or return NA if not applicable
      ratio <- if (nrow(filtered_df) > 0) calculate_ratios(df = filtered_df, genera = combo) else NA
      
      # Determine the display format for the genus combination
      genus_combination <- if (length(combo) == 2) {
        paste(combo, collapse = ' to ')
      } else if (length(combo) == 3) {
        paste(combo[1], '+', combo[2], 'to', combo[3])
      }
      
      # Append the result to the results list
      results_list[[length(results_list) + 1]] <- data.frame(
        Treatment = condition,
        Replicate = replicate,
        Genus_Combination = genus_combination,
        Ratio = ratio,
        Shannon_Index = shannon_index,
        Suppressiveness = suppressiveness
      )
      
      # Update the progress bar
      if (exists("pb")) {
        pb$tick()
      }
    }
  }
}



##Combine all results into a df
ratios_df_F <- bind_rows(results_list)
View(ratios_df_F)

#log10 transform Ratio values (to ensure symmetry of A:B and B:A if one of either is near 0):
ratios_df_F <- ratios_df_F %>%
  dplyr::mutate(Ratio = log10(Ratio))




#If calculating paired or triple ratios only/separately:

#ensure naming/formatting of Escherichia is consistent with input df; merged_dataframe_all_fecal_experiments_1_long_1
#unique(merged_dataframe_all_fecal_experiments_1_long_1$Genus)
#if not consistent; uncomment below code
# pair_combinations_F <- lapply(pair_combinations_F, function(pair) {
#   pair <- gsub("Escherichia", "Escherichia/Shigella", pair)
#   return(pair)
# })
# 
# triple_combinations_F <- lapply(triple_combinations_F, function(pair) {
#   pair <- gsub("Escherichia", "Escherichia/Shigella", pair)
#   return(pair)
# })

#Calc. the total number of iterations for the progress bar
total_iterations_F_triplet <- length(unique(merged_dataframe_all_fecal_experiments_1_long_1$Treatment)) * 
  length(unique(merged_dataframe_all_fecal_experiments_1_long_1$Replicate)) * 
  length(triple_combinations_F)

total_iterations_F_pairs <- length(unique(merged_dataframe_all_fecal_experiments_1_long_1$Treatment)) * 
  length(unique(merged_dataframe_all_fecal_experiments_1_long_1$Replicate)) * 
  length(pair_combinations_F)

# Create a progress bar for ratio calculations later
pb <- progress_bar$new(
  format = "[:bar] :percent :elapsedfull",
  total = total_iterations_F,
  clear = FALSE
)


results_list_triplet <- list()

#triple_combinations_F 
for(condition in unique_conditions) {
  for(replicate in unique_replicates) {
    # Filter the dataframe once per condition and replicate
    filtered_df <- merged_dataframe_all_fecal_experiments_1_long_1 %>% 
      filter(Treatment == condition, Replicate == replicate)
    
    #shannon_index <- unique(filtered_df$Shannon_Index)
    #suppressiveness <- unique(filtered_df$Suppressiveness)
    
    for(combo in triple_combinations_F) {  # Only iterate over triplet combinations
      ## Calculate the ratio
      ratio <- calculate_ratios(df = filtered_df, genera = combo)
      
      ## Format the genus combination as a string
      if (length(combo) == 2) {
        genus_combination <- paste(combo, collapse = ' to ')
      } else if (length(combo) == 3) {
        genus_combination <- paste(combo[1], '+', combo[2], 'to', combo[3])
      }
      
      ## Append the result to the list
      results_list_triplet[[length(results_list_triplet) + 1]] <- data.frame(
        Treatment = condition,
        Replicate = replicate,
        Genus_Combination = genus_combination,
        Ratio = ratio
        #Shannon_Index = shannon_index,
        #Suppressiveness = suppressiveness
      )
      pb$tick() # to keep track of progress 
    }
  }
}

ratios_df_F_triplets <- dplyr::bind_rows(results_list_triplet)




#Next; paired ratios:
results_list_pairs <- list()

#pair_combinations_F
for(condition in unique_conditions) {
  for(replicate in unique_replicates) {
    # Filter the dataframe once per condition and replicate
    filtered_df <- merged_dataframe_all_fecal_experiments_1_long_1 %>% 
      filter(Treatment == condition, Replicate == replicate)
    
    #shannon_index <- unique(filtered_df$Shannon_Index)
    #suppressiveness <- unique(filtered_df$Suppressiveness)
    
    for(combo in pair_combinations_F) {  # Only iterate over pair combinations
      ## Calculate the ratio
      ratio <- calculate_ratios(df = filtered_df, genera = combo)
      
      ## Format the genus combination as a string
      if (length(combo) == 2) {
        genus_combination <- paste(combo, collapse = ' to ')
      } else if (length(combo) == 3) {
        genus_combination <- paste(combo[1], '+', combo[2], 'to', combo[3])
      }
      
      ## Append the result to the list
      results_list_pairs[[length(results_list_pairs) + 1]] <- data.frame(
        Treatment = condition,
        Replicate = replicate,
        Genus_Combination = genus_combination,
        Ratio = ratio
        #Shannon_Index = shannon_index,
        #Suppressiveness = suppressiveness
      )
      #pb$tick() # to keep track of progress 
    }
  }
}




ratios_df_F_triplets <- dplyr::bind_rows(results_list_triplet)
ratios_df_F_pairs <- dplyr::bind_rows(results_list_pairs)


#log-transform Ratio
ratios_df_F_triplets <- ratios_df_F_triplets %>%
  dplyr::mutate(Ratio = log10(Ratio))

ratios_df_F_pairs <- ratios_df_F_pairs %>%
  dplyr::mutate(Ratio = log10(Ratio))



#or; take from the bigger df (ratios calculated at once for both paired as well as triplet ratios):
head(ratios_df_F)

ratios_df_F_pairs <- ratios_df_F %>%
  dplyr::filter(!grepl("\\+", Genus_Combination)) 

ratios_df_F_triplets <- ratios_df_F %>%
  dplyr::filter(grepl("\\+", Genus_Combination))



ratios_df_F_pairs <- ratios_df_F_pairs
ratios_df_F_triples <- ratios_df_F_triplets 

#the steps below are only relevant if ratios were calculated over relative abundance data w/o +0.0001:
# ratios_df_F_pairs_1 <- ratios_df_F_pairs[!is.infinite(ratios_df_F_pairs$Ratio), ]
# ratios_df_F_pairs_1 <- ratios_df_F_pairs_1[!is.na(ratios_df_F_pairs_1$Ratio), ]
# 
# 
# ratios_df_F_triples_1 <- ratios_df_F_triples[!is.infinite(ratios_df_F_triples$Ratio), ]
# ratios_df_F_triples_1 <- ratios_df_F_triples_1[!is.na(ratios_df_F_triples_1$Ratio), ]



#scatter of ratios of interest
merged_dataframe_all_fecal_experiments_1_long_1 <- merged_dataframe_all_fecal_experiments_1_long_1 %>%
  dplyr::mutate(Genus = ifelse(Genus == 'Escherichia/Shigella', 'Escherichia', Genus))

#adjust as suitable
merged_dataframe_1_long_2 <- merged_dataframe_all_fecal_experiments_1_long_1 %>%
  dplyr::group_by(Replicate, Treatment) %>%
  dplyr::summarize(
    Bacteroides_Abundance = (Relative_Abundance[Genus == 'Bacteroides']),
    Escherichia_Abundance = (Relative_Abundance[Genus == 'Escherichia']),
    Parabacteroides_Abundance = (Relative_Abundance[Genus == 'Parabacteroides']),
    Blautia_Abundance = (Relative_Abundance[Genus == 'Blautia']),
    Roseburia_Abundance = (Relative_Abundance[Genus == 'Roseburia']),
    Bifidobacterium_Abundance = (Relative_Abundance[Genus == 'Bifidobacterium']),
    Fusicatenibacter_Abundance = (Relative_Abundance[Genus == 'Fusicatenibacter']),
    Collinsella_Abundance = (Relative_Abundance[Genus == 'Collinsella']),
    Shannon_Index = mean(Shannon_Index),
    .groups = 'drop' # This removes the grouping structure after summarizing
  ) %>%
  dplyr::mutate(
    Ratio = Bacteroides_Abundance / Escherichia_Abundance,
    Ratio_B_to_F = Bacteroides_Abundance / Fusicatenibacter_Abundance, 
    #triples next:
    Ratio_F_and_P_to_B = (Fusicatenibacter_Abundance + Parabacteroides_Abundance) / Bacteroides_Abundance,
    Ratio_E_and_R_to_B = (Escherichia_Abundance + Roseburia_Abundance) / Bacteroides_Abundance,
    Ratio_E_and_F_to_B = (Escherichia_Abundance + Fusicatenibacter_Abundance) / Bacteroides_Abundance,
    Ratio_C_and_P_to_B = (Collinsella_Abundance + Parabacteroides_Abundance) / Bacteroides_Abundance,
    Ratio_C_and_F_to_B = (Collinsella_Abundance + Fusicatenibacter_Abundance) / Bacteroides_Abundance,
    Ratio_C_and_E_to_B = (Collinsella_Abundance + Escherichia_Abundance) / Bacteroides_Abundance,
    Ratio_Bl_and_F_to_B = (Blautia_Abundance + Fusicatenibacter_Abundance) / Bacteroides_Abundance,
    Ratio_Bl_and_E_to_B = (Blautia_Abundance + Escherichia_Abundance) / Bacteroides_Abundance,
    Ratio_Bif_and_F_to_B = (Bifidobacterium_Abundance + Fusicatenibacter_Abundance) / Bacteroides_Abundance,
    Ratio_Bif_and_E_to_B = (Bifidobacterium_Abundance + Escherichia_Abundance) / Bacteroides_Abundance,
    Ratio_Bif_and_C_to_B = (Bifidobacterium_Abundance + Collinsella_Abundance) / Bacteroides_Abundance,
    Ratio_Bif_and_F_to_Bl = (Bifidobacterium_Abundance + Fusicatenibacter_Abundance) / Blautia_Abundance,
    Ratio_Bif_and_F_to_C = (Bifidobacterium_Abundance + Fusicatenibacter_Abundance) / Collinsella_Abundance,
    Ratio_Bif_and_F_to_P = (Bifidobacterium_Abundance + Fusicatenibacter_Abundance) / Parabacteroides_Abundance,
    Ratio_B_and_R_to_E = (Bacteroides_Abundance + Roseburia_Abundance) / Escherichia_Abundance,
    Ratio_B_and_P_to_E = (Bacteroides_Abundance + Parabacteroides_Abundance) / Escherichia_Abundance,
    Ratio_B_and_R_to_F = (Bacteroides_Abundance + Roseburia_Abundance) / Fusicatenibacter_Abundance,
    Ratio_B_and_P_to_F = (Bacteroides_Abundance + Parabacteroides_Abundance) / Fusicatenibacter_Abundance,
    Ratio_B_and_C_to_E = (Bacteroides_Abundance + Collinsella_Abundance) / Escherichia_Abundance,
    Ratio_B_and_Bl_to_E = (Bacteroides_Abundance + Blautia_Abundance) / Escherichia_Abundance,
    Ratio_B_and_C_to_F = (Bacteroides_Abundance + Collinsella_Abundance) / Fusicatenibacter_Abundance,
    Ratio_B_and_Bl_to_F = (Bacteroides_Abundance + Blautia_Abundance) / Fusicatenibacter_Abundance
  )

  
#remove superfluous lines due to Fecal control having been a reference in all experiment types, but is in fact the same sample:
fecal_cd_d20 <- merged_dataframe_1_long_2 %>%
  dplyr::filter(Treatment == 'Fecal_CD_D20') %>%
  dplyr::distinct(Replicate, .keep_all = TRUE)

fecal_ab_cd_d20 <- merged_dataframe_1_long_2 %>%
  dplyr::filter(Treatment == 'Fecal_AB_CD_D20') %>%
  dplyr::distinct(Replicate, .keep_all = TRUE)

merged_dataframe_1_long_2 <- merged_dataframe_1_long_2 %>%
  filter(Treatment != 'Fecal_CD_D20' & Treatment != 'Fecal_AB_CD_D20')

merged_dataframe_1_long_2 <- bind_rows(merged_dataframe_1_long_2, fecal_cd_d20)
merged_dataframe_1_long_2 <- bind_rows(merged_dataframe_1_long_2, fecal_ab_cd_d20)

# Check the final structure
str(merged_dataframe_1_long_2)

#for plotting: take only consistent Day as final point: D20, so exclude D23 data for scatters:
merged_dataframe_1_long_2 <- subset(merged_dataframe_1_long_2, !grepl("D23", Treatment))
unique(merged_dataframe_1_long_2$Treatment)

#reassign suppressiveness:
merged_dataframe_1_long_2 <- merged_dataframe_1_long_2 %>%
  # Add the new Suppressiveness column based on the conditions
  dplyr::mutate(Suppressiveness = case_when(
    Treatment %in% c('Fecal_AB_CD_B.caccae_D20', 'Fecal_CD_D20', 'Fecal_AB_CD_Mix_14_D20', 'Fecal_AB_CD_Mix_4_D20') ~ 'suppressive',
    #Below: if including D23 endpoint data
    #Treatment %in% c('Fecal_AB_CD_B.caccae_D20', 'Fecal_CD_D20', 'Fecal_CD_D23', 'Fecal_AB_CD_Mix_14_D20', 'Fecal_AB_CD_Mix_14_D23', 'Fecal_AB_CD_Mix_4_D20') ~ 'suppressive',
    TRUE ~ 'non-suppressive'
  ))

#Check the changes
str(merged_dataframe_1_long_2)


boxplot_alpha_div_all_fecal_experiments <- ggplot(merged_dataframe_1_long_2, aes(x = Suppressiveness, y = Shannon_Index)) +
  geom_boxplot(aes(color = Suppressiveness), 
               outlier.shape = NA, position = position_dodge(0.8), lwd=0.5) +
  geom_jitter(aes(color = Suppressiveness, shape = Treatment), # Added shape aesthetic here
              position = position_jitterdodge(jitter.width = 0.2), size = 2, alpha = 0.6, stroke = 0.8) + 
  scale_color_manual(values = custom_colors) + 
  scale_shape_manual(values = shapes_vector) +
  #title = "Shannon Alpha Diversity Index across Conditions for All Fecal background experiments, Day 20""
  labs(title = "",
       x = "Condition",
       y = "Shannon Alpha Diversity Index") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 11), # X-axis labels
        axis.text.y = element_text(size = 11), # Y-axis labels
        legend.position = "right",
        legend.title = element_text(size = 11),
        plot.title = element_text(size = 11),
        legend.text = element_text(size = 11),
        panel.grid.major = element_blank(),  # Removes major grid lines
        panel.grid.minor = element_blank(),  # Removes minor grid lines
        panel.border = element_rect(colour = "black", fill=NA),  # Adds border around the panel
        axis.line = element_line(color = "black"))  # Adds line to axes

boxplot_alpha_div_all_fecal_experiments

boxplot_alpha_div_all_fecal_experiments + stat_compare_means(
  comparisons = list(
    c("non-suppressive", "suppressive")
  ),
  method = "wilcox.test", 
  label = "p"
)




cor.test(log10(merged_dataframe_1_long_2$Ratio), merged_dataframe_1_long_2$Shannon_Index, method = "spearman")

## With R^2 info:
# Fit a linear model
model <- lm(Shannon_Index ~ log10(Ratio), data = merged_dataframe_1_long_2)

#Extract corresponding R^2 and p-value
r2 <- summary(model)$r.squared
p_val <- summary(model)$coefficients[2, 4]  
r2
p_val

# Determine significance stars
if(p_val < 0.001) {
  stars <- "***"
} else if(p_val < 0.01) {
  stars <- "**"
} else if(p_val < 0.05) {
  stars <- "*"
} else {
  stars <- ""
}

shapes_vector <- c(0, 13,  8, 14, 21, 12, 23, 24, 25, 10, 11)

#Define the colours for suppressiveness levels
suppressiveness_colours <- c('non-suppressive' = '#F8766D', 'suppressive' = '#00BFC4')

# Plot, as shown in Figure 2:
ggplot(merged_dataframe_1_long_2, aes(x = (Ratio), y = Shannon_Index, color = Suppressiveness)) +
  geom_smooth(method = "lm", se = TRUE, color = "grey44", linetype = "dashed", aes(group = 1)) +
  geom_point(aes(shape = Treatment), size = 3, alpha = 0.8, stroke = 0.9) +
  scale_shape_manual(values = shapes_vector) +
  scale_x_log10(breaks = scales::trans_breaks("log10", function(x) 10^x),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  labs(x = "Log10(Ratio Bacteroides to Escherichia/Shigella)",
       y = "Shannon Alpha Diversity Index",
       color = "Suppressiveness",
       shape = "Treatment") +   # Add legend title for shape
  theme_minimal() +
  theme(legend.position = "right",
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(),
        panel.background = element_blank(), 
        axis.line = element_line(color = "black")) +
  annotate("text", x = Inf, y = Inf, 
           label = bquote(italic(R)^2 ~ "=" ~ .(sprintf("%.2f", r2)) ~ .(stars)), 
           hjust = 2.7, vjust = 2, size = 4, color = "black")


#Below is the strongest correlation/regression of any significant ratio versus alpha diversity:
r2 <- summary(model_Bif_and_E_to_B)$r.squared
p_val <- summary(model1g)$coefficients[2, 4]  
r2
p_val
ggplot(merged_dataframe_1_long_2, aes(x = (Ratio_Bif_and_E_to_B), y = Shannon_Index, color = Suppressiveness)) +
  geom_smooth(method = "lm", se = TRUE, color = "grey44", linetype = "dashed", aes(group = 1)) +
  geom_point(aes(shape = Treatment), size = 3, alpha = 0.8, stroke = 0.9) +
  scale_shape_manual(values = shapes_vector) +
  scale_x_log10(breaks = scales::trans_breaks("log10", function(x) 10^x),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  labs(x = "Log10(Ratio Bifidobacterium + Escherichia/Shigella to Bacteroides)",
       y = "Shannon Alpha Diversity Index",
       color = "Suppressiveness",
       shape = "Treatment") +   # Add legend title for shape
  theme_minimal() +
  theme(legend.position = "right",
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(),
        panel.background = element_blank(), 
        axis.line = element_line(color = "black")) +
  annotate("text", x = Inf, y = Inf, 
           label = bquote(italic(R)^2 ~ "=" ~ .(sprintf("%.2f", r2)) ~ .(stars)), 
           hjust = 1.3, vjust = 2, size = 4, color = "black")


#Below info can be found in the supplementary materials of the paper:
#Here, we correlate all the significant ratios (i.e., internal compositional configurations shared between suppressive mix-14 and fecal communities as shown in Figure 2) with alpha diversity;
#the standard metric used to predict suppressiveness of community samples
cor_test_B_to_E <- cor.test(merged_dataframe_1_long_2$Shannon_Index, log10(merged_dataframe_1_long_2$Ratio), method = "spearman")  #as reported in the manuscript, Figure 2
cor_test_B_to_F <- cor.test(merged_dataframe_1_long_2$Shannon_Index, log10(merged_dataframe_1_long_2$Ratio_B_to_F), method = "spearman")
cor_test_F_and_P_to_B <- cor.test(merged_dataframe_1_long_2$Shannon_Index, log10(merged_dataframe_1_long_2$Ratio_F_and_P_to_B), method = "spearman")
cor_test_E_and_R_to_B <- cor.test(merged_dataframe_1_long_2$Shannon_Index, log10(merged_dataframe_1_long_2$Ratio_E_and_R_to_B), method = "spearman")
cor_test_E_and_F_to_B <- cor.test(merged_dataframe_1_long_2$Shannon_Index, log10(merged_dataframe_1_long_2$Ratio_E_and_F_to_B), method = "spearman")
cor_test_C_and_P_to_B <- cor.test(merged_dataframe_1_long_2$Shannon_Index, log10(merged_dataframe_1_long_2$Ratio_C_and_P_to_B), method = "spearman")
cor_test_C_and_F_to_B <- cor.test(merged_dataframe_1_long_2$Shannon_Index, log10(merged_dataframe_1_long_2$Ratio_C_and_F_to_B), method = "spearman")
cor_test_C_and_E_to_B <- cor.test(merged_dataframe_1_long_2$Shannon_Index, log10(merged_dataframe_1_long_2$Ratio_C_and_E_to_B), method = "spearman")
cor_test_Bl_and_F_to_B <- cor.test(merged_dataframe_1_long_2$Shannon_Index, log10(merged_dataframe_1_long_2$Ratio_Bl_and_F_to_B), method = "spearman")
cor_test_Bl_and_E_to_B <- cor.test(merged_dataframe_1_long_2$Shannon_Index, log10(merged_dataframe_1_long_2$Ratio_Bl_and_E_to_B), method = "spearman")
cor_test_Bif_and_F_to_B <- cor.test(merged_dataframe_1_long_2$Shannon_Index, log10(merged_dataframe_1_long_2$Ratio_Bif_and_F_to_B), method = "spearman")
cor_test_Bif_and_E_to_B <- cor.test(merged_dataframe_1_long_2$Shannon_Index, log10(merged_dataframe_1_long_2$Ratio_Bif_and_E_to_B), method = "spearman")
cor_test_Bif_and_C_to_B <- cor.test(merged_dataframe_1_long_2$Shannon_Index, log10(merged_dataframe_1_long_2$Ratio_Bif_and_C_to_B), method = "spearman")
cor_test_Bif_and_F_to_Bl <- cor.test(merged_dataframe_1_long_2$Shannon_Index, log10(merged_dataframe_1_long_2$Ratio_Bif_and_F_to_Bl), method = "spearman")
cor_test_Bif_and_F_to_C <- cor.test(merged_dataframe_1_long_2$Shannon_Index, log10(merged_dataframe_1_long_2$Ratio_Bif_and_F_to_C), method = "spearman")
cor_test_Bif_and_F_to_P <- cor.test(merged_dataframe_1_long_2$Shannon_Index, log10(merged_dataframe_1_long_2$Ratio_Bif_and_F_to_P), method = "spearman")
cor_test_B_and_R_to_E <- cor.test(merged_dataframe_1_long_2$Shannon_Index, log10(merged_dataframe_1_long_2$Ratio_B_and_R_to_E), method = "spearman")
cor_test_B_and_P_to_E <- cor.test(merged_dataframe_1_long_2$Shannon_Index, log10(merged_dataframe_1_long_2$Ratio_B_and_P_to_E), method = "spearman")
cor_test_B_and_R_to_F <- cor.test(merged_dataframe_1_long_2$Shannon_Index, log10(merged_dataframe_1_long_2$Ratio_B_and_R_to_F), method = "spearman")
cor_test_B_and_P_to_F <- cor.test(merged_dataframe_1_long_2$Shannon_Index, log10(merged_dataframe_1_long_2$Ratio_B_and_P_to_F), method = "spearman")
cor_test_B_and_C_to_E <- cor.test(merged_dataframe_1_long_2$Shannon_Index, log10(merged_dataframe_1_long_2$Ratio_B_and_C_to_E), method = "spearman")
cor_test_B_and_Bl_to_E <- cor.test(merged_dataframe_1_long_2$Shannon_Index, log10(merged_dataframe_1_long_2$Ratio_B_and_Bl_to_E), method = "spearman")
cor_test_B_and_C_to_F <- cor.test(merged_dataframe_1_long_2$Shannon_Index, log10(merged_dataframe_1_long_2$Ratio_B_and_C_to_F), method = "spearman")
cor_test_B_and_Bl_to_F <- cor.test(merged_dataframe_1_long_2$Shannon_Index, log10(merged_dataframe_1_long_2$Ratio_B_and_Bl_to_F), method = "spearman")

cor_test_B_to_E
cor_test_B_to_F
cor_test_F_and_P_to_B
cor_test_E_and_R_to_B
cor_test_E_and_F_to_B
cor_test_C_and_P_to_B
cor_test_C_and_F_to_B
cor_test_C_and_E_to_B
cor_test_Bl_and_F_to_B
cor_test_Bl_and_E_to_B
cor_test_Bif_and_F_to_B
cor_test_Bif_and_E_to_B
cor_test_Bif_and_C_to_B
cor_test_Bif_and_F_to_Bl
cor_test_Bif_and_F_to_C
cor_test_Bif_and_F_to_P
cor_test_B_and_R_to_E
cor_test_B_and_P_to_E
cor_test_B_and_R_to_F
cor_test_B_and_P_to_F
cor_test_B_and_C_to_E
cor_test_B_and_Bl_to_E
cor_test_B_and_C_to_F
cor_test_B_and_Bl_to_F


model_B_to_E <- lm(Shannon_Index ~ log10(Ratio), data = merged_dataframe_1_long_2) #as reported in the manuscript, Figure 2. 
model_B_to_F <- lm(Shannon_Index ~ log10(Ratio_B_to_F), data = merged_dataframe_1_long_2)
model_F_and_P_to_B <- lm(Shannon_Index ~ log10(Ratio_F_and_P_to_B), data = merged_dataframe_1_long_2)
model_E_and_R_to_B <- lm(Shannon_Index ~ log10(Ratio_E_and_R_to_B), data = merged_dataframe_1_long_2)
model_E_and_F_to_B <- lm(Shannon_Index ~ log10(Ratio_E_and_F_to_B), data = merged_dataframe_1_long_2)
model_C_and_P_to_B <- lm(Shannon_Index ~ log10(Ratio_C_and_P_to_B), data = merged_dataframe_1_long_2)
model_C_and_F_to_B <- lm(Shannon_Index ~ log10(Ratio_C_and_F_to_B), data = merged_dataframe_1_long_2)
model_C_and_E_to_B <- lm(Shannon_Index ~ log10(Ratio_C_and_E_to_B), data = merged_dataframe_1_long_2)
model_Bl_and_F_to_B <- lm(Shannon_Index ~ log10(Ratio_Bl_and_F_to_B), data = merged_dataframe_1_long_2)
model_Bl_and_E_to_B <- lm(Shannon_Index ~ log10(Ratio_Bl_and_E_to_B), data = merged_dataframe_1_long_2)
model_Bif_and_F_to_B <- lm(Shannon_Index ~ log10(Ratio_Bif_and_F_to_B), data = merged_dataframe_1_long_2)
model_Bif_and_E_to_B <- lm(Shannon_Index ~ log10(Ratio_Bif_and_E_to_B), data = merged_dataframe_1_long_2)
model_Bif_and_C_to_B <- lm(Shannon_Index ~ log10(Ratio_Bif_and_C_to_B), data = merged_dataframe_1_long_2)
model_Bif_and_F_to_Bl <- lm(Shannon_Index ~ log10(Ratio_Bif_and_F_to_Bl), data = merged_dataframe_1_long_2)
model_Bif_and_F_to_C <- lm(Shannon_Index ~ log10(Ratio_Bif_and_F_to_C), data = merged_dataframe_1_long_2)
model_Bif_and_F_to_P <- lm(Shannon_Index ~ log10(Ratio_Bif_and_F_to_P), data = merged_dataframe_1_long_2)
model_B_and_R_to_E <- lm(Shannon_Index ~ log10(Ratio_B_and_R_to_E), data = merged_dataframe_1_long_2)
model_B_and_P_to_E <- lm(Shannon_Index ~ log10(Ratio_B_and_P_to_E), data = merged_dataframe_1_long_2)
model_B_and_R_to_F <- lm(Shannon_Index ~ log10(Ratio_B_and_R_to_F), data = merged_dataframe_1_long_2)
model_B_and_P_to_F <- lm(Shannon_Index ~ log10(Ratio_B_and_P_to_F), data = merged_dataframe_1_long_2)
model_B_and_C_to_E <- lm(Shannon_Index ~ log10(Ratio_B_and_C_to_E), data = merged_dataframe_1_long_2)
model_B_and_Bl_to_E <- lm(Shannon_Index ~ log10(Ratio_B_and_Bl_to_E), data = merged_dataframe_1_long_2)
model_B_and_C_to_F <- lm(Shannon_Index ~ log10(Ratio_B_and_C_to_F), data = merged_dataframe_1_long_2)
model_B_and_Bl_to_F <- lm(Shannon_Index ~ log10(Ratio_B_and_Bl_to_F), data = merged_dataframe_1_long_2)

summary(model_B_to_E)
summary(model_B_to_F)
summary(model_F_and_P_to_B)
summary(model_E_and_R_to_B)
summary(model_E_and_F_to_B)
summary(model_C_and_P_to_B)
summary(model_C_and_F_to_B)
summary(model_C_and_E_to_B)
summary(model_Bl_and_F_to_B)
summary(model_Bl_and_E_to_B)
summary(model_Bif_and_F_to_B)
summary(model_Bif_and_E_to_B)
summary(model_Bif_and_C_to_B)
summary(model_Bif_and_F_to_Bl)
summary(model_Bif_and_F_to_C)
summary(model_Bif_and_F_to_P)
summary(model_B_and_R_to_E)
summary(model_B_and_P_to_E)
summary(model_B_and_R_to_F)
summary(model_B_and_P_to_F)
summary(model_B_and_C_to_E)
summary(model_B_and_Bl_to_E)
summary(model_B_and_C_to_F)
summary(model_B_and_Bl_to_F)





ratios_df_F_1 <- ratios_df_F

#Create a binary outcome variable (Suppressive versus non-suppressive) for all endpoint relative abundance data
#suppressiveness was established as C. difficile load (CFU/ml): see manuscript for further details
ratios_df_F_1$Suppressiveness <- ifelse(ratios_df_F_1$Treatment %in% c('Fecal_AB_CD_Mix_4_D20', 'Fecal_AB_CD_B.caccae_D20', 'Fecal_AB_CD_Mix_14_D20', 'Fecal_AB_CD_Mix_14_D23', 'Fecal_CD_D20', 'Fecal_CD_D23'),
                                         'Suppressive',
                                         'Non-suppressive')

#Next, reshape the df so each genus combination becomes a column
ratios_wide_F <- ratios_df_F_1 %>%
  tidyr::spread(key = Genus_Combination, value = Ratio) %>%
  replace(is.na(.), 0) #log10(1) == 0, so we shouldn't have any NAs

ggplot(ratios_wide_F, aes(x=Suppressiveness, y=(`Bacteroides to Escherichia/Shigella`))) +
  geom_boxplot(outlier.shape = NA) + 
  geom_jitter(width = 0.2, color = "blue", alpha = 0.5) +  
  labs(title = "Ratio across Suppressiveness",
       x = "Suppressiveness",
       y = "Ratio") +
  theme_minimal()  


##Next; visualise symmetry of ratios (log10-transformed and hence should be symmetric for pairs)
ratios_wide_F 

variables <- names(ratios_wide_F)[5:ncol(ratios_wide_F)]

#variables_pairs <- variables[!grepl("\\+", variables)]
#variables_triplets <- variables[grepl("\\+", variables)] 

ratios_wide_F_pairs <- ratios_wide_F[, c(1:4, which(!grepl(" \\+ ", names(ratios_wide_F)[5:ncol(ratios_wide_F)])) + 4)]

data_long_pairs_distribution <- ratios_wide_F_pairs %>%
  pivot_longer(
    cols = 5:ncol(ratios_wide_F_pairs),  # Adjust this if the column indices change, but excl. the metadata vars of Treatment, Replicate, Shannon_Index, Suppressiveness 
    names_to = "Variable",
    values_to = "Value"
  )

#density plot to double check symmetry of ratios
ggplot(data_long_pairs_distribution, aes(x = Value)) +
  geom_density(fill = "blue", alpha = 0.5) +
  labs(x = "Value", title = "Density plot Fecal pair ratios (log10)") +
  theme_minimal()



##Next, we are interested in statistically determining which ratios are distinct for suppressive versus non-suppressive 
#Initialise a df to store the results, using median_diff as a measure of effect size

results_F <- data.frame(variable = character(), p_value = numeric(), median_diff = numeric(), stringsAsFactors = FALSE)

#Perform a Mann-Whitney U test for each variable and calc median difference
for (variable in variables) {
  # Extract the current variable data
  current_data <- select(ratios_wide_F, Suppressiveness, all_of(variable))
  
  # Perform the Wilcoxon test
  test_result <- wilcox.test(reformulate('Suppressiveness', variable), data = current_data)
  
  # Use broom to tidy the test result and extract p-value
  tidy_result <- broom::tidy(test_result)
  
  #Calc. the median difference
  median_suppressive <- median(current_data[[variable]][current_data$Suppressiveness == 'Suppressive'], na.rm = TRUE)
  median_non_suppressive <- median(current_data[[variable]][current_data$Suppressiveness == 'Non-suppressive'], na.rm = TRUE)
  median_diff <- median_suppressive - median_non_suppressive
  
  #Create a new df for the results
  new_row <- data.frame(variable = variable, p_value = tidy_result$p.value, median_diff = median_diff, stringsAsFactors = FALSE)
  
  # Add the new row to the results_F df
  results_F <- rbind(results_F, new_row)
}

results_F$p_value_adjusted <- p.adjust(results_F$p_value, method = "BH")


results_F_pairs <- results_F %>%
  dplyr::filter(!grepl("\\+", variable))

results_F_triplets <- results_F %>%
  dplyr::filter(grepl("\\+", variable))

# for triplets
results_F_triplets <- results_F_triplets %>%
  separate(variable, into = c("Combination", "Individual"), sep = " to ")

#results_F$Combination <- gsub("Escherichia/Shigella", "Escherichia", results_F$Combination)
#results_F$Individual <- gsub("Escherichia/Shigella", "Escherichia", results_F$Individual)

# for pair
results_F_pairs <- results_F_pairs %>%
  separate(variable, into = c("Species1", "Species2"), sep = " to ")

#results_F$Species1 <- gsub("Escherichia/Shigella", "Escherichia", results_F$Species1)
#results_F$Species2 <- gsub("Escherichia/Shigella", "Escherichia", results_F$Species2)


#Check the structure after the split:
str(results_F)

##Create a wide-format df with combinations as rows and individuals as columns for 'median_diff'
# for triplets:
wide_results_F_triplets <- results_F_triplets %>%
  tidyr::pivot_wider(id_cols = Combination, names_from = Individual, values_from = median_diff)

#for pair
wide_results_F_pairs <- results_F_pairs %>%
  tidyr::pivot_wider(id_cols = Species1, names_from = Species2, values_from = median_diff)


str(wide_results_F_pairs)
str(wide_results_F_triplets)

# Create a wide-format data frame for 'p_value'
# for triplets:
p_values_wide_F_triplets <- results_F_triplets %>%
  tidyr::pivot_wider(id_cols = Combination, names_from = Individual, values_from = p_value_adjusted)

# for pairs:
p_values_wide_F_pairs <- results_F_pairs %>%
  tidyr::pivot_wider(id_cols = Species1, names_from = Species2, values_from = p_value_adjusted)


str(p_values_wide_F_pairs)
str(p_values_wide_F_triplets)

#for triplets:
heatmap_data_F_triplets <- merge(wide_results_F_triplets, p_values_wide_F_triplets, by = "Combination", suffixes = c("_diff", "_pval"))
#for pairs:
heatmap_data_F_pairs <- merge(wide_results_F_pairs, p_values_wide_F_pairs, by = "Species1", suffixes = c("_diff", "_pval"))



##Melt the median_diff values
# for triple:
long_heatmap_diff_F_triplets <- reshape2::melt(heatmap_data_F_triplets, id.vars = "Combination", 
                          measure.vars = grep("_diff$", names(heatmap_data_F_triplets), value = TRUE),
                          variable.name = "Individual", value.name = "median_diff")

# for pair:
long_heatmap_diff_F_pairs <- reshape2::melt(heatmap_data_F_pairs, id.vars = "Species1", 
                            measure.vars = grep("_diff$", names(heatmap_data_F_pairs), value = TRUE),
                            variable.name = "Species2", value.name = "median_diff")



# Melt the p_values
# for triplets:
long_heatmap_pval_F_triplets <- reshape2::melt(heatmap_data_F_triplets, id.vars = "Combination", 
                          measure.vars = grep("_pval$", names(heatmap_data_F_triplets), value = TRUE),
                          variable.name = "Individual", value.name = "p_value_adjusted")
# for pairs
long_heatmap_pval_F_pairs <- reshape2::melt(heatmap_data_F_pairs, id.vars = "Species1", 
                            measure.vars = grep("_pval$", names(heatmap_data_F_pairs), value = TRUE),
                            variable.name = "Species2", value.name = "p_value_adjusted")


# Remove suffixes from Individual column to match between the two melted dfs
#for triple: 
long_heatmap_diff_F_triplets$Individual <- gsub("_diff$", "", long_heatmap_diff_F_triplets$Individual)
long_heatmap_pval_F_triplets$Individual <- gsub("_pval$", "", long_heatmap_pval_F_triplets$Individual)

#for pair: 
long_heatmap_diff_F_pairs$Species2 <- gsub("_diff$", "", long_heatmap_diff_F_pairs$Species2)
long_heatmap_pval_F_pairs$Species2 <- gsub("_pval$", "", long_heatmap_pval_F_pairs$Species2)

# Merge the two melted df
# for triple
long_heatmap_data_F_triplets <- merge(long_heatmap_diff_F_triplets, long_heatmap_pval_F_triplets, by = c("Combination", "Individual"))
# for pair
long_heatmap_data_F_pairs <- merge(long_heatmap_diff_F_pairs, long_heatmap_pval_F_pairs, by = c("Species1", "Species2"))


#for both
long_heatmap_data_F_triplets <- long_heatmap_data_F_triplets %>%
  dplyr::mutate(median_diff = ifelse(p_value_adjusted > 0.05, 0, median_diff))

long_heatmap_data_F_pairs <- long_heatmap_data_F_pairs %>%
  dplyr::mutate(median_diff = ifelse(p_value_adjusted > 0.05, 0, median_diff))


# Add an 'alpha' column 
long_heatmap_data_F_pairs <- long_heatmap_data_F_pairs %>%
  dplyr::mutate(alpha = case_when(
    p_value_adjusted < 0.0001 ~ 1,
    p_value_adjusted < 0.001 ~ 0.8,
    p_value_adjusted < 0.01 ~ 0.6,
    p_value_adjusted < 0.05 ~ 0.4,
    TRUE ~ 0  # p_value is not significant
  ))


long_heatmap_data_F_triplets <- long_heatmap_data_F_triplets %>%
  dplyr::mutate(alpha = case_when(
    p_value_adjusted < 0.0001 ~ 1,
    p_value_adjusted < 0.001 ~ 0.8,
    p_value_adjusted < 0.01 ~ 0.6,
    p_value_adjusted < 0.05 ~ 0.4,
    TRUE ~ 0  # p_value is not significant
  ))



#Create a 'colour' column for the fill aesthetic based on 'median_diff'
long_heatmap_data_F_triplets <- long_heatmap_data_F_triplets %>%
  dplyr::mutate(colour = case_when(
    median_diff < 0 & p_value_adjusted <= 0.05 ~ "blue",
    median_diff > 0 & p_value_adjusted <= 0.05 ~ "red",
    TRUE ~ "white"  
  ))

long_heatmap_data_F_pairs <- long_heatmap_data_F_pairs %>%
  dplyr::mutate(colour = case_when(
    median_diff < 0 & p_value_adjusted <= 0.05 ~ "blue",
    median_diff > 0 & p_value_adjusted <= 0.05 ~ "red",
    TRUE ~ "white"  
  ))



#for triplets:
F_heat_triplets <- ggplot(long_heatmap_data_F_triplets, aes(x = Individual, y = Combination)) +
  geom_tile(aes(fill = colour), color = NA) +
  scale_fill_identity() +  # Use actual color names 
  scale_fill_manual(values = c("blue", "red", "white"),
                    labels = c("Lower", "Higher", "Not significant"),
                    name = "Median Difference") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        axis.text.y = element_text(angle = 0),
        axis.title = element_blank()) +
  labs(fill = "Median Difference", alpha = "Significance")

F_heat_triplets

# for pairs:
F_heat_pairs <- ggplot(long_heatmap_data_F_pairs, aes(x = Species2, y = Species1)) +
  geom_tile(aes(fill = colour), color = NA) +
  scale_fill_identity() +  # Use actual color names 
  scale_fill_manual(values = c("blue", "red", "white"),
                    labels = c("Lower", "Higher", "Not significant"),
                    name = "Median Difference") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        axis.text.y = element_text(angle = 0),
        axis.title = element_blank()) +
  labs(fill = "Median Difference", alpha = "Significance")

F_heat_pairs

#Comparing each of these ratio heatmaps for fecal vs Mix-14 communities:
##By overlaying each of these heatmaps (pairs versus triplet heatmap) with their respective mix-14 counterpart
#(made transparant), one can deduce significant ratios shared in common (in direction) between suppressive and non-suppressive states
#For further details, see Methods section in manuscript.




#Next, we create the heatmap of genus-level signatures associated with suppressiveness in fecal experimental communities
#This heatmap is stored in Figure 2 of the manuscript as well
perform_wilcox_test <- function(control, experimental, genus) {
  control_abundance <- control %>% 
    dplyr::filter(Genus == genus) %>% 
    dplyr::pull(Relative_Abundance)
  
  experimental_abundance <- experimental %>% 
    dplyr::filter(Genus == genus) %>% 
    dplyr::pull(Relative_Abundance)
  
  if (length(control_abundance) > 0 && length(experimental_abundance) > 0) {
    test_result <- wilcox.test(control_abundance, experimental_abundance, alternative = "two.sided")
    p_value <- test_result$p.value
    direction <- ifelse(median(experimental_abundance) < median(control_abundance), "Lower", "Higher")
  } else {
    p_value <- NA
    direction <- "Not Tested"
  }
  
  return(list(p_value = p_value, direction = direction))
}

# Replace 'Escherichia/Shigella' with 'Escherichia' in the Genus column if needed:
merged_dataframe_all_fecal_experiments_1_long_1$Genus <- gsub("Escherichia/Shigella", "Escherichia", merged_dataframe_all_fecal_experiments_1_long_1$Genus)

p_values_genus_F <- numeric()
genus_names_genus_F <- character()
directions_genus_F <- character()
outcomes_genus_F <- character()

for (genus in unique(merged_dataframe_all_fecal_experiments_1_long_1$Genus)) {
  control_data <- merged_dataframe_all_fecal_experiments_1_long_1 %>% 
    filter(Genus == genus, Suppressiveness == 'non-suppressive')
  
  experimental_data <- merged_dataframe_all_fecal_experiments_1_long_1 %>% 
    filter(Genus == genus, Suppressiveness == 'suppressive')
  
  test_result <- perform_wilcox_test(control_data, experimental_data, genus)
  
  #Store the p-value, genus name, and direction
  p_values_genus_F <- c(p_values_genus_F, test_result$p_value)
  genus_names_genus_F <- c(genus_names_genus_F, genus)
  directions_genus_F <- c(directions_genus_F, test_result$direction)
}

# Adjust all p-values at once outside the loop
p_values_adjusted_genus_F <- p.adjust(p_values_genus_F, method = "BH")

# Assign the outcomes using the stored data
for (i in seq_along(p_values_adjusted_genus_F)) {
  if (!is.na(p_values_adjusted_genus_F[i]) && p_values_adjusted_genus_F[i] < 0.05) {
    outcomes_genus_F[i] <- if (directions_genus_F[i] == "Lower") "Blue" else "Red"
  } else {
    outcomes_genus_F[i] <- "White"
  }
}

#Create the df
heatmap_data_genus_F <- data.frame(
  Genus = genus_names_genus_F,
  Adjusted_P_Value = p_values_adjusted_genus_F,
  Direction = directions_genus_F,
  Outcome = outcomes_genus_F,
  stringsAsFactors = FALSE
)

# Plot the heatmap of genus-level 'shifts' between suppressive and non-suppressive fecal communities
ggplot(heatmap_data_genus_F, aes(x = "", y = reorder(Genus, Outcome), fill = Outcome)) +
  geom_tile(color = "white") +
  scale_fill_manual(values = c("Red" = "red", "Blue" = "blue", "White" = "white")) +
  theme_minimal() +
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank(),
        axis.title.x = element_blank(),
        axis.title.y = element_blank()) +
  labs(fill = "Significance", y = "Genus", x = "")







###################################################################
####MONOCULTURE GROWTH CURVES
# as shown in supplementary figures of manuscript
Monoculture_growth_mBHI <- read_csv("Desktop/C_diff_2023/Monoculture_growth_mBHI.csv")
#View(Monoculture_growth_mBHI)

##Transform 
reshaped_data_monocult <- Monoculture_growth_mBHI %>%
  # Convert from wide to long format
  tidyr::pivot_longer(cols = -Hour, names_to = "Species_Replicate", values_to = "Value") %>%
  
  #Separate Species and Replicate columns
  dplyr::mutate(Species = stringr::str_extract(Species_Replicate, ".*(?=_\\d$)"),
         Replicate = as.numeric(stringr::str_extract(Species_Replicate, "\\d$"))) %>%
  
  # Optionally, remove the combined column if not needed
  dplyr::select(-Species_Replicate)

#check
head(reshaped_data_monocult)

Monoculture_growth_in_mBHI <- reshaped_data_monocult

summary_data_monocult <- Monoculture_growth_in_mBHI %>%
  dplyr::group_by(Hour, Species) %>%
  dplyr::summarize(mean_value = mean(Value),
            sd_value = sd(Value),
            n = n(),
            se_value = sd_value / sqrt(n),
            .groups = "drop")


ggplot(data = summary_data_monocult, aes(x = Hour, y = mean_value)) +
  geom_line(aes(group = Species)) + 
  geom_errorbar(aes(ymin = mean_value - se_value, ymax = mean_value + se_value), width = 0.2) +
  facet_wrap(~Species, scales = "free_y") + 
  labs(title = "Growth Curves of Species over Time",
       x = "Hour",
       y = "Value") +
  theme_minimal()



##Ordered by highest final OD
ordering_data_monocult <- summary_data_monocult %>%
  dplyr::filter(Hour == 96) %>%
  dplyr::arrange(-mean_value)  ##in descending order

reshaped_data_monocult$Species <- factor(reshaped_data_monocult$Species, levels = ordering_data_monocult$Species)
summary_data_monocult$Species <- factor(summary_data_monocult$Species, levels = ordering_data_monocult$Species)


ggplot(data = summary_data_monocult, aes(x = Hour, y = mean_value)) +
  geom_line(aes(group = Species)) + 
  geom_errorbar(aes(ymin = mean_value - se_value, ymax = mean_value + se_value), width = 0.2) +
  facet_wrap(~Species, scales = "free_y") + 
  labs(title = "Growth Curves of Species over Time",
       x = "Hour",
       y = "Value") +
  theme_minimal()


ggplot(data = summary_data_monocult, aes(x = Hour, y = mean_value)) +
  geom_line(aes(group = Species, color = mean_value)) + 
  geom_errorbar(aes(ymin = mean_value - se_value, ymax = mean_value + se_value), width = 0.2, alpha = 0.6) +
  scale_color_gradient(low = "blue3", high = "coral1") +  
  facet_wrap(~Species, scales = "free_y") + 
  labs(title = "Growth Curves of Species over Time",
       x = "Hour",
       y = "Value") +
  theme_minimal()


##Colour by final OD
final_values_monocult <- summary_data_monocult %>%
  dplyr::filter(Hour == max(Hour)) %>%
  dplyr::arrange(-mean_value) %>%
  dplyr::mutate(color = scales::gradient_n_pal(colours = c("blue3", "coral1"))(mean_value / max(mean_value)))

# Merge this colour assignment back into the main data
summary_data_monocult_colour <- dplyr::left_join(summary_data_monocult, final_values_monocult[, c("Species", "color")], by = "Species")

ggplot(data = summary_data_monocult_colour, aes(x = Hour, y = mean_value)) +
  geom_line(aes(group = Species, color = color)) + 
  geom_errorbar(aes(ymin = mean_value - se_value, ymax = mean_value + se_value), width = 0.2) +
  scale_color_identity() +  
  facet_wrap(~Species, scales = "free_y") + 
  labs(title = "Growth Curves of Species over Time",
       x = "Hour",
       y = "Value") +
  theme_minimal() +
  theme(legend.position = "right")  

#with a legend for the gradient:
final_values_monocult_subset <- final_values_monocult %>% dplyr::select(Species, mean_value)
names(final_values_monocult_subset)[2] <- "final_value"

summary_data_monocult_colour <- left_join(summary_data_monocult, final_values_monocult_subset, by = "Species")

ggplot(data = summary_data_monocult_colour, aes(x = Hour, y = mean_value)) +
  geom_line(aes(group = Species, color = final_value)) + 
  geom_errorbar(aes(ymin = mean_value - se_value, ymax = mean_value + se_value), width = 0.2, alpha = 0.6) +
  scale_color_gradient(name = "Final Mean OD", low = "blue3", high = "coral1") +
  facet_wrap(~Species, scales = "free_y") + 
  labs(title = "Monoculture Growth Curves of Mix-14 Species in mBHI",
       x = "Hour",
       y = "OD") +
  theme_minimal() +
  theme(legend.position = "right",
        strip.text = element_text(size = 9.5, face = "bold"))  # Increase size and make it bold



#Next: extracting growth rates

growth_rates <- summary_data_monocult %>%
  dplyr::group_by(Species) %>%
  dplyr::arrange(Hour) %>%
  dplyr::mutate(prev_value = lag(mean_value),
         prev_hour = lag(Hour),
         growth_rate = (mean_value - prev_value) / (Hour - prev_hour)) %>%
  dplyr::filter(!is.na(growth_rate)) %>%
  dplyr::ungroup()

# Extracting the maximum growth rate for each species
max_growth_rates <- growth_rates %>%
  dplyr::group_by(Species) %>%
  dplyr::summarize(max_growth_rate = max(growth_rate)) %>%
  dplyr::ungroup()



###With error margins:

growth_rates <- summary_data_monocult %>%
  dplyr::group_by(Species) %>%
  dplyr::arrange(Hour) %>%
  dplyr::mutate(prev_value = lag(mean_value),
         prev_hour = lag(Hour),
         growth_rate = (mean_value - prev_value) / (Hour - prev_hour),
         maxOD = max(mean_value, na.rm = TRUE),
         sd_maxOD = sd(mean_value, na.rm = TRUE)) %>%
  dplyr::filter(!is.na(growth_rate)) %>%
  dplyr::ungroup()

# Extracting the maximum growth rate for each species
max_growth_rates <- growth_rates %>%
  dplyr::group_by(Species) %>%
  dplyr::summarize(max_growth_rate = max(growth_rate)) %>%
  ungroup()

###With error margins:
growth_rates_replicates <- Monoculture_growth_in_mBHI %>%
  dplyr::group_by(Species, Replicate) %>%
  dplyr::arrange(Hour) %>%
  dplyr::mutate(prev_value = lag(Value),
         prev_hour = lag(Hour),
         growth_rate_rep = (Value - prev_value) / (Hour - prev_hour)) %>%
  dplyr::filter(!is.na(growth_rate_rep)) %>%
  dplyr::ungroup()

sd_growth_rates <- growth_rates_replicates %>%
  dplyr::group_by(Species, Hour) %>%
  dplyr::summarise(mean_growth_rate = mean(growth_rate_rep),
            sd_growth_rate = sd(growth_rate_rep)) %>%
  dplyr::ungroup()

max_growth_rates_with_sd <- sd_growth_rates %>%
  dplyr::group_by(Species) %>%
  dplyr::top_n(1, wt = mean_growth_rate) %>%
  dplyr::select(Species, max_growth_rate = mean_growth_rate, sd_max_growth_rate = sd_growth_rate) %>%
  dplyr::left_join(growth_rates %>% dplyr::select(Species, maxOD, sd_maxOD) %>% distinct(), by = "Species") %>%
  dplyr::ungroup()


##Multiply by 24 to get to units of [d]-1 as opposed to [h]-1
daily_growth_rates <- max_growth_rates_with_sd
#multiply by 24 to get daily rate
daily_growth_rates$max_growth_rate <- daily_growth_rates$max_growth_rate*24
daily_growth_rates$sd_max_growth_rate <- daily_growth_rates$sd_max_growth_rate*24
View(daily_growth_rates)
#Add dilution rate to (net) observed maximum growth rate to arrive at inherent growth rate
#we do not change the sd since the growth rate's variability has not changed / the dilution rate we are adding is constant
daily_growth_rates$max_growth_rate <- daily_growth_rates$max_growth_rate + 3

#Directory to save file
#output_path <- file.path("~/Documents/daily_growth_rates.csv")
# Write the dataframe to CSV
#write.csv(daily_growth_rates, file = output_path, row.names = FALSE)



####Analysis of Mathematical Modelling results
### Model result analysis
all_simulation_results <- read.csv("~/Downloads/all_simulation_results.txt", sep="")

##subset to have columns only with variable values:
all_simulation_results_1 <- all_simulation_results[, c(3:7,9:13,15:45)]

all_simulation_results_1 <- all_simulation_results_1 %>%
  dplyr::mutate(across(where(is.character), as.numeric))

#get rid of rows with NAs
all_simulation_results_1 <- na.omit(all_simulation_results_1)


#Calc. ratio
all_simulation_results_1$log_Ratio <- log10(all_simulation_results_1$Ratio)
#subset sims further for accurate ranks (see other filtering steps in modelling code in Github: C_diff_project/R_script_model)
all_simulation_results_3 <- subset(all_simulation_results_1, Final_OD_Bcaccae > Final_OD_SECcluster)

#Relative abundance B. caccae is significant correlator w/ suppressiveness and (less strongly) with Shannon indexed alpha div.
cor.test(all_simulation_results_3$Suppressiveness, all_simulation_results_3$Relative_Abundance_Bcaccae)
cor.test(all_simulation_results_3$Relative_Abundance_Bcaccae, all_simulation_results_3$Shannon_Index)


# alpha div might be biased towards un-suppressive communities since these include C. diff
##Recalculate alpha div. for native community only

# Step 1: Calc. the total abundance for the native community
all_simulation_results_3 <- all_simulation_results_3 %>%
  dplyr::mutate(Native_total_OD = Final_OD_Ecoli + Final_OD_Fsaccharivorans + Final_OD_Bcaccae + Final_OD_SECcluster)

# Step 2: Calc. the relative abundance of each species
all_simulation_results_3 <- all_simulation_results_3 %>%
  dplyr::mutate(
    Relative_Abundance_Ecoli_Native = Final_OD_Ecoli / Native_total_OD,
    Relative_Abundance_Fsaccharivorans_Native = Final_OD_Fsaccharivorans / Native_total_OD,
    Relative_Abundance_Bcaccae_Native = Final_OD_Bcaccae / Native_total_OD,
    Relative_Abundance_SECcluster_Native = Final_OD_SECcluster / Native_total_OD
  )

# function to (re)calculate Shannon Index
calculate_shannon <- function(ecoli, fsaccharivorans, bcaccae, seccluster) {
  species <- c(ecoli, fsaccharivorans, bcaccae, seccluster)
  # removing species with zero abundance to avoid 'log10(0)'
  species <- species[species > 0]
  shannon_index <- -sum(species * log(species))
  return(shannon_index)
}

# Step 3: Apply the function to each row to calculate Shannon_Index_Native
all_simulation_results_3 <- all_simulation_results_3 %>%
  dplyr::rowwise() %>%
  dplyr::mutate(Shannon_Index_Native = -(Relative_Abundance_SECcluster_Native*log(Relative_Abundance_SECcluster_Native)+
                                    Relative_Abundance_Ecoli_Native*log(Relative_Abundance_Ecoli_Native)+
                                    Relative_Abundance_Bcaccae_Native*log(Relative_Abundance_Bcaccae_Native)+
                                    Relative_Abundance_Fsaccharivorans_Native*log(Relative_Abundance_Fsaccharivorans_Native))) %>%
  dplyr::ungroup()




#Calc. a new ratio
all_simulation_results_3$Ratio_Native <- (all_simulation_results_3$Relative_Abundance_Bcaccae_Native + all_simulation_results_3$Relative_Abundance_SECcluster_Native)/all_simulation_results_3$Relative_Abundance_Ecoli_Native 

##Next, we extract the f-values, so that we can more clearly compare the relative strengths relative to the growth rate of the affected species
all_simulation_results_3a <- all_simulation_results_3[, c(1:49)]

# Corrected calculations using the Growth Rate of Species1
all_simulation_results_3a$f_Interaction_Bcaccae_Cdifficile <- all_simulation_results_3a$Interaction_Bcaccae_Cdifficile / all_simulation_results_3a$Growth_Rate_Bcaccae
all_simulation_results_3a$f_Interaction_Bcaccae_Ecoli <- all_simulation_results_3a$Interaction_Bcaccae_Ecoli / all_simulation_results_3a$Growth_Rate_Bcaccae
all_simulation_results_3a$f_Interaction_Bcaccae_Fsaccharivorans <- all_simulation_results_3a$Interaction_Bcaccae_Fsaccharivorans / all_simulation_results_3a$Growth_Rate_Bcaccae
all_simulation_results_3a$f_Interaction_Bcaccae_SECcluster <- all_simulation_results_3a$Interaction_Bcaccae_SECcluster / all_simulation_results_3a$Growth_Rate_Bcaccae
all_simulation_results_3a$f_Interaction_Cdifficile_Bcaccae <- all_simulation_results_3a$Interaction_Cdifficile_Bcaccae / all_simulation_results_3a$Growth_Rate_Cdifficile
all_simulation_results_3a$f_Interaction_Cdifficile_Ecoli <- all_simulation_results_3a$Interaction_Cdifficile_Ecoli / all_simulation_results_3a$Growth_Rate_Cdifficile
all_simulation_results_3a$f_Interaction_Cdifficile_Fsaccharivorans <- all_simulation_results_3a$Interaction_Cdifficile_Fsaccharivorans / all_simulation_results_3a$Growth_Rate_Cdifficile
all_simulation_results_3a$f_Interaction_Cdifficile_SECcluster <- all_simulation_results_3a$Interaction_Cdifficile_SECcluster / all_simulation_results_3a$Growth_Rate_Cdifficile
all_simulation_results_3a$f_Interaction_Ecoli_Bcaccae <- all_simulation_results_3a$Interaction_Ecoli_Bcaccae / all_simulation_results_3a$Growth_Rate_Ecoli
all_simulation_results_3a$f_Interaction_Ecoli_Cdifficile <- all_simulation_results_3a$Interaction_Ecoli_Cdifficile / all_simulation_results_3a$Growth_Rate_Ecoli
all_simulation_results_3a$f_Interaction_Ecoli_Fsaccharivorans <- all_simulation_results_3a$Interaction_Ecoli_Fsaccharivorans / all_simulation_results_3a$Growth_Rate_Ecoli
all_simulation_results_3a$f_Interaction_Ecoli_SECcluster <- all_simulation_results_3a$Interaction_Ecoli_SECcluster / all_simulation_results_3a$Growth_Rate_Ecoli
all_simulation_results_3a$f_Interaction_Fsaccharivorans_Bcaccae <- all_simulation_results_3a$Interaction_Fsaccharivorans_Bcaccae / all_simulation_results_3a$Growth_Rate_Fsaccharivorans
all_simulation_results_3a$f_Interaction_Fsaccharivorans_Cdifficile <- all_simulation_results_3a$Interaction_Fsaccharivorans_Cdifficile / all_simulation_results_3a$Growth_Rate_Fsaccharivorans
all_simulation_results_3a$f_Interaction_Fsaccharivorans_Ecoli <- all_simulation_results_3a$Interaction_Fsaccharivorans_Ecoli / all_simulation_results_3a$Growth_Rate_Fsaccharivorans
all_simulation_results_3a$f_Interaction_Fsaccharivorans_Fsaccharivorans <- all_simulation_results_3a$Interaction_Fsaccharivorans_Fsaccharivorans / all_simulation_results_3a$Growth_Rate_Fsaccharivorans
all_simulation_results_3a$f_Interaction_Fsaccharivorans_SECcluster <- all_simulation_results_3a$Interaction_Fsaccharivorans_SECcluster / all_simulation_results_3a$Growth_Rate_Fsaccharivorans
all_simulation_results_3a$f_Interaction_SECcluster_Bcaccae <- all_simulation_results_3a$Interaction_SECcluster_Bcaccae / all_simulation_results_3a$Growth_Rate_SECcluster
all_simulation_results_3a$f_Interaction_SECcluster_Cdifficile <- all_simulation_results_3a$Interaction_SECcluster_Cdifficile / all_simulation_results_3a$Growth_Rate_SECcluster
all_simulation_results_3a$f_Interaction_SECcluster_Ecoli <- all_simulation_results_3a$Interaction_SECcluster_Ecoli / all_simulation_results_3a$Growth_Rate_SECcluster
all_simulation_results_3a$f_Interaction_SECcluster_Fsaccharivorans <- all_simulation_results_3a$Interaction_SECcluster_Fsaccharivorans / all_simulation_results_3a$Growth_Rate_SECcluster
all_simulation_results_3a$f_Interaction_SECcluster_SECcluster <- all_simulation_results_3a$Interaction_SECcluster_SECcluster / all_simulation_results_3a$Growth_Rate_SECcluster


#Next, we define the function to categorise interaction strength
categorise_interaction <- function(interaction_value) {
  if (interaction_value <= -0.5) {
    return("strongly_negative")
  } else if (interaction_value > -0.5 && interaction_value <= -0.1) {
    return("moderately_negative")
  } else if (interaction_value > -0.1 && interaction_value < 0) {
    return("weakly_negative")
  } else if (interaction_value > 0 && interaction_value < 0.1) {
    return("weakly_positive")
  } else if (interaction_value >= 0.1 && interaction_value < 0.5) {
    return("moderately_positive")
  } else if (interaction_value >= 0.5) {
    return("strongly_positive")
  } else {
    # This condition will catch any other data, such as NA or other non-numeric data.
    return("undefined")
  }
}

#Apply this function to each of the Interaction columns
interaction_columns <- grep("^f_", names(all_simulation_results_3a), value = TRUE)

for (col_name in interaction_columns) {
  categorical_col_name <- paste0(col_name, "_categorical")
  all_simulation_results_3a[[categorical_col_name]] <- sapply(all_simulation_results_3a[[col_name]], categorise_interaction)
}

str(all_simulation_results_3a)



##Next, make a heatmap:

#Select only the interaction variables that are categorical and the suppressiveness variable
interaction_vars <- grep("Interaction.*_categorical$", names(all_simulation_results_3a), value = TRUE)
model_data_selected <- all_simulation_results_3a %>% dplyr::select(all_of(interaction_vars), Suppressiveness)


#Melt the df to a long format
model_data_long <- model_data_selected %>% 
  tidyr::pivot_longer(cols = starts_with("f_"),
               names_to = "interaction_type",
               values_to = "interaction_value")

# Getting the counts with an explicit name for the count column
interaction_summary <- model_data_long %>%
  dplyr::group_by(interaction_type, interaction_value, Suppressiveness) %>%
  dplyr::tally(name = "count")

head(interaction_summary)

#Spreading to have counts of Suppressiveness 0 and 1 in separate columns
interaction_summary_spread <- interaction_summary %>% 
  tidyr::pivot_wider(id_cols = c(interaction_type, interaction_value),
              names_from = Suppressiveness,
              values_from = count)  

# This will give a df where each row represents an interaction_type-interaction_value pair,
# and the columns represent the binary variable of Suppressiveness; 0 and 1.
print(interaction_summary_spread)

#Add a fraction of suppressiveness
interaction_summary_spread$Fraction_Suppressiveness <- interaction_summary_spread$"1"/interaction_summary_spread$"0"

interaction_summary_spread$interaction_value <- factor(
  interaction_summary_spread$interaction_value, 
  levels = c(
    "strongly_negative", "moderately_negative", "weakly_negative", 
    "weakly_positive", "moderately_positive", "strongly_positive"
  )
)

max_value <- max(interaction_summary_spread$Fraction_Suppressiveness, na.rm = TRUE)

interaction_summary_spread$Fraction_Suppressiveness[is.na(interaction_summary_spread$Fraction_Suppressiveness)] <- max_value

# ggplot(interaction_summary_spread, aes(x = interaction_type, y = interaction_value, fill = log(Fraction_Suppressiveness+0.00001))) + 
#   geom_tile() + 
#   scale_fill_gradient(low = "white", high = "red") + 
#   theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + 
#   labs(fill = "Fraction of Suppressiveness")
# 
# 

# f_Interaction_SECcluster_Ecoli_categorical, within 'interaction_type', for strongly_negative, is too unbalanced in sim number (NAs in 0, and very few for 1, so we take it out as an outlier)
interaction_summary_spread <- interaction_summary_spread %>%
  dplyr::filter(!(interaction_type == "f_Interaction_SECcluster_Ecoli_categorical" & interaction_value == "strongly_negative"))


# Custom function to format the labels by removing "_categorical" and replacing "_" with " "
#Function to remove "_categorical" from x-axis labels
format_x_labels <- function(x) {
  gsub("_categorical", "", x)
}

#Function to replace "_" with " " for y-axis labels 
format_y_labels <- function(y) {
  gsub("_", " ", y)
}

format_x_labels <- function(x) {
  sapply(x, function(label) {
    parts <- unlist(strsplit(label, "_"))
    sprintf("f(%s, %s)", paste(parts[2], parts[3], sep = " "), parts[4])
  })
}

###Plot below can be found in the supplementary materials; the darker red, the more simulation 'solutions' with interaction strengths within that bin represented the measured phenotype (suppression of c. diff)
ggplot(interaction_summary_spread, aes(x = interaction_type, y = interaction_value, fill = Fraction_Suppressiveness)) + 
  geom_tile() +
  scale_fill_gradientn(
    colours = c("blue", "lightblue", "red", "darkred"), 
    values = rescale(c(0, 1, 5, 10, max(interaction_summary_spread$Fraction_Suppressiveness, na.rm = TRUE))),
    name = "Ratio of Community\nSuppressiveness",
    guide = guide_colorbar(
      frame.colour = "black",
      ticks = TRUE
    )
  ) +
  scale_x_discrete(labels = format_x_labels) + 
  scale_y_discrete(labels = format_y_labels) + 
  #labs(x = "Interaction Type", y = "Interaction strength") +
  labs(x = "", y = "") +
  theme(
    axis.text.x = element_text(angle = 60, vjust = 1, hjust=1, size = 13), 
    axis.text.y = element_text(size = 15)  
  ) 



###Is Shannon Index of resident/native community within the range that is observed for the final resident/native community after AB treatment? 
#add a binary variable: 
#observed range of alpha div for AB-perturbed Mix-14 is shown in the manuscript, Supplementary figures.
all_simulation_results_3a$Shannon_Index_within_range <- ifelse(all_simulation_results_3a$Shannon_Index_Native > 0.8 & all_simulation_results_3a$Shannon_Index_Native < 1.2, 1, 0)

#Select only the interaction variables that are categorical and the suppressiveness variable
interaction_vars <- grep("Interaction.*_categorical$", names(all_simulation_results_3a), value = TRUE)
model_data_selected <- all_simulation_results_3a %>% dplyr::select(all_of(interaction_vars), Shannon_Index_within_range)

#Melt the df to a long format
model_data_long <- model_data_selected %>% 
  tidyr::pivot_longer(cols = starts_with("f_"),
               names_to = "interaction_type",
               values_to = "interaction_value")

#Getting the counts with an explicit name for the count column
interaction_summary <- model_data_long %>%
  dplyr::group_by(interaction_type, interaction_value, Shannon_Index_within_range) %>%
  dplyr::tally(name = "count")

# Checking the first few rows of interaction_summary to ensure it's structured correctly
head(interaction_summary)

# Spreading to have counts of Shannon_Index_within_ranges 0 and 1 in separate columns
interaction_summary_spread <- interaction_summary %>% 
  tidyr::pivot_wider(id_cols = c(interaction_type, interaction_value),
              names_from = Shannon_Index_within_range,
              values_from = count)  

# This will give a df where each row represents an interaction_type-interaction_value pair,
# and the columns represent the binary variable of Suppressiveness 0 and 1 
print(interaction_summary_spread)

#Add a fraction of alpha diversity as observed within range
interaction_summary_spread$Fraction_Shannon_Index_within_range <- interaction_summary_spread$"1"/interaction_summary_spread$"0"

interaction_summary_spread$interaction_value <- factor(
  interaction_summary_spread$interaction_value, 
  levels = c(
    "strongly_negative", "moderately_negative", "weakly_negative", 
    "weakly_positive", "moderately_positive", "strongly_positive"
  )
)

max_value <- max(interaction_summary_spread$Fraction_Shannon_Index_within_range, na.rm = TRUE)

interaction_summary_spread$Fraction_Shannon_Index_within_range[is.na(interaction_summary_spread$Fraction_Shannon_Index_within_range)] <- max_value

##very few sims in this bin/species combination, and was thus taken out in Suppressiveness counts (see above)
interaction_summary_spread <- interaction_summary_spread %>%
  dplyr::filter(!(interaction_type == "f_Interaction_SECcluster_Ecoli_categorical" & interaction_value == "strongly_negative"))

###Plot below can be found in the supplementary materials; the darker red, the more simulation 'solutions' with interaction strengths within that bin represented the measured phenotype (range of Shannon alpha diversity)
ggplot(interaction_summary_spread, aes(x = interaction_type, y = interaction_value, fill = Fraction_Shannon_Index_within_range)) + 
  geom_tile() +
  scale_fill_gradientn(
    colours = c("blue", "lightblue", "red", "darkred"), 
    values = rescale(c(0, 1, 3, 10, max(interaction_summary_spread$Fraction_Shannon_Index_within_range, na.rm = TRUE))),
    name = "Ratio Shannon Index\nof Resident Community\nwithin Observed Range",
    guide = guide_colorbar(
      frame.colour = "black",
      ticks = TRUE
    )
  ) +
  scale_x_discrete(labels = format_x_labels) +  # Apply formatting function for x-axis
  scale_y_discrete(labels = format_y_labels) +  # Apply formatting function for y-axis
  labs(x = "", y = "") +
  theme(
    axis.text.x = element_text(angle = 60, vjust = 1, hjust=1, size = 13), 
    axis.text.y = element_text(size = 15)  
  ) +
  labs(fill = "Shannon Index")







###Below, we go back to observed Mix-14 community phenotype of OD

##Plot community ODs over time
Mix_14_Community_ODs <- read.csv("Documents/Mix-14_Community_ODs.csv")
#View(Mix_14_Community_ODs)

str(Mix_14_Community_ODs)


#Transform the df from wide to long format
long_data_OD <- Mix_14_Community_ODs %>%
  tidyr::pivot_longer(cols = starts_with("Day"), names_to = "Day", values_to = "OD") %>%
  dplyr::mutate(Day = as.numeric(gsub("Day_", "", Day))) # Convert Day to numeric for proper sorting


long_data_OD %>%
  dplyr::group_by(Conditions_Explained, Day) %>%
  print()

str(long_data)

#Calc. mean and standard deviation for each day and each condition
summary_data_OD <- long_data_OD %>%
  dplyr::group_by(Conditions_Explained, Day) %>%
  dplyr::summarise(Mean_OD = mean(OD), SD_OD = sd(OD)) %>%
  dplyr::ungroup()


#Create the line plot with error bars
ggplot(summary_data_OD, aes(x = Day, y = Mean_OD, group = Conditions_Explained, color = Conditions_Explained)) +
  geom_line() +
  geom_errorbar(aes(ymin = Mean_OD - SD_OD, ymax = Mean_OD + SD_OD), width = 0.2) +
  labs(title = "Mean OD over Time by Condition",
       x = "Day",
       y = "Mean Optical Density (OD)") +
  theme_minimal()


colour_mapping <- c('Mix-14' = 'darkturquoise', 
                   'Mix-14_Antibiotics' = 'darkorange1', 
                   'Mix-14_Antibiotics_C.difficile' = 'gold')

colour_mapping2 <- c('Mix-14' = '#A8DADC', 
                   'Mix-14_Antibiotics' = '#FFC3A0', 
                   'Mix-14_Antibiotics_C.difficile' = '#FFF5A5')

ggplot(summary_data_OD, aes(x = Day, y = Mean_OD, group = Conditions_Explained)) +
  geom_line(aes(color = Conditions_Explained)) +
  #scale_color_manual(values = colour_mapping) +
  #scale_fill_manual(values = colour_mapping2) +
  geom_ribbon(aes(ymin = Mean_OD - SD_OD, ymax = Mean_OD + SD_OD, fill = Conditions_Explained), alpha = 0.2) +
  geom_errorbar(aes(ymin = Mean_OD - SD_OD, ymax = Mean_OD + SD_OD, color = Conditions_Explained), width = 0.2) +
  labs(title = "Mean OD over Time by Condition",
       x = "Day",
       y = "Mean Optical Density (OD)") +
  theme_minimal() +
  theme(
    axis.text = element_text(size = 12), 
    axis.title = element_text(size = 14), 
    legend.title = element_blank(),
    legend.text = element_text(size = 12), 
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.background = element_blank(),
    axis.line = element_line(color = "black")
  )

###Test if endpoint optical densities are greater for Mix-14 + Antibiotics vs control
day_23_ODs <- subset(long_data_OD, Day==23)
day_20_onwards_ODs <- subset(long_data_OD, Day>20)


ggplot(day_20_onwards_ODs, aes(x = Conditions_Explained, y = OD, fill = Conditions_Explained)) +
  geom_boxplot() +
  labs(title = "OD Values from day 20 onwards by Condition",
       x = "Conditions Explained",
       y = "Optical Density (OD)") +
  theme_minimal() +
  theme(axis.text = element_text(size = 12),
        axis.title = element_text(size = 14),
        legend.title = element_blank(),
        legend.text = element_text(size = 12))


anova_result_OD_endpoints <- aov(OD ~ Conditions_Explained, data = day_20_onwards_ODs)
summary(anova_result_OD_endpoints)
tukey_result_OD_endpoints <- TukeyHSD(anova_result_OD_endpoints)
print(tukey_result_OD_endpoints)



ggplot(day_20_onwards_ODs, aes(x = Conditions_Explained, y = OD, fill = Conditions_Explained)) +
  geom_boxplot() +
  geom_jitter(width = 0.2, size = 2, alpha = 0.7) +
  geom_signif(comparisons = list(c("Mix-14", "Mix-14_Antibiotics"), 
                                 c("Mix-14", "Mix-14_Antibiotics_C.difficile"), 
                                 c("Mix-14_Antibiotics", "Mix-14_Antibiotics_C.difficile")), 
              map_signif_level = TRUE,
              test = "wilcox.test",
              colour = "grey13",
              y_position = c(19, 21, 23.5)) +
  labs(title = "OD Values from Day 21 onwards, by Condition",
       x = "Conditions Explained",
       y = "OD day 21, 22, 23") +
  theme_minimal(base_size = 15) +
  ylim(0, 25) +
  theme(axis.text.x = element_text(angle = 60, vjust = 0.5, size = 12),
        axis.title = element_text(size = 14), # Adjust size as needed
        legend.title = element_blank(),
        legend.text = element_text(size = 12), # Adjust size as needed
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background = element_blank(),
        axis.line = element_line(color = "black")
  )




###For reporting; add p.adjusted values 
data_filtered_OD <- day_20_onwards_ODs %>%
  dplyr::filter(Conditions_Explained %in% c("Mix-14", "Mix-14_Antibiotics", "Mix-14_Antibiotics_C.difficile"))

#Perform pairwise Wilcoxon tests
pairwise_results <- pairwise.wilcox.test(data_filtered_OD$OD, data_filtered_OD$Conditions_Explained,
                                         p.adjust.method = "BH")  #Benjamini-Hochberg adjustment

pairwise_results


##Same with community-wide pH 
Mix_14_Community_pH <- read.csv("Documents/MIx-14_Community_pH.csv")
#View(Mix_14_Community_pH)

#Transform the df from wide to long format
long_data_pH <- Mix_14_Community_pH %>%
  tidyr::pivot_longer(cols = starts_with("Day"), names_to = "Day", values_to = "pH") %>%
  dplyr::mutate(Day = as.numeric(gsub("Day_", "", Day))) 

long_data_pH %>%
  dplyr::group_by(Conditions_Explained, Day) %>%
  print()
str(long_data_pH)

#Calc. mean and standard deviation for each day and each condition
summary_data_pH <- long_data_pH %>%
  dplyr::group_by(Conditions_Explained, Day) %>%
  dplyr::summarise(Mean_pH = mean(pH), SD_pH = sd(pH)) %>%
  dplyr::ungroup()

print(summary_data_pH)

#Create a line plot with error bars
ggplot(summary_data_pH, aes(x = Day, y = Mean_pH, group = Conditions_Explained, color = Conditions_Explained)) +
  geom_line() +
  geom_errorbar(aes(ymin = Mean_pH - SD_pH, ymax = Mean_pH + SD_pH), width = 0.2) +
  labs(title = "Mean pH over Time by Condition",
       x = "Day",
       y = "Mean pH") +
  theme_minimal()

ggplot(summary_data_pH, aes(x = Day, y = Mean_pH, group = Conditions_Explained)) +
  geom_line(aes(color = Conditions_Explained)) +
  geom_ribbon(aes(ymin = Mean_pH - SD_pH, ymax = Mean_pH + SD_pH, fill = Conditions_Explained), alpha = 0.2) +
  geom_errorbar(aes(ymin = Mean_pH - SD_pH, ymax = Mean_pH + SD_pH, color = Conditions_Explained), width = 0.2) +
  labs(title = "Mean pH over Time by Condition",
       x = "Day",
       y = "Mean pH") +
  theme_minimal() +
  theme(
    axis.text = element_text(size = 12), # Adjust size as needed
    axis.title = element_text(size = 14), # Adjust size as needed
    legend.title = element_blank(),
    legend.text = element_text(size = 12), # Adjust size as needed
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.background = element_blank(),
    axis.line = element_line(color = "black")
  )







##EXPLORING IN VIVO SIGNATURES FOR MIX-14 SPECIES ONLY (for complete metagenomes, see later in script)
###In vivo ratio Bacteroides/Phocaeicola to Escherichia; signature of C. diff repression?
#Load in overview public datasets (as used in Figure 1 in the manuscript) with rel. abundance of Mix-14 members across patient metagenomic data
Public_in_vivo_datasets <- read_csv("Documents/Public_in_vivo_datasets.csv")
#View(Public_in_vivo_datasets)
#Different health conditions/metadata of samples
unique(Public_in_vivo_datasets$Condition)

##group in suppressive versus non-suppressive, keep original condition, as shape
#considered suppressive: Healthy, FMT
#considered non-suppressive: AB, CDI, DIarrhoea

#(Mix-14) Bacteroides versus E. coli; add a small value to avoid issues with division of/by zeroes
Public_in_vivo_datasets$Ratio <- (Public_in_vivo_datasets$s__Bacteroides_caccae + Public_in_vivo_datasets$s__Bacteroides_ovatus + Public_in_vivo_datasets$s__Bacteroides_thetaiotaomicron
                                  + Public_in_vivo_datasets$s__Bacteroides_uniformis 
                                  + Public_in_vivo_datasets$s__Phocaeicola_dorei + Public_in_vivo_datasets$s__Phocaeicola_vulgatus + 0.0001) / (Public_in_vivo_datasets$s__Escherichia_coli + 0.0001)

#selected SEC cluster members to E. coli
Public_in_vivo_datasets$Ratio1 <- (Public_in_vivo_datasets$s__Bacteroides_caccae + Public_in_vivo_datasets$s__Bacteroides_thetaiotaomicron
                                   + Public_in_vivo_datasets$s__Parabacteroides_distasonis + Public_in_vivo_datasets$s__Parabacteroides_merdae
                                   + Public_in_vivo_datasets$s__Phocaeicola_dorei + 0.0001) / (Public_in_vivo_datasets$s__Escherichia_coli + 0.0001)

#Bacteroides + Parabacteroides to E. coli
Public_in_vivo_datasets$Ratio2 <- (Public_in_vivo_datasets$s__Bacteroides_caccae + Public_in_vivo_datasets$s__Bacteroides_ovatus + Public_in_vivo_datasets$s__Bacteroides_thetaiotaomicron
                                                                                + Public_in_vivo_datasets$s__Bacteroides_uniformis + Public_in_vivo_datasets$s__Parabacteroides_distasonis + Public_in_vivo_datasets$s__Parabacteroides_merdae
                                                                                + Public_in_vivo_datasets$s__Phocaeicola_dorei + Public_in_vivo_datasets$s__Phocaeicola_vulgatus + 0.0001) / (Public_in_vivo_datasets$s__Escherichia_coli + 0.0001)

Public_in_vivo_datasets <- Public_in_vivo_datasets %>%
  dplyr::mutate(Suppressiveness = case_when(
    Condition  %in% c('CDI') ~ 'Non-suppressive',
    Condition %in% c('FMT', 'Healthy') ~ 'Suppressive',
    TRUE ~ NA_character_  # Assigns NA for other conditions
  ))

#Condition "AB" has very few datapoints so ignore in this analysis:

Public_in_vivo_datasets1 <- subset(Public_in_vivo_datasets, Condition != "AB")

conditions <- unique(Public_in_vivo_datasets1$Condition)
comparisons_list <- list()

for (i in 1:(length(conditions) - 1)) {
  for (j in (i+1):length(conditions)) {
    comparisons_list[[paste(conditions[i], conditions[j], sep = " vs. ")]] <- c(conditions[i], conditions[j])
  }
}

#Calc. medians for each Condition
#filtered_data <- subset(Public_in_vivo_datasets, Ratio < 2000)

medians <- Public_in_vivo_datasets %>%
  dplyr::group_by(Condition) %>%
  dplyr::summarise(Median_Ratio = median(Ratio, na.rm = TRUE))
print(medians)

ggplot(subset(Public_in_vivo_datasets1), aes(x = Condition, y = log10(Ratio))) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(width = 0.2, alpha = 0.6) +
  ggtitle("Ratio Mix-14 Bacteroides versus E. coli across patient cohort metagenomics data") +
  xlab("Condition") +
  ylab("Ratio") +
  #scale_y_log10() + 
  stat_compare_means(
    comparisons = comparisons_list,
    method = "t.test",
    label = "p.signif",
    p.adjust.method = "bonferroni"  
  ) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 60, hjust = 1))


#disregard 'NA' in suppressiveness status; i.e., diahoerrea and AB
Public_in_vivo_datasetsA <- subset(Public_in_vivo_datasets, !is.na(Suppressiveness))

conditions <- unique(Public_in_vivo_datasetsA$Suppressiveness)
comparisons_list <- list()

for (i in 1:(length(conditions) - 1)) {
  for (j in (i+1):length(conditions)) {
    comparisons_list[[paste(conditions[i], conditions[j], sep = " vs. ")]] <- c(conditions[i], conditions[j])
  }
}

#custom colours for Suppressiveness
suppressiveness_colours <- c("Non-suppressive" = "#F8766D", "Suppressive" = "#00BFC4")

# Define custom shapes for Conditions
conditions_shapes <- c("CDI" = 1, "Healthy" = 0, "FMT" = 2, "Diarrhoea" = 5)

#plot for Mix-14 Bacteroides species versus E. coli across metagenomes of independent patient cohort studies (see Methods in manuscript, and Supplementary tables for overview of studies included)
ggplot(Public_in_vivo_datasetsA, aes(x = Suppressiveness, y = Ratio)) +
  geom_boxplot(aes(group = Suppressiveness, color = Suppressiveness), outlier.shape = NA) +
  geom_jitter(aes(color = Suppressiveness, shape = Condition), width = 0.2, alpha = 0.6, size = 2, stroke = 1) + # Use shape for Condition only in the jitter
  stat_compare_means(
    comparisons = comparisons_list,
    method = "wilcox.test",
    label = "p.value",
    p.adjust.method = "bonferroni"  # Adjust for multiple comparisons
  ) +
  scale_color_manual(values = suppressiveness_colours) +
  scale_shape_manual(values = conditions_shapes) +
  #ggtitle("Ratio Mix-14 Bacteroides species versus E. coli for in vivo studies") +
  xlab("Suppressiveness") +
  ylab("Ratio Bacteroides to E. coli across patient metagenomes") +
  theme_bw() +
  scale_y_log10() +
  theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 12),  
        axis.text.y = element_text(size = 12),  
        axis.title.x = element_text(size = 12),  
        axis.title.y = element_text(size = 12),  
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(), 
        panel.border = element_blank(), 
        axis.line = element_line())



Public_in_vivo_datasetsA$Bacteroides_total <- Public_in_vivo_datasetsA$s__Bacteroides_caccae + Public_in_vivo_datasetsA$s__Bacteroides_ovatus + Public_in_vivo_datasetsA$s__Bacteroides_thetaiotaomicron + Public_in_vivo_datasetsA$s__Bacteroides_uniformis + Public_in_vivo_datasetsA$s__Phocaeicola_dorei + Public_in_vivo_datasetsA$s__Phocaeicola_vulgatus

Public_in_vivo_datasetsA$Supp_Cond_Group <- with(Public_in_vivo_datasetsA, ifelse(Suppressiveness == 'Suppressive', paste(Suppressiveness, Condition, sep = "_"), Suppressiveness))

ggplot(Public_in_vivo_datasetsA, aes(x = Suppressiveness, y = Bacteroides_total)) +
  geom_boxplot(aes(group = Suppressiveness, color = Suppressiveness), outlier.shape = NA) +
  geom_jitter(aes(color = Suppressiveness, shape = Condition, group = Supp_Cond_Group),
              position = position_jitterdodge(jitter.width = 0.25, dodge.width = 0.8), alpha = 0.4, size = 2, stroke = 1) +
  stat_compare_means(
    comparisons = comparisons_list,
    method = "wilcox.test",
    label = "p.value",
    p.adjust.method = "bonferroni"  # Adjust for multiple comparisons
  ) +
  scale_color_manual(values = suppressiveness_colours) +
  scale_shape_manual(values = conditions_shapes) +
  #ggtitle("Ratio Mix-14 Bacteroides versus Escherichia for in vivo studies") +
  xlab("Suppressiveness") +
  ylab("Bacteroides") +
  theme_bw() +
  scale_y_log10() +
  theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 12),  
        axis.text.y = element_text(size = 12),  
        axis.title.x = element_text(size = 12), 
        axis.title.y = element_text(size = 12),  
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(), 
        panel.border = element_blank(), 
        axis.line = element_line())



###All mix-14 strains in vivo / cohort studies

#Reshape the data to long format
long_data_cohorts <- Public_in_vivo_datasetsA %>%
  tidyr::pivot_longer(
    cols = starts_with("s__"),
    names_to = "Species",
    values_to = "Value"
  ) %>%
  dplyr::mutate(Species = gsub("s__", "", Species),  # Removing 's__' prefix
         Species = gsub("_", " ", Species)) # Capitalising species names


#Define colours
colours <- c('Healthy' = "#00BFC4", 'CDI' = "#F8766D")
dodge_width <- 0.75

format_pvalue <- function(x) {
  sprintf("%.3f", x)
}

#Healthy vs CDI:
ggplot(subset(long_data_cohorts, Condition != 'FMT'), aes(x = Species, y = Value, fill = Condition)) +
  geom_boxplot(aes(fill = Condition, color = Condition, group = interaction(Species, Condition)), 
               position = position_dodge(0.75), outlier.shape = NA, alpha = 0) + # Set fill alpha to 0
  geom_jitter(aes(color = Condition, group = interaction(Species, Condition)), 
              position = position_jitterdodge(jitter.width = 0.25, dodge.width = 0.75), alpha = 0.2) +
  scale_fill_manual(values = colours) +
  scale_color_manual(values = colours) +
  stat_compare_means(aes(group = Condition), method = "wilcox.test", label = "p.format") +
  theme(axis.text.x = element_text(angle = 60, hjust = 1, vjust = 1)) +  # Ensure labels are titled
  labs(x = " ", y = "Log10(Relative abundance)") +
  scale_y_log10() +  # Log scale for y
  theme_bw() +
  theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 11), 
        axis.text.y = element_text(size = 11),  
        axis.title.x = element_text(size = 11),  
        axis.title.y = element_text(size = 11),  
        legend.text = element_text(size = 11),  
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(), 
        panel.border = element_blank(), 
        axis.line = element_line())

#Healthy + FMT vs CDI: as seen in Figure 1 of the manuscript
colours <- c('Suppressive' = "#00BFC4", 'Non-suppressive' = "#F8766D")
condition_shapes <- c('Healthy' = 2, 'FMT' = 0, 'CDI' = 1)  

ggplot(long_data_cohorts, aes(x = Species, y = Value, fill = Suppressiveness)) +
  geom_boxplot(aes(fill = Suppressiveness, color = Suppressiveness, group = interaction(Species, Suppressiveness)), 
               position = position_dodge(0.8), outlier.shape = NA, alpha = 0) + # Set fill alpha to 0
  geom_jitter(aes(color = Suppressiveness, shape = Condition, group = interaction(Species, Suppressiveness)), 
              position = position_jitterdodge(jitter.width = 0.25, dodge.width = 0.8), alpha = 0.2, stroke = 0.8) +
  scale_fill_manual(values = colours) +
  scale_color_manual(values = colours) +
  scale_shape_manual(values = condition_shapes) +
  stat_compare_means(aes(group = Suppressiveness), 
                     method = "wilcox.test", 
                     label = "p") +
  labs(x = " ", y = "Log10(Relative abundance in vivo)") +
  scale_y_log10() +  # Log scale for y
  theme_bw() +
  theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 11), 
        axis.text.y = element_text(size = 11),  
        axis.title.x = element_text(size = 11),  
        axis.title.y = element_text(size = 11),  
        legend.text = element_text(size = 11),  
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(), 
        panel.border = element_blank(), 
        axis.line = element_line())



conditions <- unique(Public_in_vivo_datasetsA$Condition)
comparisons_list <- list()

for (i in 1:(length(conditions) - 1)) {
  for (j in (i+1):length(conditions)) {
    comparisons_list[[paste(conditions[i], conditions[j], sep = " vs. ")]] <- c(conditions[i], conditions[j])
  }
}

suppressiveness_colours <- c('Suppressive' = "#00BFC4", 'Non-suppressive' = "#F8766D")

#Compare Ratio of mix-14 bacteroides species to e. coli in patient cohort metagenome data
ggplot(Public_in_vivo_datasetsA, aes(x = Condition, y = Ratio)) +
  geom_boxplot(outlier.shape = NA, aes(group = Condition)) + 
  geom_jitter(aes(color = Suppressiveness), width = 0.2, alpha = 0.6, size = 1.5) + 
  stat_compare_means(
    comparisons = comparisons_list,
    method = "wilcox.test",
    label = "p.signif",
    p.adjust.method = "bonferroni"  # Adjust for multiple comparisons
  ) +
  scale_color_manual(values = suppressiveness_colours) +
  ggtitle("Ratio Mix-14 Bacteroides versus E. coli across patient metagenomes") +
  xlab("Suppressiveness") +
  ylab("Ratio") +
  theme_bw() +
  scale_y_log10() +
  theme(axis.text.x = element_text(angle = 60, hjust = 1))


#since the p.adjust.method to account for multiple comparisons in the stat_compare_means() function is not entirely reliable, we here perform the same comparisons using different tests:
#First, we perform ANOVA to compare Ratio (calculated over relative abundances of Mix-14 Bacteroides species and E. coli) between suppressiveness states 
# Outlier ratios of >10^5 (log10 > 5) were excluded to discount artefacts of sequencing error at low to near-zero relative abundance space
anova_result <- aov(Ratio ~ Suppressiveness, data = subset(Public_in_vivo_datasetsA, Ratio < 1e+05))

# Perform Tukey's HSD test for pairwise comparisons
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)


##non-parametric alternative
# Wilcoxon rank-sum test for two independent samples
wilcox_test_result <- wilcox.test(Ratio ~ Suppressiveness, data = Public_in_vivo_datasetsA,
                                  exact = FALSE)  # exact=FALSE for large samples

print(wilcox_test_result)


# Kruskal-Wallis test for more than two independent samples
kruskal_test_result <- kruskal.test(Ratio ~ Condition, data = Public_in_vivo_datasetsA)

print(kruskal_test_result)

# If the Kruskal-Wallis test is significant, proceed with post-hoc Dunn test:
if(kruskal_test_result$p.value < 0.05) {
  #install and load the 'dunn.test' package if not already installed
  if(!require(dunn.test)) install.packages("dunn.test")
  library(dunn.test)
  
  #Dunn test for multiple comparisons
  dunn_test_result <- dunn.test(Public_in_vivo_datasetsA$Ratio, Public_in_vivo_datasetsA$Condition,
                                method = "bonferroni")  # Adjust for multiple comparisons using Bonferroni correction
  
  #Check the result:
  print(dunn_test_result)
}






###Public metagenomic datasets of patient cohorts; all those used

ASV_Watson <- readxl::read_excel("Downloads/ASV_Watson.xlsx")
ASV_Smillie_elm <- readxl::read_excel("Downloads/ASV_Smillie_elm.xlsx")
ASV_Podlesny <- readxl::read_excel("Downloads/ASV_Podlesny.xlsx")
ASV_Monaghan <- readxl::read_excel("Downloads/ASV_Monaghan.xlsx")
ASV_Milani <- readxl::read_excel("Downloads/ASV_Milani.xlsx")
ASV_Langdon <- readxl::read_excel("Downloads/ASV_Langdon.xlsx")
ASV_Kumar <- readxl::read_excel("Downloads/ASV_Kumar.xls")
ASV_Kim <- readxl::read_excel("Downloads/ASV_Kim.xlsx")
ASV_Faith <- readxl::read_excel("Downloads/ASV_Faith.xlsx")
ASV_Alabama <- readxl::read_excel("Downloads/ASV_Alabama.xlsx")

#Keep rows with SRA and genus-level information
filtered_ASV_Watson <- ASV_Watson %>% 
  dplyr::filter(Disease_condition == "SRA" | grepl("\\|g_", Disease_condition))
first_row <- filtered_ASV_Watson[1, ]
filtered_ASV_Watson[,-1] <- lapply(filtered_ASV_Watson[,-1], as.numeric)

# Convert the rest of the df columns to numeric (excluding the first row and first column)
filtered_ASV_Watson[-1, -1] <- lapply(filtered_ASV_Watson[-1, -1], function(x) as.numeric(as.character(x)))
# Normalise each column (excluding the first column) starting from the second row
normalised_data <- filtered_ASV_Watson[-1, ] %>%
  dplyr::mutate(across(-Disease_condition, ~ .x / sum(.x), .names = "{.col}"))

#Next: merge rows with identical info following '|g_' in accordance with info in second column
#Step 1: Extract the genus name and create a new column for it
normalised_data <- normalised_data %>%
  dplyr::mutate(Genus = stringr::str_extract(Disease_condition, "(?<=\\|g__)[^|]+")) %>%
  # If encountering NAs or extraction issues, ensure regex is correctly applied
  filter(!is.na(Genus)) # Optional: Filter out rows where Genus could not be extracted

#Step 2: Summarise data by Genus, summing up all numerical columns
normalised_data_summarised <- normalised_data %>%
  dplyr::group_by(Genus) %>%
  dplyr::summarise(across(where(is.numeric), sum, na.rm = TRUE),
            .groups = 'drop')

# The Disease_condition column will now contain the Genus name only
#Step 3: rename the 'Genus' column back to 'Disease_condition' 
normalised_data_summarised <- normalised_data_summarised %>%
  dplyr::rename(Disease_condition = Genus)

str(normalised_data_summarised)

#Next, merge back with the first row containing ASV vals
normalised_ASV_Watson <- rbind(first_row, normalised_data_summarised)

ASV_Watson_t<- as.data.frame(t(normalised_ASV_Watson))

rownames_vect <- rownames(ASV_Watson_t)

# Create a new column "Condition" based on the prefixes of the rownames
ASV_Watson_t$Condition <- ifelse(grepl("^CDI", rownames_vect), "CDI",
                                 ifelse(grepl("^FMT", rownames_vect), "FMT",
                                        ifelse(grepl("^Healthy", rownames_vect), "Healthy", "Condition")
                                 )
)

#reassign col and row names:
colnames(ASV_Watson_t) <- ASV_Watson_t[1, ]
ASV_Watson_t <- ASV_Watson_t[-1, ]
rownames(ASV_Watson_t) <- ASV_Watson_t[, 1]
ASV_Watson_t <- ASV_Watson_t[, -1]
#Check new structure
str(ASV_Watson_t)


#Calc. alpha div and Ratio (Bacteroides to Escherichia)
ASV_Watson_t <- as.data.frame(ASV_Watson_t)
#First, make sure Condition is pulled forward
ASV_Watson_t <- ASV_Watson_t %>% select(Condition, everything())

ASV_Watson_t[-1] <- lapply(ASV_Watson_t[-1], function(x) as.numeric(as.character(x)))

# Check the structure again to confirm the conversion
str(ASV_Watson_t)

#Calc. Shannon Alpha Diversity Index for each row
ASV_Watson_t$Alpha_Index <- apply(ASV_Watson_t[-1], 1, function(x) {
  x <- x[x > 0] # Consider only positive values
  p <- x / sum(x) # Proportion of each species
  -sum(p * log(p)) # Shannon div. index
})

#& Calc. Ratio of "Bacteroides" to "Escherichia" for each row
# As well as: Ratio "Bifidobacterium + Escherichia" to "Bacteroides" (a strong negative correlator between alpha div and ratio)
ASV_Watson_t$Ratio <- (ASV_Watson_t$Bacteroides + ASV_Watson_t$Phocaeicola) / ASV_Watson_t$Escherichia
ASV_Watson_t$Ratio2 <-(ASV_Watson_t$Bifidobacterium + ASV_Watson_t$Escherichia) / (ASV_Watson_t$Bacteroides + ASV_Watson_t$Phocaeicola) 

# Handle potential division by zero or where genera are not present
ASV_Watson_t$Ratio[is.nan(ASV_Watson_t$Ratio)] <- 0
ASV_Watson_t$Ratio[is.infinite(ASV_Watson_t$Ratio)] <- NA

ASV_Watson_t$Ratio2[is.nan(ASV_Watson_t$Ratio2)] <- 0
ASV_Watson_t$Ratio2[is.infinite(ASV_Watson_t$Ratio2)] <- NA

# Display the structure to verify
str(ASV_Watson_t)

#Pull ratio and alpha div forward
ASV_Watson_t <- ASV_Watson_t %>% select(Ratio, everything())
ASV_Watson_t <- ASV_Watson_t %>% select(Alpha_Index, everything())
ASV_Watson_t <- ASV_Watson_t %>% select(Condition, everything())

#Lastly, add Study specifics for later when dataframes get merged
ASV_Watson_t$Study <- "ASV_Watson"
ASV_Watson_t <- ASV_Watson_t %>% select(Study, everything())





#Next dataframe:
#Keep rows with SRA and genus-level information
filtered_ASV_Smillie_elm <- ASV_Smillie_elm %>% 
  dplyr::filter(Disease_state == "SRA" | grepl("\\|g_", Disease_state))
first_row <- filtered_ASV_Smillie_elm[1, ]
filtered_ASV_Smillie_elm[,-1] <- lapply(filtered_ASV_Smillie_elm[,-1], as.numeric)

# Convert the rest of the df columns to numeric (excluding the first row and first column)
filtered_ASV_Smillie_elm[-1, -1] <- lapply(filtered_ASV_Smillie_elm[-1, -1], function(x) as.numeric(as.character(x)))
# Normalise each column (excluding the first column) starting from the second row
normalised_data <- filtered_ASV_Smillie_elm[-1, ] %>%
  dplyr::mutate(across(-Disease_state, ~ .x / sum(.x), .names = "{.col}"))

#Next: merge rows with identical info following '|g_' in accordance with info in second column
# Step 1: Extract the genus name and create a new column for it
normalised_data <- normalised_data %>%
  dplyr::mutate(Genus = stringr::str_extract(Disease_state, "(?<=\\|g__)[^|]+")) %>%
  # If encountering NAs or extraction issues, ensure regex is correctly applied
  filter(!is.na(Genus)) # Optional: Filter out rows where Genus could not be extracted

# Step 2: Summarise data by Genus, summing up all numerical columns
normalised_data_summarised <- normalised_data %>%
  dplyr::group_by(Genus) %>%
  dplyr::summarise(across(where(is.numeric), sum, na.rm = TRUE),
                   .groups = 'drop')

# The Disease_condition column will now contain the Genus name only
# Step 3: rename the 'Genus' column back to 'Disease_condition' 
normalised_data_summarised <- normalised_data_summarised %>%
  dplyr::rename(Disease_state = Genus)

str(normalised_data_summarised)

#Next, merge back with the first row containing ASV vals
normalised_ASV_Smillie_elm <- rbind(first_row, normalised_data_summarised)

ASV_Smillie_elm_t<- as.data.frame(t(normalised_ASV_Smillie_elm))

rownames_vect <- rownames(ASV_Smillie_elm_t)

# Create a new column "Condition" based on the prefixes of the rownames
ASV_Smillie_elm_t$Condition <- ifelse(grepl("^CDI", rownames_vect), "CDI",
                                      ifelse(grepl("^FMT", rownames_vect), "FMT",
                                             ifelse(grepl("^Healthy", rownames_vect), "Healthy", "Condition")
                                      )
)

#reassign col and row names:
colnames(ASV_Smillie_elm_t) <- ASV_Smillie_elm_t[1, ]
ASV_Smillie_elm_t <- ASV_Smillie_elm_t[-1, ]
rownames(ASV_Smillie_elm_t) <- ASV_Smillie_elm_t[, 1]
ASV_Smillie_elm_t <- ASV_Smillie_elm_t[, -1]
#Check new structure
str(ASV_Smillie_elm_t)


#Calc. alpha div and Ratio (Bacteroides to Escherichia)
ASV_Smillie_elm_t <- as.data.frame(ASV_Smillie_elm_t)
#First, make sure Condition is pulled forward
ASV_Smillie_elm_t <- ASV_Smillie_elm_t %>% select(Condition, everything())

ASV_Smillie_elm_t[-1] <- lapply(ASV_Smillie_elm_t[-1], function(x) as.numeric(as.character(x)))

# Check the structure again to confirm the conversion
str(ASV_Smillie_elm_t)

# Calculate Shannon Alpha Diversity Index for each row
ASV_Smillie_elm_t$Alpha_Index <- apply(ASV_Smillie_elm_t[-1], 1, function(x) {
  x <- x[x > 0] # Consider only positive values
  p <- x / sum(x) # Proportion of each species
  -sum(p * log(p)) # Shannon div. index
})


# Calculate Ratio of "Bacteroides" to "Escherichia" for each row
ASV_Smillie_elm_t$Ratio <- (ASV_Smillie_elm_t$Bacteroides + ASV_Smillie_elm_t$Phocaeicola) / ASV_Smillie_elm_t$Escherichia
ASV_Smillie_elm_t$Ratio2 <-(ASV_Smillie_elm_t$Bifidobacterium + ASV_Smillie_elm_t$Escherichia) / (ASV_Smillie_elm_t$Bacteroides + ASV_Smillie_elm_t$Phocaeicola) 

# Handle potential division by zero or where genera are not present
ASV_Smillie_elm_t$Ratio[is.nan(ASV_Smillie_elm_t$Ratio)] <- 0
ASV_Smillie_elm_t$Ratio[is.infinite(ASV_Smillie_elm_t$Ratio)] <- NA

ASV_Smillie_elm_t$Ratio2[is.nan(ASV_Smillie_elm_t$Ratio2)] <- 0
ASV_Smillie_elm_t$Ratio2[is.infinite(ASV_Smillie_elm_t$Ratio2)] <- NA

# Display the structure to verify
str(ASV_Smillie_elm_t)

#Pull ratio and alpha div forward
ASV_Smillie_elm_t <- ASV_Smillie_elm_t %>% select(Ratio, everything())
ASV_Smillie_elm_t <- ASV_Smillie_elm_t %>% select(Alpha_Index, everything())
ASV_Smillie_elm_t <- ASV_Smillie_elm_t %>% select(Condition, everything())

#Lastly, add Study specifics for later when dataframes get merged
ASV_Smillie_elm_t$Study <- "ASV_Smillie_elm"
ASV_Smillie_elm_t <- ASV_Smillie_elm_t %>% select(Study, everything())







#Next df:
#Keep rows with SRA and genus-level information
filtered_ASV_Podlesny <- ASV_Podlesny %>% 
  dplyr::filter(Disease_condition == "SRA" | grepl("\\|g_", Disease_condition))
first_row <- filtered_ASV_Podlesny[1, ]
filtered_ASV_Podlesny[,-1] <- lapply(filtered_ASV_Podlesny[,-1], as.numeric)

# Convert the rest of the df columns to numeric (excluding the first row and first column)
filtered_ASV_Podlesny[-1, -1] <- lapply(filtered_ASV_Podlesny[-1, -1], function(x) as.numeric(as.character(x)))
# Normalise each column (excluding the first column) starting from the second row
normalised_data <- filtered_ASV_Podlesny[-1, ] %>%
  dplyr::mutate(across(-Disease_condition, ~ .x / sum(.x), .names = "{.col}"))

#Next: merge rows with identical info following '|g_' in accordance with info in second column
# Step 1: Extract the genus name and create a new column for it
normalised_data <- normalised_data %>%
  dplyr::mutate(Genus = stringr::str_extract(Disease_condition, "(?<=\\|g__)[^|]+")) %>%
  # If encountering NAs or extraction issues, ensure regex is correctly applied
  filter(!is.na(Genus)) # Optional: Filter out rows where Genus could not be extracted

# Step 2: Summarise data by Genus, summing up all numerical columns
normalised_data_summarised <- normalised_data %>%
  dplyr::group_by(Genus) %>%
  dplyr::summarise(across(where(is.numeric), sum, na.rm = TRUE),
                   .groups = 'drop')

# The Disease_condition column will now contain the Genus name only
# Step 3: rename the 'Genus' column back to 'Disease_condition' 
normalised_data_summarised <- normalised_data_summarised %>%
  dplyr::rename(Disease_condition = Genus)

str(normalised_data_summarised)

#Next, merge back with the first row containing ASV vals
normalised_ASV_Podlesny <- rbind(first_row, normalised_data_summarised)

ASV_Podlesny_t<- as.data.frame(t(normalised_ASV_Podlesny))

rownames_vect <- rownames(ASV_Podlesny_t)

# Create a new column "Condition" based on the prefixes of the rownames
ASV_Podlesny_t$Condition <- ifelse(grepl("^CDI", rownames_vect), "CDI",
                                   ifelse(grepl("^FMT", rownames_vect), "FMT",
                                          ifelse(grepl("^Healthy", rownames_vect), "Healthy", "Condition")
                                   )
)

#reassign col and row names:
colnames(ASV_Podlesny_t) <- ASV_Podlesny_t[1, ]
ASV_Podlesny_t <- ASV_Podlesny_t[-1, ]
rownames(ASV_Podlesny_t) <- ASV_Podlesny_t[, 1]
ASV_Podlesny_t <- ASV_Podlesny_t[, -1]
#Check new structure
str(ASV_Podlesny_t)


#Calc alpha div and Ratio (Bacteroides to Escherichia)
ASV_Podlesny_t <- as.data.frame(ASV_Podlesny_t)
#First, make sure Condition is pulled forward
ASV_Podlesny_t <- ASV_Podlesny_t %>% select(Condition, everything())

ASV_Podlesny_t[-1] <- lapply(ASV_Podlesny_t[-1], function(x) as.numeric(as.character(x)))

# Check the structure again to confirm the conversion
str(ASV_Podlesny_t)

# Calculate Shannon Alpha Diversity Index for each row
ASV_Podlesny_t$Alpha_Index <- apply(ASV_Podlesny_t[-1], 1, function(x) {
  x <- x[x > 0] # Consider only positive values
  p <- x / sum(x) # Proportion of each species
  -sum(p * log(p)) # Shannon diversity index
})

# Calculate Ratio of "Bacteroides" to "Escherichia" for each row
ASV_Podlesny_t$Ratio <- (ASV_Podlesny_t$Bacteroides + ASV_Podlesny_t$Phocaeicola) / ASV_Podlesny_t$Escherichia
ASV_Podlesny_t$Ratio2 <-(ASV_Podlesny_t$Bifidobacterium + ASV_Podlesny_t$Escherichia) / (ASV_Podlesny_t$Bacteroides + ASV_Podlesny_t$Phocaeicola) 


# Handle potential division by zero or where genera are not present
ASV_Podlesny_t$Ratio[is.nan(ASV_Podlesny_t$Ratio)] <- 0
ASV_Podlesny_t$Ratio[is.infinite(ASV_Podlesny_t$Ratio)] <- NA

ASV_Podlesny_t$Ratio2[is.nan(ASV_Podlesny_t$Ratio2)] <- 0
ASV_Podlesny_t$Ratio2[is.infinite(ASV_Podlesny_t$Ratio2)] <- NA

# Display the structure to verify
str(ASV_Podlesny_t)

#Pull ratio and alpha div forward
ASV_Podlesny_t <- ASV_Podlesny_t %>% select(Ratio, everything())
ASV_Podlesny_t <- ASV_Podlesny_t %>% select(Alpha_Index, everything())
ASV_Podlesny_t <- ASV_Podlesny_t %>% select(Condition, everything())

#Lastly, add Study specifics for later when dataframes get merged
ASV_Podlesny_t$Study <- "ASV_Podlesny"
ASV_Podlesny_t <- ASV_Podlesny_t %>% select(Study, everything())







#Next study
#Keep rows with SRA and genus-level information
filtered_ASV_Monaghan <- ASV_Monaghan %>% 
  dplyr::filter(Disease_condition == "SRA" | grepl("\\|g_", Disease_condition))
first_row <- filtered_ASV_Monaghan[1, ]
filtered_ASV_Monaghan[,-1] <- lapply(filtered_ASV_Monaghan[,-1], as.numeric)

# Convert the rest of the df columns to numeric (excluding the first row and first column)
filtered_ASV_Monaghan[-1, -1] <- lapply(filtered_ASV_Monaghan[-1, -1], function(x) as.numeric(as.character(x)))
# Normalise each column (excluding the first column) starting from the second row
normalised_data <- filtered_ASV_Monaghan[-1, ] %>%
  dplyr::mutate(across(-Disease_condition, ~ .x / sum(.x), .names = "{.col}"))

#Next: merge rows with identical info following '|g_' in accordance with info in second column
# Step 1: Extract the genus name and create a new column for it
normalised_data <- normalised_data %>%
  dplyr::mutate(Genus = stringr::str_extract(Disease_condition, "(?<=\\|g__)[^|]+")) %>%
  # If encountering NAs or extraction issues, ensure regex is correctly applied
  filter(!is.na(Genus)) # Optional: Filter out rows where Genus could not be extracted

# Step 2: Summarise data by Genus, summing up all numerical columns
normalised_data_summarised <- normalised_data %>%
  dplyr::group_by(Genus) %>%
  dplyr::summarise(across(where(is.numeric), sum, na.rm = TRUE),
                   .groups = 'drop')

# The Disease_condition column will now contain the Genus name only
# Step 3: rename the 'Genus' column back to 'Disease_condition' 
normalised_data_summarised <- normalised_data_summarised %>%
  dplyr::rename(Disease_condition = Genus)

str(normalised_data_summarised)

#Next, merge back with the first row containing ASV vals
normalised_ASV_Monaghan <- rbind(first_row, normalised_data_summarised)

ASV_Monaghan_t<- as.data.frame(t(normalised_ASV_Monaghan))

rownames_vect <- rownames(ASV_Monaghan_t)

# Create a new column "Condition" based on the prefixes of the rownames
ASV_Monaghan_t$Condition <- ifelse(grepl("^CDI", rownames_vect), "CDI",
                                   ifelse(grepl("^FMT", rownames_vect), "FMT",
                                          ifelse(grepl("^Healthy", rownames_vect), "Healthy", "Condition")
                                   )
)

#reassign col and row names:
colnames(ASV_Monaghan_t) <- ASV_Monaghan_t[1, ]
ASV_Monaghan_t <- ASV_Monaghan_t[-1, ]
rownames(ASV_Monaghan_t) <- ASV_Monaghan_t[, 1]
ASV_Monaghan_t <- ASV_Monaghan_t[, -1]
#Check new structure
str(ASV_Monaghan_t)


#Calc alpha div and Ratio (Bacteroides to Escherichia)
ASV_Monaghan_t <- as.data.frame(ASV_Monaghan_t)
#First, make sure Condition is pulled forward
ASV_Monaghan_t <- ASV_Monaghan_t %>% select(Condition, everything())

ASV_Monaghan_t[-1] <- lapply(ASV_Monaghan_t[-1], function(x) as.numeric(as.character(x)))

# Check the structure again to confirm the conversion
str(ASV_Monaghan_t)

# Calculate Shannon Alpha Diversity Index for each row
ASV_Monaghan_t$Alpha_Index <- apply(ASV_Monaghan_t[-1], 1, function(x) {
  x <- x[x > 0] # Consider only positive values
  p <- x / sum(x) # Proportion of each species
  -sum(p * log(p)) # Shannon diversity index
})

# Calculate Ratio of "Bacteroides" to "Escherichia" for each row
ASV_Monaghan_t$Ratio <- (ASV_Monaghan_t$Bacteroides + ASV_Monaghan_t$Phocaeicola) / ASV_Monaghan_t$Escherichia
ASV_Monaghan_t$Ratio2 <-(ASV_Monaghan_t$Bifidobacterium + ASV_Monaghan_t$Escherichia) / (ASV_Monaghan_t$Bacteroides + ASV_Monaghan_t$Phocaeicola) 


# Handle potential division by zero or where genera are not present
ASV_Monaghan_t$Ratio[is.nan(ASV_Monaghan_t$Ratio)] <- 0
ASV_Monaghan_t$Ratio[is.infinite(ASV_Monaghan_t$Ratio)] <- NA

ASV_Monaghan_t$Ratio2[is.nan(ASV_Monaghan_t$Ratio2)] <- 0
ASV_Monaghan_t$Ratio2[is.infinite(ASV_Monaghan_t$Ratio2)] <- NA

# Display the structure to verify
str(ASV_Monaghan_t)

#Pull ratio and alpha div forward
ASV_Monaghan_t <- ASV_Monaghan_t %>% select(Ratio, everything())
ASV_Monaghan_t <- ASV_Monaghan_t %>% select(Alpha_Index, everything())
ASV_Monaghan_t <- ASV_Monaghan_t %>% select(Condition, everything())

#Lastly, add Study specifics for later when dataframes get merged
ASV_Monaghan_t$Study <- "ASV_Monaghan"
ASV_Monaghan_t <- ASV_Monaghan_t %>% select(Study, everything())








#Next study
#Keep rows with SRA and genus-level information
filtered_ASV_Milani <- ASV_Milani %>% 
  dplyr::filter(Disease_state == "SRA" | grepl("\\|g_", Disease_state))
first_row <- filtered_ASV_Milani[1, ]
filtered_ASV_Milani[,-1] <- lapply(filtered_ASV_Milani[,-1], as.numeric)

# Convert the rest of the df columns to numeric (excluding the first row and first column)
filtered_ASV_Milani[-1, -1] <- lapply(filtered_ASV_Milani[-1, -1], function(x) as.numeric(as.character(x)))
# Normalise each column (excluding the first column) starting from the second row
normalised_data <- filtered_ASV_Milani[-1, ] %>%
  dplyr::mutate(across(-Disease_state, ~ .x / sum(.x), .names = "{.col}"))

#Next: merge rows with identical info following '|g_' in accordance with info in second column
# Step 1: Extract the genus name and create a new column for it
normalised_data <- normalised_data %>%
  dplyr::mutate(Genus = stringr::str_extract(Disease_state, "(?<=\\|g__)[^|]+")) %>%
  # If encountering NAs or extraction issues, ensure regex is correctly applied
  filter(!is.na(Genus)) # Optional: Filter out rows where Genus could not be extracted

# Step 2: Summarise data by Genus, summing up all numerical columns
normalised_data_summarised <- normalised_data %>%
  dplyr::group_by(Genus) %>%
  dplyr::summarise(across(where(is.numeric), sum, na.rm = TRUE),
                   .groups = 'drop')

# The Disease_condition column will now contain the Genus name only
# Step 3: rename the 'Genus' column back to 'Disease_condition' 
normalised_data_summarised <- normalised_data_summarised %>%
  dplyr::rename(Disease_state = Genus)

str(normalised_data_summarised)

#Next, merge back with the first row containing ASV vals
normalised_ASV_Milani <- rbind(first_row, normalised_data_summarised)

ASV_Milani_t<- as.data.frame(t(normalised_ASV_Milani))

rownames_vect <- rownames(ASV_Milani_t)

# Create a new column "Condition" based on the prefixes of the rownames
ASV_Milani_t$Condition <- ifelse(grepl("^CDI", rownames_vect), "CDI",
                                 ifelse(grepl("^FMT", rownames_vect), "FMT",
                                        ifelse(grepl("^Healthy", rownames_vect), "Healthy", "Condition")
                                 )
)

#reassign col and row names:
colnames(ASV_Milani_t) <- ASV_Milani_t[1, ]
ASV_Milani_t <- ASV_Milani_t[-1, ]
rownames(ASV_Milani_t) <- ASV_Milani_t[, 1]
ASV_Milani_t <- ASV_Milani_t[, -1]
#Check new structure
str(ASV_Milani_t)


#Calc alpha div and Ratio (Bacteroides to Escherichia)
ASV_Milani_t <- as.data.frame(ASV_Milani_t)
#First, make sure Condition is pulled forward
ASV_Milani_t <- ASV_Milani_t %>% select(Condition, everything())

ASV_Milani_t[-1] <- lapply(ASV_Milani_t[-1], function(x) as.numeric(as.character(x)))

# Check the structure again to confirm the conversion
str(ASV_Milani_t)

# Calculate Shannon Alpha Diversity Index for each row
ASV_Milani_t$Alpha_Index <- apply(ASV_Milani_t[-1], 1, function(x) {
  x <- x[x > 0] # Consider only positive values
  p <- x / sum(x) # Proportion of each species
  -sum(p * log(p)) # Shannon diversity index
})

# Calculate Ratio of "Bacteroides" to "Escherichia" for each row
ASV_Milani_t$Ratio <- (ASV_Milani_t$Bacteroides + ASV_Milani_t$Phocaeicola) / ASV_Milani_t$Escherichia
ASV_Milani_t$Ratio2 <-(ASV_Milani_t$Bifidobacterium + ASV_Milani_t$Escherichia) / (ASV_Milani_t$Bacteroides + ASV_Milani_t$Phocaeicola) 



# Handle potential division by zero or where genera are not present
ASV_Milani_t$Ratio[is.nan(ASV_Milani_t$Ratio)] <- 0
ASV_Milani_t$Ratio[is.infinite(ASV_Milani_t$Ratio)] <- NA

ASV_Milani_t$Ratio2[is.nan(ASV_Milani_t$Ratio2)] <- 0
ASV_Milani_t$Ratio2[is.infinite(ASV_Milani_t$Ratio2)] <- NA

# Display the structure to verify
str(ASV_Milani_t)

#Pull ratio and alpha div forward
ASV_Milani_t <- ASV_Milani_t %>% select(Ratio, everything())
ASV_Milani_t <- ASV_Milani_t %>% select(Alpha_Index, everything())
ASV_Milani_t <- ASV_Milani_t %>% select(Condition, everything())

#Lastly, add Study specifics for later when dataframes get merged
ASV_Milani_t$Study <- "ASV_Milani"
ASV_Milani_t <- ASV_Milani_t %>% select(Study, everything())








#Next study
#Keep rows with SRA and genus-level information
filtered_ASV_Langdon <- ASV_Langdon %>% 
  dplyr::filter(Disease_conditions == "SRA" | grepl("\\|g_", Disease_conditions))
first_row <- filtered_ASV_Langdon[1, ]
filtered_ASV_Langdon[,-1] <- lapply(filtered_ASV_Langdon[,-1], as.numeric)

# Convert the rest of the df columns to numeric (excluding the first row and first column)
filtered_ASV_Langdon[-1, -1] <- lapply(filtered_ASV_Langdon[-1, -1], function(x) as.numeric(as.character(x)))
# Normalise each column (excluding the first column) starting from the second row
normalised_data <- filtered_ASV_Langdon[-1, ] %>%
  dplyr::mutate(across(-Disease_conditions, ~ .x / sum(.x), .names = "{.col}"))


#Next: merge rows with identical info following '|g_' in accordance with info in second column
# Step 1: Extract the genus name and create a new column for it
normalised_data <- normalised_data %>%
  dplyr::mutate(Genus = stringr::str_extract(Disease_conditions, "(?<=\\|g__)[^|]+")) %>%
  # If encountering NAs or extraction issues, ensure regex is correctly applied
  filter(!is.na(Genus)) # Optional: Filter out rows where Genus could not be extracted

# Step 2: Summarise data by Genus, summing up all numerical columns
normalised_data_summarised <- normalised_data %>%
  dplyr::group_by(Genus) %>%
  dplyr::summarise(across(where(is.numeric), sum, na.rm = TRUE),
                   .groups = 'drop')

# The Disease_condition column will now contain the Genus name only
# Step 3: rename the 'Genus' column back to 'Disease_condition' 
normalised_data_summarised <- normalised_data_summarised %>%
  dplyr::rename(Disease_conditions = Genus)

str(normalised_data_summarised)

#Next, merge back with the first row containing ASV vals
normalised_ASV_Langdon <- rbind(first_row, normalised_data_summarised)

ASV_Langdon_t<- as.data.frame(t(normalised_ASV_Langdon))

rownames_vect <- rownames(ASV_Langdon_t)

# Create a new column "Condition" based on the prefixes of the rownames
ASV_Langdon_t$Condition <- ifelse(grepl("^CDI", rownames_vect), "CDI",
                                  ifelse(grepl("^FMT", rownames_vect), "FMT",
                                         ifelse(grepl("^Healthy", rownames_vect), "Healthy", "Condition")
                                  )
)

#reassign col and row names:
colnames(ASV_Langdon_t) <- ASV_Langdon_t[1, ]
ASV_Langdon_t <- ASV_Langdon_t[-1, ]
rownames(ASV_Langdon_t) <- ASV_Langdon_t[, 1]
ASV_Langdon_t <- ASV_Langdon_t[, -1]
#Check new structure
str(ASV_Langdon_t)


#Calc alpha div and Ratio (Bacteroides to Escherichia)
ASV_Langdon_t <- as.data.frame(ASV_Langdon_t)
#First, make sure Condition is pulled forward
ASV_Langdon_t <- ASV_Langdon_t %>% select(Condition, everything())

ASV_Langdon_t[-1] <- lapply(ASV_Langdon_t[-1], function(x) as.numeric(as.character(x)))

# Check the structure again to confirm the conversion
str(ASV_Langdon_t)

# Calculate Shannon Alpha Diversity Index for each row
ASV_Langdon_t$Alpha_Index <- apply(ASV_Langdon_t[-1], 1, function(x) {
  x <- x[x > 0] # Consider only positive values
  p <- x / sum(x) # Proportion of each species
  -sum(p * log(p)) # Shannon diversity index
})

# Calculate Ratio of "Bacteroides" to "Escherichia" for each row
ASV_Langdon_t$Ratio <- (ASV_Langdon_t$Bacteroides + ASV_Langdon_t$Phocaeicola) / ASV_Langdon_t$Escherichia
ASV_Langdon_t$Ratio2 <-(ASV_Langdon_t$Bifidobacterium + ASV_Langdon_t$Escherichia) / (ASV_Langdon_t$Bacteroides + ASV_Langdon_t$Phocaeicola) 


# Handle potential division by zero or where genera are not present
ASV_Langdon_t$Ratio[is.nan(ASV_Langdon_t$Ratio)] <- 0
ASV_Langdon_t$Ratio[is.infinite(ASV_Langdon_t$Ratio)] <- NA

ASV_Langdon_t$Ratio2[is.nan(ASV_Langdon_t$Ratio2)] <- 0
ASV_Langdon_t$Ratio2[is.infinite(ASV_Langdon_t$Ratio2)] <- NA

# Display the structure to verify
str(ASV_Langdon_t)

#Pull ratio and alpha div forward
ASV_Langdon_t <- ASV_Langdon_t %>% select(Ratio, everything())
ASV_Langdon_t <- ASV_Langdon_t %>% select(Alpha_Index, everything())
ASV_Langdon_t <- ASV_Langdon_t %>% select(Condition, everything())

#Lastly, add Study specifics for later when dataframes get merged
ASV_Langdon_t$Study <- "ASV_Langdon"
ASV_Langdon_t <- ASV_Langdon_t %>% select(Study, everything())








#Next study
#Keep rows with SRA and genus-level information
filtered_ASV_Kumar <- ASV_Kumar %>% 
  dplyr::filter(Disease_state == "SRA" | grepl("\\|g_", Disease_state))
first_row <- filtered_ASV_Kumar[1, ]
filtered_ASV_Kumar[,-1] <- lapply(filtered_ASV_Kumar[,-1], as.numeric)

# Convert the rest of the df columns to numeric (excluding the first row and first column)
filtered_ASV_Kumar[-1, -1] <- lapply(filtered_ASV_Kumar[-1, -1], function(x) as.numeric(as.character(x)))
# Normalise each column (excluding the first column) starting from the second row
normalised_data <- filtered_ASV_Kumar[-1, ] %>%
  dplyr::mutate(across(-Disease_state, ~ .x / sum(.x), .names = "{.col}"))

#Next: merge rows with identical info following '|g_' in accordance with info in second column
# Step 1: Extract the genus name and create a new column for it
normalised_data <- normalised_data %>%
  dplyr::mutate(Genus = stringr::str_extract(Disease_state, "(?<=\\|g__)[^|]+")) %>%
  # If encountering NAs or extraction issues, ensure regex is correctly applied
  filter(!is.na(Genus)) # Optional: Filter out rows where Genus could not be extracted

# Step 2: Summarise data by Genus, summing up all numerical columns
normalised_data_summarised <- normalised_data %>%
  dplyr::group_by(Genus) %>%
  dplyr::summarise(across(where(is.numeric), sum, na.rm = TRUE),
                   .groups = 'drop')

# The Disease_condition column will now contain the Genus name only
# Step 3: rename the 'Genus' column back to 'Disease_condition' 
normalised_data_summarised <- normalised_data_summarised %>%
  dplyr::rename(Disease_state = Genus)

str(normalised_data_summarised)

#Next, merge back with the first row containing ASV vals
normalised_ASV_Kumar <- rbind(first_row, normalised_data_summarised)

ASV_Kumar_t<- as.data.frame(t(normalised_ASV_Kumar))

rownames_vect <- rownames(ASV_Kumar_t)

# Create a new column "Condition" based on the prefixes of the rownames
ASV_Kumar_t$Condition <- ifelse(grepl("^CDI", rownames_vect), "CDI",
                                ifelse(grepl("^FMT", rownames_vect), "FMT",
                                       ifelse(grepl("^Healthy", rownames_vect), "Healthy", "Condition")
                                )
)

#reassign col and row names:
colnames(ASV_Kumar_t) <- ASV_Kumar_t[1, ]
ASV_Kumar_t <- ASV_Kumar_t[-1, ]
rownames(ASV_Kumar_t) <- ASV_Kumar_t[, 1]
ASV_Kumar_t <- ASV_Kumar_t[, -1]
#Check new structure
str(ASV_Kumar_t)


#Calc alpha div and Ratio (Bacteroides to Escherichia)
ASV_Kumar_t <- as.data.frame(ASV_Kumar_t)
#First, make sure Condition is pulled forward
ASV_Kumar_t <- ASV_Kumar_t %>% select(Condition, everything())

ASV_Kumar_t[-1] <- lapply(ASV_Kumar_t[-1], function(x) as.numeric(as.character(x)))

# Check the structure again to confirm the conversion
str(ASV_Kumar_t)

# Calculate Shannon Alpha Diversity Index for each row
ASV_Kumar_t$Alpha_Index <- apply(ASV_Kumar_t[-1], 1, function(x) {
  x <- x[x > 0] # Consider only positive values
  p <- x / sum(x) # Proportion of each species
  -sum(p * log(p)) # Shannon diversity index
})

# Calculate Ratio of "Bacteroides" to "Escherichia" for each row
ASV_Kumar_t$Ratio <- (ASV_Kumar_t$Bacteroides + ASV_Kumar_t$Phocaeicola) / ASV_Kumar_t$Escherichia
ASV_Kumar_t$Ratio2 <-(ASV_Kumar_t$Bifidobacterium + ASV_Kumar_t$Escherichia) / (ASV_Kumar_t$Bacteroides + ASV_Kumar_t$Phocaeicola) 

# Handle potential division by zero or where genera are not present
ASV_Kumar_t$Ratio[is.nan(ASV_Kumar_t$Ratio)] <- 0
ASV_Kumar_t$Ratio[is.infinite(ASV_Kumar_t$Ratio)] <- NA

ASV_Kumar_t$Ratio2[is.nan(ASV_Kumar_t$Ratio2)] <- 0
ASV_Kumar_t$Ratio2[is.infinite(ASV_Kumar_t$Ratio2)] <- NA

# Display the structure to verify
str(ASV_Kumar_t)

#Pull ratio and alpha div forward
ASV_Kumar_t <- ASV_Kumar_t %>% select(Ratio, everything())
ASV_Kumar_t <- ASV_Kumar_t %>% select(Alpha_Index, everything())
ASV_Kumar_t <- ASV_Kumar_t %>% select(Condition, everything())

#Lastly, add Study specifics for later when dataframes get merged
ASV_Kumar_t$Study <- "ASV_Kumar"
ASV_Kumar_t <- ASV_Kumar_t %>% select(Study, everything())








#Next study
#Keep rows with SRA and genus-level information
filtered_ASV_Kim <- ASV_Kim %>% 
  dplyr::filter(Disease_Condition == "SRA" | grepl("\\|g_", Disease_Condition))
first_row <- filtered_ASV_Kim[1, ]
filtered_ASV_Kim[,-1] <- lapply(filtered_ASV_Kim[,-1], as.numeric)

# Convert the rest of the df columns to numeric (excluding the first row and first column)
filtered_ASV_Kim[-1, -1] <- lapply(filtered_ASV_Kim[-1, -1], function(x) as.numeric(as.character(x)))
# Normalise each column (excluding the first column) starting from the second row
normalised_data <- filtered_ASV_Kim[-1, ] %>%
  dplyr::mutate(across(-Disease_Condition, ~ .x / sum(.x), .names = "{.col}"))

#Next: merge rows with identical info following '|g_' in accordance with info in second column
# Step 1: Extract the genus name and create a new column for it
normalised_data <- normalised_data %>%
  dplyr::mutate(Genus = stringr::str_extract(Disease_Condition, "(?<=\\|g__)[^|]+")) %>%
  # If encountering NAs or extraction issues, ensure regex is correctly applied
  filter(!is.na(Genus)) # Optional: Filter out rows where Genus could not be extracted

# Step 2: Summarise data by Genus, summing up all numerical columns
normalised_data_summarised <- normalised_data %>%
  dplyr::group_by(Genus) %>%
  dplyr::summarise(across(where(is.numeric), sum, na.rm = TRUE),
                   .groups = 'drop')

# The Disease_condition column will now contain the Genus name only
# Step 3: rename the 'Genus' column back to 'Disease_condition' 
normalised_data_summarised <- normalised_data_summarised %>%
  dplyr::rename(Disease_Condition = Genus)

str(normalised_data_summarised)

#Next, merge back with the first row containing ASV vals
normalised_ASV_Kim <- rbind(first_row, normalised_data_summarised)

ASV_Kim_t<- as.data.frame(t(normalised_ASV_Kim))

rownames_vect <- rownames(ASV_Kim_t)

# Create a new column "Condition" based on the prefixes of the rownames
ASV_Kim_t$Condition <- ifelse(grepl("^CDI", rownames_vect), "CDI",
                              ifelse(grepl("^FMT", rownames_vect), "FMT",
                                     ifelse(grepl("^Healthy", rownames_vect), "Healthy", "Condition")
                              )
)

#reassign col and row names:
colnames(ASV_Kim_t) <- ASV_Kim_t[1, ]
ASV_Kim_t <- ASV_Kim_t[-1, ]
rownames(ASV_Kim_t) <- ASV_Kim_t[, 1]
ASV_Kim_t <- ASV_Kim_t[, -1]
#Check new structure
str(ASV_Kim_t)


#Calc alpha div and Ratio (Bacteroides to Escherichia)
ASV_Kim_t <- as.data.frame(ASV_Kim_t)
#First, make sure Condition is pulled forward
ASV_Kim_t <- ASV_Kim_t %>% select(Condition, everything())

ASV_Kim_t[-1] <- lapply(ASV_Kim_t[-1], function(x) as.numeric(as.character(x)))

# Check the structure again to confirm the conversion
str(ASV_Kim_t)

# Calculate Shannon Alpha Diversity Index for each row
ASV_Kim_t$Alpha_Index <- apply(ASV_Kim_t[-1], 1, function(x) {
  x <- x[x > 0] # Consider only positive values
  p <- x / sum(x) # Proportion of each species
  -sum(p * log(p)) # Shannon diversity index
})

# Calculate Ratio of "Bacteroides" to "Escherichia" for each row
ASV_Kim_t$Ratio <- (ASV_Kim_t$Bacteroides + ASV_Kim_t$Phocaeicola) / ASV_Kim_t$Escherichia
ASV_Kim_t$Ratio2 <-(ASV_Kim_t$Bifidobacterium + ASV_Kim_t$Escherichia) / (ASV_Kim_t$Bacteroides + ASV_Kim_t$Phocaeicola) 


# Handle potential division by zero or where genera are not present
ASV_Kim_t$Ratio[is.nan(ASV_Kim_t$Ratio)] <- 0
ASV_Kim_t$Ratio[is.infinite(ASV_Kim_t$Ratio)] <- NA

ASV_Kim_t$Ratio2[is.nan(ASV_Kim_t$Ratio2)] <- 0
ASV_Kim_t$Ratio2[is.infinite(ASV_Kim_t$Ratio2)] <- NA

# Display the structure to verify
str(ASV_Kim_t)

#Pull ratio and alpha div forward
ASV_Kim_t <- ASV_Kim_t %>% select(Ratio, everything())
ASV_Kim_t <- ASV_Kim_t %>% select(Alpha_Index, everything())
ASV_Kim_t <- ASV_Kim_t %>% select(Condition, everything())

#Lastly, add Study specifics for later when dataframes get merged
ASV_Kim_t$Study <- "ASV_Kim"
ASV_Kim_t <- ASV_Kim_t %>% select(Study, everything())





#Next study
#Keep rows with SRA and genus-level information
filtered_ASV_Faith <- ASV_Faith %>% 
  dplyr::filter(Disease == "SRA" | grepl("\\|g_", Disease))
first_row <- filtered_ASV_Faith[1, ]
filtered_ASV_Faith[,-1] <- lapply(filtered_ASV_Faith[,-1], as.numeric)

# Convert the rest of the df columns to numeric (excluding the first row and first column)
filtered_ASV_Faith[-1, -1] <- lapply(filtered_ASV_Faith[-1, -1], function(x) as.numeric(as.character(x)))
# Normalise each column (excluding the first column) starting from the second row
normalised_data <- filtered_ASV_Faith[-1, ] %>%
  dplyr::mutate(across(-Disease, ~ .x / sum(.x), .names = "{.col}"))

#Next: merge rows with identical info following '|g_' in accordance with info in second column
# Step 1: Extract the genus name and create a new column for it
normalised_data <- normalised_data %>%
  dplyr::mutate(Genus = stringr::str_extract(Disease, "(?<=\\|g__)[^|]+")) %>%
  # If encountering NAs or extraction issues, ensure regex is correctly applied
  filter(!is.na(Genus)) # Optional: Filter out rows where Genus could not be extracted

# Step 2: Summarise data by Genus, summing up all numerical columns
normalised_data_summarised <- normalised_data %>%
  dplyr::group_by(Genus) %>%
  dplyr::summarise(across(where(is.numeric), sum, na.rm = TRUE),
                   .groups = 'drop')

# The Disease_condition column will now contain the Genus name only
# Step 3: rename the 'Genus' column back to 'Disease_condition' 
normalised_data_summarised <- normalised_data_summarised %>%
  dplyr::rename(Disease = Genus)

str(normalised_data_summarised)

#Next, merge back with the first row containing ASV vals
normalised_ASV_Faith <- rbind(first_row, normalised_data_summarised)

ASV_Faith_t<- as.data.frame(t(normalised_ASV_Faith))

rownames_vect <- rownames(ASV_Faith_t)

# Create a new column "Condition" based on the prefixes of the rownames
ASV_Faith_t$Condition <- ifelse(grepl("^CDI", rownames_vect), "CDI",
                                ifelse(grepl("^FMT", rownames_vect), "FMT",
                                       ifelse(grepl("^Healthy", rownames_vect), "Healthy", "Condition")
                                )
)

#reassign col and row names:
colnames(ASV_Faith_t) <- ASV_Faith_t[1, ]
ASV_Faith_t <- ASV_Faith_t[-1, ]
rownames(ASV_Faith_t) <- ASV_Faith_t[, 1]
ASV_Faith_t <- ASV_Faith_t[, -1]
#Check new structure
str(ASV_Faith_t)


#Calc alpha div and Ratio (Bacteroides to Escherichia)
ASV_Faith_t <- as.data.frame(ASV_Faith_t)
#First, make sure Condition is pulled forward
ASV_Faith_t <- ASV_Faith_t %>% select(Condition, everything())

ASV_Faith_t[-1] <- lapply(ASV_Faith_t[-1], function(x) as.numeric(as.character(x)))

# Check the structure again to confirm the conversion
str(ASV_Faith_t)

# Calculate Shannon Alpha Diversity Index for each row
ASV_Faith_t$Alpha_Index <- apply(ASV_Faith_t[-1], 1, function(x) {
  x <- x[x > 0] # Consider only positive values
  p <- x / sum(x) # Proportion of each species
  -sum(p * log(p)) # Shannon diversity index
})

# Calculate Ratio of "Bacteroides" to "Escherichia" for each row
ASV_Faith_t$Ratio <- (ASV_Faith_t$Bacteroides + ASV_Faith_t$Phocaeicola) / ASV_Faith_t$Escherichia
ASV_Faith_t$Ratio2 <-(ASV_Faith_t$Bifidobacterium + ASV_Faith_t$Escherichia) / (ASV_Faith_t$Bacteroides + ASV_Faith_t$Phocaeicola) 

# Handle potential division by zero or where genera are not present
ASV_Faith_t$Ratio[is.nan(ASV_Faith_t$Ratio)] <- 0
ASV_Faith_t$Ratio[is.infinite(ASV_Faith_t$Ratio)] <- NA

ASV_Faith_t$Ratio2[is.nan(ASV_Faith_t$Ratio2)] <- 0
ASV_Faith_t$Ratio2[is.infinite(ASV_Faith_t$Ratio2)] <- NA

# Display the structure to verify
str(ASV_Faith_t)

#Pull ratio and alpha div forward
ASV_Faith_t <- ASV_Faith_t %>% select(Ratio, everything())
ASV_Faith_t <- ASV_Faith_t %>% select(Alpha_Index, everything())
ASV_Faith_t <- ASV_Faith_t %>% select(Condition, everything())

#Lastly, add Study specifics for later when dataframes get merged
ASV_Faith_t$Study <- "ASV_Faith"
ASV_Faith_t <- ASV_Faith_t %>% select(Study, everything())










#Next study
#Keep rows with SRA and genus-level information
#In Excel, changed "Condition" to "Disease", and "SRR" to "SRA" for sake of consistency
filtered_ASV_Alabama <- ASV_Alabama %>% 
  dplyr::filter(Disease == "SRA" | grepl("\\|g_", Disease))
first_row <- filtered_ASV_Alabama[1, ]
filtered_ASV_Alabama[,-1] <- lapply(filtered_ASV_Alabama[,-1], as.numeric)

# Convert the rest of the df columns to numeric (excluding the first row and first column)
filtered_ASV_Alabama[-1, -1] <- lapply(filtered_ASV_Alabama[-1, -1], function(x) as.numeric(as.character(x)))
# Normalise each column (excluding the first column) starting from the second row
normalised_data <- filtered_ASV_Alabama[-1, ] %>%
  dplyr::mutate(across(-Disease, ~ .x / sum(.x), .names = "{.col}"))

#Next: merge rows with identical info following '|g_' in accordance with info in second column
# Step 1: Extract the genus name and create a new column for it
normalised_data <- normalised_data %>%
  dplyr::mutate(Genus = stringr::str_extract(Disease, "(?<=\\|g__)[^|]+")) %>%
  # If encountering NAs or extraction issues, ensure regex is correctly applied
  filter(!is.na(Genus)) # Optional: Filter out rows where Genus could not be extracted

# Step 2: Summarise data by Genus, summing up all numerical columns
normalised_data_summarised <- normalised_data %>%
  dplyr::group_by(Genus) %>%
  dplyr::summarise(across(where(is.numeric), sum, na.rm = TRUE),
                   .groups = 'drop')

# The Disease_condition column will now contain the Genus name only
# Step 3: rename the 'Genus' column back to 'Disease_condition' 
normalised_data_summarised <- normalised_data_summarised %>%
  dplyr::rename(Disease = Genus)

str(normalised_data_summarised)

#Next, merge back with the first row containing ASV vals
normalised_ASV_Alabama <- rbind(first_row, normalised_data_summarised)

ASV_Alabama_t<- as.data.frame(t(normalised_ASV_Alabama))

rownames_vect <- rownames(ASV_Alabama_t)

# Create a new column "Condition" based on the prefixes of the rownames
ASV_Alabama_t$Condition <- ifelse(grepl("^CDI", rownames_vect), "CDI",
                                  ifelse(grepl("^FMT", rownames_vect), "FMT",
                                         ifelse(grepl("^Healthy", rownames_vect), "Healthy", "Condition")
                                  )
)

#reassign col and row names:
colnames(ASV_Alabama_t) <- ASV_Alabama_t[1, ]
ASV_Alabama_t <- ASV_Alabama_t[-1, ]
rownames(ASV_Alabama_t) <- ASV_Alabama_t[, 1]
ASV_Alabama_t <- ASV_Alabama_t[, -1]
#Check new structure
str(ASV_Alabama_t)


#Calc alpha div and Ratio (Bacteroides to Escherichia)
ASV_Alabama_t <- as.data.frame(ASV_Alabama_t)
#First, make sure Condition is pulled forward
ASV_Alabama_t <- ASV_Alabama_t %>% select(Condition, everything())

ASV_Alabama_t[-1] <- lapply(ASV_Alabama_t[-1], function(x) as.numeric(as.character(x)))

# Check the structure again to confirm the conversion
str(ASV_Alabama_t)

# Calculate Shannon Alpha Diversity Index for each row
ASV_Alabama_t$Alpha_Index <- apply(ASV_Alabama_t[-1], 1, function(x) {
  x <- x[x > 0] # Consider only positive values
  p <- x / sum(x) # Proportion of each species
  -sum(p * log(p)) # Shannon diversity index
})

# Calculate Ratio of "Bacteroides" to "Escherichia" for each row
ASV_Alabama_t$Ratio <- (ASV_Alabama_t$Bacteroides + ASV_Alabama_t$Phocaeicola) / ASV_Alabama_t$Escherichia
ASV_Alabama_t$Ratio2 <-(ASV_Alabama_t$Bifidobacterium + ASV_Alabama_t$Escherichia) / (ASV_Alabama_t$Bacteroides + ASV_Alabama_t$Phocaeicola) 


# Handle potential division by zero or where genera are not present
ASV_Alabama_t$Ratio[is.nan(ASV_Alabama_t$Ratio)] <- 0
ASV_Alabama_t$Ratio[is.infinite(ASV_Alabama_t$Ratio)] <- NA

ASV_Alabama_t$Ratio2[is.nan(ASV_Alabama_t$Ratio2)] <- 0
ASV_Alabama_t$Ratio2[is.infinite(ASV_Alabama_t$Ratio2)] <- NA

# Display the structure to verify
str(ASV_Alabama_t)

#Pull ratio and alpha div forward
ASV_Alabama_t <- ASV_Alabama_t %>% select(Ratio, everything())
ASV_Alabama_t <- ASV_Alabama_t %>% select(Alpha_Index, everything())
ASV_Alabama_t <- ASV_Alabama_t %>% select(Condition, everything())

#Lastly, add Study specifics for later when dataframes get merged
ASV_Alabama_t$Study <- "ASV_Alabama"
ASV_Alabama_t <- ASV_Alabama_t %>% select(Study, everything())





##Merge all dataframes
ASV_Watson_t
ASV_Smillie_elm_t
ASV_Podlesny_t
ASV_Monaghan_t
ASV_Milani_t
ASV_Langdon_t
ASV_Kumar_t
ASV_Kim_t
ASV_Faith_t
ASV_Alabama_t

cohorts_df_list <- list(ASV_Watson_t = ASV_Watson_t, 
                ASV_Smillie_elm_t = ASV_Smillie_elm_t, 
                ASV_Podlesny_t = ASV_Podlesny_t, 
                ASV_Monaghan_t = ASV_Monaghan_t, 
                ASV_Milani_t = ASV_Milani_t, 
                ASV_Langdon_t = ASV_Langdon_t, 
                ASV_Kumar_t = ASV_Kumar_t, 
                ASV_Kim_t = ASV_Kim_t, 
                ASV_Faith_t = ASV_Faith_t,
                ASV_Alabama_t = ASV_Alabama_t)

#Identify all unique column names across the dfs
all_columns_cohorts <- unique(unlist(lapply(cohorts_df_list, names)))

#Ensure each df has all these columns, add missing ones filled with 0
cohorts_df_list <- lapply(df_list, function(df) {
  missing_columns <- setdiff(all_columns_cohorts, names(df))
  df[missing_columns] <- 0  
  df <- df[all_columns_cohorts]  
  return(df)
})

# Combine all the dfs vertically
combined_metagenomes_df <- bind_rows(cohorts_df_list)

#Remove lines where "Condition" == "Condition" (which was assigned to values other than FMT, AB, Cdiff, such as diarrhoea)
combined_metagenomes <- combined_metagenomes_df %>%
  dplyr::filter(Condition != 'Condition')


combined_metagenomes <- combined_metagenomes %>%
  dplyr::mutate(Suppressiveness = case_when(
    Condition %in% c('FMT', 'Healthy') ~ 'suppressive',
    Condition == 'CDI' ~ 'non-suppressive',
    TRUE ~ NA_character_  
  ))




#Check Ratios against alpha div
cor.test(combined_metagenomes$Alpha_Index, log10(combined_metagenomes$Ratio + 0.0001), method = "spearman")
ggplot(combined_metagenomes, aes(y = Alpha_Index, x = log10(Ratio + 0.0001))) +
  geom_point() +  
  geom_smooth(method = "lm", se = TRUE, color = "blue") + 
  theme_minimal() +  
  labs(x = "Alpha Index", y = "Log of Ratio Bacteroides/Phocaeicola to Escherichia", title = "Alpha Index vs. Log of Ratio")  

cor.test(combined_metagenomes$Alpha_Index, log10(combined_metagenomes$Ratio2 + 0.0001), method = "spearman")
ggplot(combined_metagenomes, aes(y = Alpha_Index, x = log10(Ratio2 + 0.0001))) +
  geom_point() +  
  geom_smooth(method = "lm", se = TRUE, color = "blue") + 
  theme_minimal() +  
  labs(x = "Alpha Index", y = "Log10 of Ratio Bifidobacterium + Escherichia to Bacteroides/Phocaeicola", title = "Alpha Index vs. Log of Ratio")  

#write.csv(combined_metagenomes, file = "Downloads/combined_metagenomes.csv", row.names = FALSE)


boxplot_cohorts_ratio_across_conditions <- ggplot(combined_metagenomes, aes(x = Condition, y = log10(Ratio + 0.0001), color = Condition)) +
  geom_boxplot(outlier.shape = NA, alpha = 0) +  
  geom_jitter(aes(color = Condition), width = 0.15, alpha = 0.25) + 
  scale_color_manual(values = c("CDI" = "#F8766D", "FMT" = "#00BFC4", "Healthy" = "#00BFC4")) +
  theme_minimal() +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), 
        panel.background = element_blank(), axis.line = element_line(color = "black"), 
        legend.position = "none") + 
  labs(title = "", x = "Condition", y = "Log10(Ratio Bacteroides/Phocaeicola to Escherichia)")

boxplot_cohorts_ratio_across_conditions
# Adding statistical comparison annotations
boxplot_cohorts_ratio_across_conditions + stat_compare_means(aes(group = Condition), label = "p.value", method = "wilcox", comparisons = list(c("CDI", "FMT"), c("CDI", "Healthy"), c("FMT", "Healthy"))) 


boxplot_cohorts_ratio2_across_conditions <- ggplot(combined_metagenomes, aes(x = Condition, y = log(Ratio2), color = Condition)) +
  geom_boxplot(outlier.shape = NA, alpha = 0) +  
  geom_jitter(aes(color = Condition), width = 0.15, alpha = 0.25) + # Add jittered points
  scale_color_manual(values = c("CDI" = "#F8766D", "FMT" = "#00BFC4", "Healthy" = "#00BFC4")) +
  theme_minimal() +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), # Remove background grid
        panel.background = element_blank(), axis.line = element_line(color = "black"), # Keep axis lines
        legend.position = "none") + # Remove the legend if not needed
  labs(title = "", x = "Condition", y = "Log10(Ratio Bifidobacterium + Escherichia to Bacteroides/Phocaeicola)")

boxplot_cohorts_ratio2_across_conditions


# Adding statistical comparison annotations
boxplot_cohorts_ratio2_across_conditions + stat_compare_means(aes(group = Condition), label = "p.value", method = "wilcox", comparisons = list(c("CDI", "FMT"), c("CDI", "Healthy"), c("FMT", "Healthy"))) 


combined_metagenomes$Supp_Cond_Group <- with(combined_metagenomes, ifelse(Suppressiveness == 'suppressive', paste(Suppressiveness, Condition, sep = "_"), Suppressiveness))

boxplot_cohorts_ratio_across_suppressiveness <- ggplot(combined_metagenomes, aes(x = Suppressiveness, y = Ratio)) +
  geom_boxplot(aes(group = Suppressiveness, color = Suppressiveness), outlier.shape = NA) +
  geom_jitter(aes(color = Suppressiveness, shape = Condition, group = Supp_Cond_Group),
              position = position_jitterdodge(jitter.width = 0.25, dodge.width = 0.8), alpha = 0.3, size = 2, stroke = 1) +
  scale_color_manual(values = c("non-suppressive" = "#F8766D", "suppressive" = "#00BFC4")) +
  scale_shape_manual(values = conditions_shapes) +
  #ggtitle("Ratio Mix-14 Bacteroides versus Escherichia for in vivo studies") +
  xlab("Suppressiveness") +
  ylab("Ratio Bacteroides+Phocaeicola to Escherichia") +
  theme_bw() +
  scale_y_log10() +
  theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 12),  
        axis.text.y = element_text(size = 12), 
        axis.title.x = element_text(size = 12),  
        axis.title.y = element_text(size = 12),  
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(), 
        panel.border = element_blank(), 
        axis.line = element_line())

boxplot_cohorts_ratio_across_suppressiveness + stat_compare_means(aes(group = Suppressiveness), label = "p.value", method = "wilcox", comparisons = list(c("suppressive", "non-suppressive"))) 



boxplot_cohorts_ratio2_across_suppressiveness <- ggplot(combined_metagenomes, aes(x = Suppressiveness, y = Ratio2)) +
  geom_boxplot(aes(group = Suppressiveness, color = Suppressiveness), outlier.shape = NA) +
  geom_jitter(aes(color = Suppressiveness, shape = Condition, group = Supp_Cond_Group),
              position = position_jitterdodge(jitter.width = 0.25, dodge.width = 0.8), alpha = 0.3, size = 2, stroke = 1) +
  scale_color_manual(values = c("non-suppressive" = "#F8766D", "suppressive" = "#00BFC4")) +
  scale_shape_manual(values = conditions_shapes) +
  #ggtitle("Ratio Mix-14 Escherichia + Bifidobacterium versus Bacteroides/Phocaeicola for in vivo studies") +
  xlab("Suppressiveness") +
  ylab("Ratio Bacteroides to Fusicatenibacter") +
  theme_bw() +
  scale_y_log10() +
  theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 12),  
        axis.text.y = element_text(size = 12), 
        axis.title.x = element_text(size = 12),  
        axis.title.y = element_text(size = 12),  
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(), 
        panel.border = element_blank(), 
        axis.line = element_line())

boxplot_cohorts_ratio2_across_suppressiveness + stat_compare_means(aes(group = Suppressiveness), label = "p.value", method = "wilcox", comparisons = list(c("suppressive", "non-suppressive"))) 





ggplot(combined_metagenomes, aes(x = Ratio, y = Alpha_Index)) +
  geom_point(aes(group = Suppressiveness, color = Suppressiveness), outlier.shape = NA) +
  scale_color_manual(values = c("non-suppressive" = "#F8766D", "suppressive" = "#00BFC4")) +
  scale_shape_manual(values = conditions_shapes) +
  #ggtitle("Ratio Mix-14 Bacteroides versus Escherichia for in vivo studies") +
  xlab("Ratio2") +
  ylab("Alpha div") +
  theme_bw() +
  scale_x_log10() +
  theme(axis.text.x = element_text(angle = 0, hjust = 1, size = 12),  
        axis.text.y = element_text(size = 12), 
        axis.title.x = element_text(size = 12),  
        axis.title.y = element_text(size = 12),  
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(), 
        panel.border = element_blank(), 
        axis.line = element_line())




combined_metagenomes$Sum_bacteroides_phocaeicola <- (combined_metagenomes$Bacteroides + combined_metagenomes$Phocaeicola) 
Boxplot_bacteroides_across_cohorts <- ggplot(combined_metagenomes, aes(x = Condition, y = log10(Sum_bacteroides_phocaeicola), color = Condition)) +
  geom_boxplot(outlier.shape = NA, alpha = 0) +  
  geom_jitter(aes(color = Condition), width = 0.15, alpha = 0.25) + # Add jittered points
  scale_color_manual(values = c("CDI" = "#F8766D", "FMT" = "#00BFC4", "Healthy" = "#00BFC4")) +
  theme_minimal() +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), 
        panel.background = element_blank(), axis.line = element_line(color = "black"), 
        legend.position = "none") + # Remove the legend if not needed
  labs(title = "", x = "Condition", y = "Log10(Bacteroides + Phocaeicola)")

Boxplot_bacteroides_across_cohorts

# Adding statistical comparison annotations
Boxplot_bacteroides_across_cohorts + stat_compare_means(aes(group = Condition), label = "p.value", method = "wilcox", p.adjust = "BH", comparisons = list(c("CDI", "FMT"), c("FMT", "Healthy"), c("CDI", "Healthy"))) 


##Just healthy (as used in Figure 5):
Boxplot_ratio_across_cohorts_healthy_vs_CDI <- ggplot(subset(combined_metagenomes, Condition != "FMT"), aes(x = Condition, y = log10(Ratio), color = Condition)) +
  geom_boxplot(outlier.shape = NA, alpha = 0) +  
  geom_jitter(aes(color = Condition, shape = Condition, size = 1, stroke = 1), width = 0.15, alpha = 0.25) + 
  scale_color_manual(values = c("CDI" = "#F8766D", "FMT" = "#00BFC4", "Healthy" = "#00BFC4")) +
  scale_shape_manual(values = c("CDI" = 1, "FMT" = 2, "Healthy" = 0)) +
  theme_minimal() +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), 
        panel.background = element_blank(), axis.line = element_line(color = "black"), 
        legend.position = "none") + 
  labs(title = "", x = "Condition", y = "Log10(Ratio Bacteroides to Escherichia)")

Boxplot_ratio_across_cohorts_healthy_vs_CDI

# Adding statistical comparison annotations
Boxplot_ratio_across_cohorts_healthy_vs_CDI + stat_compare_means(aes(group = Condition), label = "p.value", method = "wilcox", p.adjust = "BH", comparisons = list(c("CDI", "Healthy"))) 

#also used in Figure 5:
Boxplot_bacteroides_across_cohorts_healthy_vs_CDI <- ggplot(subset(combined_metagenomes, Condition != "FMT"), aes(x = Condition, y = log10(Sum_bacteroides_phocaeicola), color = Condition)) +
  geom_boxplot(outlier.shape = NA, alpha = 0) +  
  geom_jitter(aes(color = Condition, shape = Condition, size = 1, stroke = 1), width = 0.15, alpha = 0.25) + 
  scale_color_manual(values = c("CDI" = "#F8766D", "FMT" = "#00BFC4", "Healthy" = "#00BFC4")) +
  scale_shape_manual(values = c("CDI" = 1, "FMT" = 2, "Healthy" = 0)) +
  theme_minimal() +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), 
        panel.background = element_blank(), axis.line = element_line(color = "black"), 
        legend.position = "none") + 
  labs(title = "", x = "Condition", y = "Log10(Bacteroides")

Boxplot_bacteroides_across_cohorts_healthy_vs_CDI

# Adding statistical comparison annotations
Boxplot_bacteroides_across_cohorts_healthy_vs_CDI + stat_compare_means(aes(group = Condition), label = "p.value", method = "wilcox", p.adjust = "BH", comparisons = list(c("CDI", "Healthy"))) 



#Bacteroides only with FMT included in the suppressiveness group; still insignificant
combined_metagenomes$Sum_bacteroides_phocaeicola
Boxplot_bacteroides_across_cohorts_all <- ggplot(subset(combined_metagenomes), aes(x = Suppressiveness, y = Sum_bacteroides_phocaeicola)) +
  geom_boxplot(aes(group = Suppressiveness, color = Suppressiveness), outlier.shape = NA) +
  geom_jitter(aes(color = Suppressiveness, shape = Condition, group = Supp_Cond_Group),
              position = position_jitterdodge(jitter.width = 0.25, dodge.width = 0.8), alpha = 0.3, size = 2, stroke = 1) +
  scale_color_manual(values = c("non-suppressive" = "#F8766D", "suppressive" = "#00BFC4")) +
  scale_shape_manual(values = conditions_shapes) +
  xlab("Suppressiveness") +
  ylab("Bacteroides/Phocaeicola") +
  theme_bw() +
  scale_y_log10() +
  theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 12),  
        axis.text.y = element_text(size = 12), 
        axis.title.x = element_text(size = 12),  
        axis.title.y = element_text(size = 12),  
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(), 
        panel.border = element_blank(), 
        axis.line = element_line())
Boxplot_bacteroides_across_cohorts_all

Boxplot_bacteroides_across_cohorts_all + stat_compare_means(aes(group = Suppressiveness), label = "p.value", method = "wilcox", comparisons = list(c("suppressive", "non-suppressive"))) 


#Escherichia
combined_metagenomes$Escherichia
Boxplot_escherichia_across_cohorts_all <- ggplot(subset(combined_metagenomes), aes(x = Suppressiveness, y = Escherichia)) +
  geom_boxplot(aes(group = Suppressiveness, color = Suppressiveness), outlier.shape = NA) +
  geom_jitter(aes(color = Suppressiveness, shape = Condition, group = Supp_Cond_Group),
              position = position_jitterdodge(jitter.width = 0.25, dodge.width = 0.8), alpha = 0.3, size = 2, stroke = 1) +
  scale_color_manual(values = c("non-suppressive" = "#F8766D", "suppressive" = "#00BFC4")) +
  scale_shape_manual(values = conditions_shapes) +
  xlab("Suppressiveness") +
  ylab("Escherichia") +
  theme_bw() +
  scale_y_log10() +
  theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 12),  
        axis.text.y = element_text(size = 12), 
        axis.title.x = element_text(size = 12),  
        axis.title.y = element_text(size = 12),  
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(), 
        panel.border = element_blank(), 
        axis.line = element_line())
Boxplot_escherichia_across_cohorts_all

Boxplot_escherichia_across_cohorts_all + stat_compare_means(aes(group = Suppressiveness), label = "p.value", method = "wilcox", comparisons = list(c("suppressive", "non-suppressive"))) 





##Next: heatmap with prevalence in CDI versus healthy / FMT as used in Figure 1.
#here, prevalence is defined as: fraction of metagenomic samples in which relative abundance is >1%
#if so: assigned a 1, else a 0 (binary variable)

Public_in_vivo_datasetsA

# Calculate the average occurrence of relative abundances greater than 1% for each species
mean_occurrences_cohorts <- Public_in_vivo_datasetsA %>%
  dplyr::mutate(across(starts_with("s__"), ~ifelse(. > 1, 1, 0))) %>%
  dplyr::group_by(Suppressiveness) %>%
  dplyr::summarise(across(starts_with("s__"), mean, na.rm = TRUE)) %>%
  dplyr::select(Suppressiveness, "s__Parabacteroides_merdae", "s__Bacteroides_ovatus", "s__Blautia_obeum",
         "s__Fusicatenibacter_saccharivorans", "s__Collinsella_aerofaciens", "s__Phocaeicola_vulgatus",
         "s__Bifidobacterium_longum", "s__Bacteroides_uniformis", "s__Escherichia_coli",
         "s__Parabacteroides_distasonis", "s__Phocaeicola_dorei", "s__Bacteroides_caccae",
         "s__Roseburia_faecis", "s__Bacteroides_thetaiotaomicron")

#transpose the df, convert to matrix, and properly set row names
mean_occurrences_cohorts_matrix <- as.matrix(t(mean_occurrences_cohorts[,-1])) 
colnames(mean_occurrences_cohorts_matrix) <- mean_occurrences_cohorts$Suppressiveness

#Plotting the heatmap without displaying numbers
pheatmap(mean_occurrences_cohorts_matrix, cluster_rows = FALSE, cluster_cols = FALSE,
         display_numbers = FALSE, annotation_legend = FALSE)

#Now monochromatic:
monochromatic_palette <- colorRampPalette(c("white", "grey10"))(100)

#heatmap with the monochromatic colour palette
pheatmap(mean_occurrences_cohorts_matrix, 
         cluster_rows = FALSE, 
         cluster_cols = FALSE,
         display_numbers = FALSE, 
         annotation_legend = FALSE,
         color = monochromatic_palette)  






###IN VIVO/PATIENT COHORT METAGENOMICS DATA: EXPLORATION OF FUNCTIONAL GENE HITS 
### in proposed metabolic pathways of relevance (as identified in metagenomics analysis)
# match SSR_number with alpha div and ratio
fos_df <- read_csv("Downloads/fos_df.csv")
stickland_df <- read_csv("Downloads/stickland_df.csv")
B3_df <- read_csv("Downloads/b3_df.csv")


str(combined_metagenomes)

combined_metagenomes$SRR_Number <- rownames(combined_metagenomes)


# Select only the relevant columns (SRR_Number, Alpha_Index, Ratio) from combined_metagenomes
combined_metagenomes_subset <- combined_metagenomes[, c("SRR_Number", "Alpha_Index", "Ratio", "Ratio2", "Sum_bacteroides_phocaeicola")]

# Merge fos_df with the subset of combined_metagenomes based on SRR_Number
fos_df_updated <- merge(fos_df, combined_metagenomes_subset, by="SRR_Number", all.x=TRUE)
#check:
str(fos_df_updated)


fos_df_updated$colour <- ifelse(fos_df_updated$Description == "CDI", "#F8766D", "#00BFC4")

fos_df_updated_noFMT <- subset(fos_df_updated, Description != 'FMT')

ggplot(fos_df_updated, aes(y = total_hit_count, x = log10(Ratio))) +
  geom_point(aes(color = colour, shape = Description, size = Alpha_Index), stroke = 1.2, alpha = 0.5) +  
  scale_color_identity() + 
  scale_shape_manual(values = c(Healthy = 15, FMT = 17, CDI = 16)) + 
  scale_size(range = c(0.4, 3.5)) +  
  geom_smooth(method = "lm", se = TRUE, color = "grey", linetype = "dashed", aes(group = 1)) +  
  theme_minimal() +  
  labs(x = "Log10(Ratio Bacteroides to Escherichia)", y = "Hits for FOS metabolism genes", title = "") +  
  guides(color = FALSE) +
  theme(axis.text.x = element_text(angle = 0, hjust = 1, size = 12),  
        axis.text.y = element_text(size = 12), 
        axis.title.x = element_text(size = 12),  
        axis.title.y = element_text(size = 12),  
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(), 
        panel.border = element_blank(), 
        axis.line = element_line())

#Log10(Ratio) correlates more strongly with hit count than alpha div:
cor.test(fos_df_updated$total_hit_count, log10(fos_df_updated$Ratio), method = "spearman")
cor.test(fos_df_updated$total_hit_count, fos_df_updated$Alpha_Index, method = "spearman")



model <- lm(total_hit_count ~ log10(Ratio), data = fos_df_updated)
summary_model <- summary(model)
r_squared <- summary_model$r.squared
f_statistic <- summary_model$fstatistic
f_value <- f_statistic["value"]
p_value <- pf(f_statistic["value"], f_statistic["numdf"], f_statistic["dendf"], lower.tail = FALSE)
r_squared
p_value


model <- lm(total_hit_count ~ Alpha_Index, data = fos_df_updated)
summary_model <- summary(model)
r_squared <- summary_model$r.squared
f_statistic <- summary_model$fstatistic
f_value <- f_statistic["value"]
p_value <- pf(f_statistic["value"], f_statistic["numdf"], f_statistic["dendf"], lower.tail = FALSE)
r_squared
p_value




#Next: Stickland (precursor) metabolism

# Merge stickland_df with the subset of combined_metagenomes based on SRR_Number
stickland_df_updated <- merge(stickland_df, combined_metagenomes_subset, by="SRR_Number", all.x=TRUE)
#check:
str(stickland_df_updated)

stickland_df_updated$colour <- ifelse(stickland_df_updated$Description == "CDI", "#F8766D", "#00BFC4")


stickland_df_updated_noFMT <- subset(stickland_df_updated, Description != 'FMT')

ggplot(stickland_df_updated, aes(y = total_hit_count, x = log10(Ratio))) +
  geom_point(aes(color = colour, shape = Description, size = Alpha_Index), stroke = 1, alpha = 0.5) +  
  scale_color_identity() + 
  scale_shape_manual(values = c(CDI = 16, Healthy = 15, FMT = 17)) + 
  scale_size(range = c(0.4, 3.5)) +  
  geom_smooth(method = "lm", se = TRUE, color = "grey", linetype = "dashed", aes(group = 1)) +  
  theme_minimal() +  
  labs(x = "log10(Ratio Bacteroides+Phocaeicola to Escherichia)", y = "Hits for STICKLAND metabolism genes", title = "") +  
  guides(color = FALSE) +
  theme(axis.text.x = element_text(angle = 0, hjust = 1, size = 12),  
        axis.text.y = element_text(size = 12), 
        axis.title.x = element_text(size = 12),  
        axis.title.y = element_text(size = 12),  
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(), 
        panel.border = element_blank(), 
        axis.line = element_line())



test_ratio_STICKLAND_no_FMT <- cor.test(log10(stickland_df_updated_noFMT$Ratio), stickland_df_updated_noFMT$total_hit_count, method = "spearman")
test_alpha_div_STICKLAND_no_FMT <- cor.test(stickland_df_updated_noFMT$Alpha_Index, stickland_df_updated_noFMT$total_hit_count, method = "spearman")
test_ratio_STICKLAND <- cor.test(log10(stickland_df_updated$Ratio), stickland_df_updated$total_hit_count, method = "spearman")
test_alpha_div_STICKLAND <- cor.test(stickland_df_updated$Alpha_Index, stickland_df_updated$total_hit_count, method = "spearman")


test_ratio_STICKLAND_no_FMT
test_alpha_div_STICKLAND_no_FMT
test_ratio_STICKLAND
test_alpha_div_STICKLAND



model <- lm(total_hit_count ~ Alpha_Index, data = stickland_df_updated)
summary_model <- summary(model)
r_squared <- summary_model$r.squared
f_statistic <- summary_model$fstatistic
f_value <- f_statistic["value"]
p_value <- pf(f_statistic["value"], f_statistic["numdf"], f_statistic["dendf"], lower.tail = FALSE)
r_squared
p_value





fos_df_updated$Suppressiveness <- ifelse(fos_df_updated$Description %in% c('FMT', 'Healthy'), 'suppressive', 'non-suppressive')
fos_df_updated$Supp_Cond_Group <- with(fos_df_updated, ifelse(Suppressiveness == 'suppressive', paste(Suppressiveness, Description, sep = "_"), Suppressiveness))


FOS_boxplot <- ggplot(subset(fos_df_updated, Description != 'Diarrhoea'), aes(x = Suppressiveness, y = total_hit_count)) +
  geom_boxplot(aes(group = Suppressiveness, color = Suppressiveness), outlier.shape = NA) +
  geom_jitter(aes(color = Suppressiveness, shape = Description, group = Supp_Cond_Group),
              position = position_jitterdodge(jitter.width = 0.25, dodge.width = 0.8), alpha = 0.3, size = 2, stroke = 1) +
  scale_color_manual(values = c("non-suppressive" = "#F8766D", "suppressive" = "#00BFC4")) +
  scale_shape_manual(values = conditions_shapes) +
  xlab("Suppressiveness") +
  ylab("Hits for FOS metabolism genes") +
  theme_bw() +
  scale_y_log10(limits = c(1, 3000)) +
  theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 12),  
        axis.text.y = element_text(size = 12), 
        axis.title.x = element_text(size = 12),  
        axis.title.y = element_text(size = 12),  
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(), 
        panel.border = element_blank(), 
        axis.line = element_line())
FOS_boxplot

FOS_boxplot + stat_compare_means(aes(group = Suppressiveness), label = "p.value", method = "wilcox", comparisons = list(c("suppressive", "non-suppressive"))) 



stickland_df_updated$Suppressiveness <- ifelse(stickland_df_updated$Description %in% c('FMT', 'Healthy'), 'suppressive', 'non-suppressive')
stickland_df_updated$Supp_Cond_Group <- with(stickland_df_updated, ifelse(Suppressiveness == 'suppressive', paste(Suppressiveness, Description, sep = "_"), Suppressiveness))

stickland_boxplot <- ggplot(subset(stickland_df_updated, Description != 'Diarrhoea'), aes(x = Suppressiveness, y = total_hit_count)) +
  geom_boxplot(aes(group = Suppressiveness, color = Suppressiveness), outlier.shape = NA) +
  geom_jitter(aes(color = Suppressiveness, shape = Description, group = Supp_Cond_Group),
              position = position_jitterdodge(jitter.width = 0.25, dodge.width = 0.8), alpha = 0.3, size = 2, stroke = 1) +
  scale_color_manual(values = c("non-suppressive" = "#F8766D", "suppressive" = "#00BFC4")) +
  scale_shape_manual(values = conditions_shapes) +
  xlab("Suppressiveness") +
  ylab("Hits for Stickland metabolism genes") +
  theme_bw() +
  scale_y_log10(limits = c(1, 3000)) +
  theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 12),  
        axis.text.y = element_text(size = 12), 
        axis.title.x = element_text(size = 12),  
        axis.title.y = element_text(size = 12),  
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(), 
        panel.border = element_blank(), 
        axis.line = element_line())
stickland_boxplot

stickland_boxplot + stat_compare_means(aes(group = Suppressiveness), label = "p.value", method = "wilcox", comparisons = list(c("suppressive", "non-suppressive"))) 



##Next: B3 biosynthesis pathway gene hits

# Merge B3_df with the subset of combined_metagenomes based on SRR_Number
B3_df_updated <- merge(B3_df, combined_metagenomes_subset, by="SRR_Number", all.x=TRUE)

#Check:
str(B3_df_updated)



B3_df_updated$colour <- ifelse(B3_df_updated$Description == "CDI", "#F8766D", "#00BFC4")

#Then, map the Description directly for shape to use conditions_shapes
ggplot(B3_df_updated, aes(y = total_hit_count, x = Alpha_Index)) +
  geom_point(aes(color = colour, shape = Description), size = 1.5, stroke = 1, alpha = 0.5) +  
  scale_color_identity() + 
  scale_shape_manual(values = c(CDI = 1, Healthy = 0, FMT = 2)) + 
  geom_smooth(method = "lm", se = TRUE, color = "grey", linetype = "dashed", aes(group = 1)) +  
  theme_minimal() +  
  labs(x = "Alpha Index", y = "Hits for B3 synthesis genes", title = "") +  
  guides(color = FALSE) +
  theme(axis.text.x = element_text(angle = 0, hjust = 1, size = 12),  
        axis.text.y = element_text(size = 12), 
        axis.title.x = element_text(size = 12),  
        axis.title.y = element_text(size = 12),  
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(), 
        panel.border = element_blank(), 
        axis.line = element_line())


B3_df_updated_noFMT <- subset(B3_df_updated, Description != 'FMT')

#'zonation' for B3 more clear for Healthy vs CDI patient metagenomes:

ggplot(B3_df_updated_noFMT, aes(y = total_hit_count, x = log10(Ratio))) +
  geom_point(aes(color = colour, shape = Description, size = Alpha_Index), stroke = 1, alpha = 0.5) +  
  scale_color_identity() + 
  scale_shape_manual(values = c(CDI = 16, Healthy = 15, FMT = 17)) + 
  scale_size(range = c(0.4, 3.5)) +  
  geom_smooth(method = "lm", se = TRUE, color = "grey", linetype = "dashed", aes(group = 1)) +  
  theme_minimal() +  
  labs(x = "log10(Ratio Bacteroides+Phocaeicola to Escherichia)", y = "Hits for B3 synthesis genes", title = "") +  
  guides(color = FALSE) +
  theme(axis.text.x = element_text(angle = 0, hjust = 1, size = 12),  
        axis.text.y = element_text(size = 12), 
        axis.title.x = element_text(size = 12),  
        axis.title.y = element_text(size = 12),  
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(), 
        panel.border = element_blank(), 
        axis.line = element_line())


test_ratio_B3_no_FMT <- cor.test(B3_df_updated_noFMT$Ratio, B3_df_updated_noFMT$total_hit_count, method = "spearman")
test_alpha_div_B3_no_FMT <- cor.test(B3_df_updated_noFMT$Alpha_Index, B3_df_updated_noFMT$total_hit_count, method = "spearman")
test_ratio_B3 <- cor.test(B3_df_updated$Ratio, B3_df_updated$total_hit_count, method = "spearman")
test_alpha_div_B3 <- cor.test(B3_df_updated$Alpha_Index, B3_df_updated$total_hit_count, method = "spearman")


test_ratio_B3_no_FMT
test_alpha_div_B3_no_FMT
test_ratio_B3
test_alpha_div_B3


model <- lm(total_hit_count ~ Ratio, data = B3_df_updated_noFMT)
summary_model <- summary(model)
r_squared <- summary_model$r.squared
f_statistic <- summary_model$fstatistic
f_value <- f_statistic["value"]
p_value <- pf(f_statistic["value"], f_statistic["numdf"], f_statistic["dendf"], lower.tail = FALSE)
r_squared
p_value

#exploring the correlations of the other pathways without the FMT samples
cor.test(stickland_df_updated_noFMT$Ratio, stickland_df_updated_noFMT$total_hit_count, method = "spearman")
cor.test(fos_df_updated_noFMT$Ratio, fos_df_updated_noFMT$total_hit_count, method = "spearman")







###Metabolomics: Linking compounds found to be differentially abundant between suppressive and non-suppressive conditions (of both mix-14 and fecal origin) to ratio 
###Metabolomics analysis
Metabolomics_cdiff <- read_excel("Downloads/SDSU-01-20VW DATA TABLES (1).XLSX", 
                                 sheet = "Batch-norm Imputed Data")
#View(Metabolomics_cdiff)

Metadata <- read_excel("Downloads/SDSU-01-20VW DATA TABLES (1).XLSX", 
                                          sheet = "Sample Meta Data")

Chemical_Annotation <- read_excel("Downloads/SDSU-01-20VW DATA TABLES (1).XLSX", 
                                          sheet = "Chemical Annotation")


Metabolomics_cdiff_1  <- merge(x = Metabolomics_cdiff, y = Metadata[, c("PARENT_SAMPLE_NAME", "CLIENT_IDENTIFIER")], 
                     by = "PARENT_SAMPLE_NAME", all.x = TRUE)

Metabolomics_cdiff_1 <- Metabolomics_cdiff_1 %>%
  dplyr::select(CLIENT_IDENTIFIER, everything())

Metabolomics_cdiff_2 <- Metabolomics_cdiff_1 %>%
  dplyr::mutate(Replicate = as.integer(sub(".*?(\\d+)$", "\\1", CLIENT_IDENTIFIER)))

Metabolomics_cdiff_2 <- Metabolomics_cdiff_2 %>%
  dplyr::select(Replicate, everything())


Metabolomics_cdiff_3 <- Metabolomics_cdiff_2 %>%
  dplyr::mutate(Condition = case_when(
    str_starts(CLIENT_IDENTIFIER, "AA_R1_A") ~ "Mix14_control",
    str_starts(CLIENT_IDENTIFIER, "AA_R1_B") ~ "Mix14_AB",
    str_starts(CLIENT_IDENTIFIER, "AA_R1_C") ~ "Mix14_AB_CD",
    str_starts(CLIENT_IDENTIFIER, "AA_R1_D") ~ "Fecal_control",
    str_starts(CLIENT_IDENTIFIER, "AA_R2_A") ~ "Fecal_AB",
    str_starts(CLIENT_IDENTIFIER, "AA_R2_B") ~ "Fecal_AB_CD",
    str_starts(CLIENT_IDENTIFIER, "AA_R2_C") ~ "Fecal_AB_CD_Mix14",
    str_starts(CLIENT_IDENTIFIER, "AA_R2_D") ~ "Fecal_AB_CD_Bcaccae",
    TRUE ~ NA_character_ # This line handles any cases that don't match the above conditions
  ))

Metabolomics_cdiff_3 <- Metabolomics_cdiff_3 %>%
  dplyr::select(Condition, everything())



#adding a suppressiveness column based on each condition's final C. diff CFU/ml counts
#classification of conditions unchallenged by c. difficile were done as described in the manuscript and based on community composition similarity
Metabolomics_cdiff_3 <- Metabolomics_cdiff_3 %>%
  dplyr::mutate(Suppressiveness = case_when(
    Condition == 'Mix14_control' ~ 'non-suppressive',
    Condition == 'Mix14_AB' ~ 'suppressive',
    Condition == 'Mix14_AB_CD' ~ 'suppressive',
    Condition == 'Fecal_control' ~ 'suppressive',
    Condition == 'Fecal_AB' ~ 'non-suppressive',
    Condition == 'Fecal_AB_CD' ~ 'non-suppressive',
    Condition == 'Fecal_AB_CD_Mix14' ~ 'suppressive',
    Condition == 'Fecal_AB_CD_Bcaccae' ~ 'suppressive',
    TRUE ~ NA_character_ # 
  ))




merged_dataframe <- bind_rows(subset(OTU_Table_Fecal_Transposed, Days %in% c(20)), 
                              OTU_Table_Fecal_Transposed_3, 
                              OTU_Table_Fecal_Transposed_4)


merged_dataframe <- merged_dataframe %>%
  dplyr::select(Experiment_type, Suppressiveness, Shannon_Index, Ratio, 
                Conditions_Explained, Days, Treatment, Replicate, Code, everything())

merged_dataframe <- merged_dataframe %>%
  dplyr::mutate(Treatment = ifelse(Treatment == "Fecal_Ab_CD_B.caccae_D20",
                                   "Fecal_AB_CD_B.caccae_D20",
                                   Treatment))

merged_dataframe$Ratio <- (merged_dataframe$Bacteroides) / merged_dataframe$`Escherichia/Shigella`

###Next: add mean Ratio and alpha diversity values to this df
fecal_summarised <- merged_dataframe[, c("Treatment", "Shannon_Index", "Ratio")]

#Issues acknowledged in linking the metabolic profiles with the relative abundance:
#A) replicate samples sent for sequencing not the same replicates that were spun down and sent as supernatant samples
#B) not all conditions sequenced (at any point) had metabolomics samples taken
#or vice versa: we do not have 16S endpoints for Fecal_control (closest being Fecal_CD_D16, since we know this condition is suppressive and hence has little room for (transient) effects of C. diff)
#Fecal_AB: we do not have 16S endpoints for Fecal_AB. Next closest option is: Fecal_AB_CD_D16, yet this would create a potential timepoint-dependent variation between samples compared. 
#We do suspect the timepoint effect is less disruptive than perturbations are (see Supplementary materials), so we take:
#Fecal_CD_D16 for informing Fecal_control (since C. diff is suppressed).
#Fecal_AB_CD_D16 for informing Fecal_AB (while this may have some interference by C. diff).
#C) metabolomics datapoints were taken at day 18 for fecal, whereas 16S for fecal conditions from experiment 2 were taken at day 8, 16, 20 and 23
#D) For Mix-14: we do have daily sequencing data so we need to extract the summary metrics for ratio and Shannon alpha div index from day 16 (day from which metabolomics samples were taken) for each of the conditions

##to account for Fecal_control 
OTU_Table_Fecal_Transposed$Ratio <- (OTU_Table_Fecal_Transposed$Bacteroides) / (OTU_Table_Fecal_Transposed$`Escherichia/Shigella`)

unique(OTU_Table_Fecal_Transposed$Treatment)

OTU_Table_Fecal_Transposed_1 <- subset(
  OTU_Table_Fecal_Transposed, 
  Treatment %in% c("Fecal_CD_D16")
)

fecal_control_stats <- OTU_Table_Fecal_Transposed_1 %>%
  dplyr::summarise(
    Mean_Ratio = mean(Ratio, na.rm = TRUE),
    Median_Ratio = median(Ratio, na.rm = TRUE),
    SD_Ratio = sd(Ratio, na.rm = TRUE),
    Logged_Median_Ratio = median(log10(Ratio + 0.0001), na.rm = TRUE),
    IQR_Logged_Ratio = IQR(log10(Ratio + 0.0001), na.rm = TRUE),
    Logged_Mean_Ratio = mean(log10(Ratio + 0.0001), na.rm = TRUE), 
    SD_Logged_Ratio = sd(log10(Ratio + 0.0001), na.rm = TRUE), 
    Mean_Shannon_Index = mean(Shannon_Index, na.rm = TRUE),
    SD_Shannon_Index = sd(Shannon_Index, na.rm = TRUE)
  )

fecal_control_df <- data.frame(Treatment = 'Fecal_control', fecal_control_stats)



##to account for Fecal_AB:
#Note; since C. diff was introduced at day 13, these datapoints may have some (transient) effects of C. diff

#View(OTU_Table_Fecal_Transposed)
OTU_Table_Fecal_Transposed_2 <- subset(
  OTU_Table_Fecal_Transposed, 
  Treatment %in% c("Fecal_AB_CD_D16")
)


fecal_control_stats <- OTU_Table_Fecal_Transposed_2 %>%
  dplyr::summarise(
    Mean_Ratio = mean(Ratio, na.rm = TRUE),
    Median_Ratio = median(Ratio, na.rm = TRUE),
    SD_Ratio = sd(Ratio, na.rm = TRUE),
    Logged_Median_Ratio = median(log10(Ratio+ 0.0001), na.rm = TRUE),
    IQR_Logged_Ratio = IQR(log10(Ratio + 0.0001), na.rm = TRUE),
    Logged_Mean_Ratio = mean(log10(Ratio + 0.0001), na.rm = TRUE), 
    SD_Logged_Ratio = sd(log10(Ratio+ 0.0001), na.rm = TRUE), 
    Mean_Shannon_Index = mean(Shannon_Index, na.rm = TRUE),
    SD_Shannon_Index = sd(Shannon_Index, na.rm = TRUE)
  )

fecal_AB_df <- data.frame(Treatment = 'Fecal_AB', fecal_control_stats)

unique(fecal_summarised$Treatment)
summary_fecal <- fecal_summarised %>%
  dplyr::group_by(Treatment) %>%
  dplyr::summarise(
    Mean_Shannon_Index = mean(Shannon_Index, na.rm = TRUE),
    SD_Shannon_Index = sd(Shannon_Index, na.rm = TRUE),
    Mean_Ratio = mean(Ratio, na.rm = FALSE),
    Median_Ratio = median(Ratio, na.rm = FALSE),
    SD_Ratio = sd(Ratio, na.rm = FALSE),
    Logged_Mean_Ratio = mean(log10(Ratio + 0.0001), na.rm = TRUE), 
    SD_Logged_Ratio = sd(log10(Ratio+ 0.0001), na.rm = TRUE), 
    Logged_Median_Ratio = median(log10(Ratio+ 0.0001), na.rm = TRUE),
    IQR_Logged_Ratio = IQR(log10(Ratio+ 0.0001), na.rm = TRUE)
  )


all_fecal_stats <- rbind(summary_fecal, fecal_AB_df, fecal_control_df)

#map them together, where Fecal_control is comprised of data from Fecal_CD, Fecal_AB_CD_Mix14 and Fecal_AB_CD at day 8 (pre-perturbation timepoint)
#and where Fecal_AB is comprised of data from Fecal_AB_CD_Mix14 and Fecal_AB_CD at day 16 (pre-intervention, post AB)
mapping_table <- data.frame(
  Condition = c('Fecal_AB_CD_Bcaccae',      'Fecal_AB',       'Fecal_AB_CD',     'Fecal_AB_CD_Mix14',      'Fecal_control'),
  Treatment = c('Fecal_AB_CD_B.caccae_D20', 'Fecal_AB',       'Fecal_AB_CD_D20', 'Fecal_AB_CD_Mix_14_D20', 'Fecal_control')
)


summary_mapped_fecal <- merge(mapping_table, all_fecal_stats, by = "Treatment")

#Metabolomics_cdiff_4 <- Metabolomics_cdiff_3 %>%
#  dplyr::left_join(summary_mapped_fecal, by = "Condition")

##Now, mix-14 info for day 16

Relative_abundances_Mix14_day16 <- subset(Relative_abundances_Mix14, Day == 16)

Relative_abundances_Mix14_day16_t <- Relative_abundances_Mix14_day16 %>%
  tidyr::pivot_wider(names_from = Species, values_from = Relative_Abundance,
              id_cols = c("Day", "Condition", "Replicate", "Treatment", "Conditions_Explained"))

Relative_abundances_Mix14_day16_t$Ratio <- (Relative_abundances_Mix14_day16_t$`Bacteroides caccae` + Relative_abundances_Mix14_day16_t$`Bacteroides dorei` + Relative_abundances_Mix14_day16_t$`Bacteroides ovatus` + Relative_abundances_Mix14_day16_t$`Bacteroides thetaiotaomicron` + Relative_abundances_Mix14_day16_t$`Bacteroides uniformis` + Relative_abundances_Mix14_day16_t$`Bacteroides vulgatus` + 0.0001) / (Relative_abundances_Mix14_day16_t$`Escherichia coli` + 0.0001)


calculate_shannon_index_direct <- function(abundances) {
  # Remove NA values and ensure all values are >= 0
  abundances <- na.omit(abundances)
  abundances <- abundances[abundances > 0]  # Filter out zeros to avoid log(0)
  shannon_index <- -sum(abundances * log(abundances))
  return(shannon_index)
}

# Apply the function to each row for the specified columns
Relative_abundances_Mix14_day16_t <- Relative_abundances_Mix14_day16_t %>%
  dplyr::rowwise() %>%
  dplyr::mutate(Shannon_Index = calculate_shannon_index_direct(c_across(6:19)))






summary_mix14 <- Relative_abundances_Mix14_day16_t %>%
  dplyr::group_by(Treatment) %>%
  dplyr::summarise(
    Mean_Shannon_Index = mean(Shannon_Index, na.rm = TRUE),
    SD_Shannon_Index = sd(Shannon_Index, na.rm = TRUE),
    Mean_Ratio = mean(Ratio, na.rm = TRUE),
    Median_Ratio = median(Ratio, na.rm = TRUE),
    SD_Ratio = sd(Ratio, na.rm = TRUE),
    Logged_Mean_Ratio = mean(log10(Ratio + 0.0001), na.rm = TRUE), 
    SD_Logged_Ratio = sd(log10(Ratio+ 0.0001), na.rm = TRUE), 
    Logged_Median_Ratio = median(log10(Ratio+ 0.0001), na.rm = TRUE),
    IQR_Logged_Ratio = IQR(log10(Ratio+ 0.0001), na.rm = TRUE)
  )

mapping_table <- data.frame(
  Condition = c('Mix14_control', 'Mix14_AB',                'Mix14_AB_CD'),
  Treatment = c('Mix-14_D16',    'Mix-14_Antibiotics_D16',  'Mix-14_Antibiotics_C.difficile_D16')
)


summary_mapped_mix14 <- merge(mapping_table, summary_mix14, by = "Treatment")

#For below analysis, we only focus on fecal conditions from the same experiment; experiment 2.
#"Fecal_AB_CD_B.caccae_D20" is excluded since this is from experiment 4 (or, previoulsy referred to as Experiment 3B)
summary_mapped_fecal <- subset(summary_mapped_fecal, Treatment !="Fecal_AB_CD_B.caccae_D20")
combined_summary <- rbind(summary_mapped_fecal, summary_mapped_mix14)


Metabolomics_cdiff_4 <- Metabolomics_cdiff_3 %>%
  dplyr::left_join(combined_summary, by = "Condition") 

#Metabolic signatures of C. diff suppression/success of C. diff suppressors in suppressive samples:
#For the spike in FOS metabolites, we are looking for: 1,1-kestotetraose & 1-kestose
#resulting from fructan metabolism by suppressive bugs:
  # hence, we expect a positive correlation between these compounds and ratio
#Synthesis/Secretion of B1 (thiamin) and B3 (nicotinamide riboside) by suppressive bugs
  #hence we expect a positive correlation between these compounds and ratio

#depletion by suppressive bugs:
#competition in Stickland precursors/redox maintanence metabolites: NAD+, butyryl/isobutyryl CoA, propionyl CoA & acetyl CoA
  #hence, we expect a negative correlation between these compounds and ratio

#Metabolic signatures of C. diff activity in non-suppressive samples: 
#1) the polyamine (spermine) metabolism, with N1,N12-diacetylspermine as a byproduct
  #hence, we expect a negative correlation between ratio and N1,N12-diacetylspermine
  #hence, we expect a positive correlation between ratio and spermine
#2) cyclic dipeptides secreted by C. diff: cyclo(Pro-Tyr) (D,L), cyclo(Phe-Pro) (D,L), cyclo(Pro-Val) (D,L), and cyclo(His-Pro)
  #hence, we expect a negative correlation between ratio and these cyclic dipeptides




#View(Chemical_Annotation)
#Compounds expected to positively correlate with ratio:
#CHEM_ID for 1-kestose is 100000980
#CHEM_ID for 1,1-kestotetraose is 100003047 
#CHEM_ID for thiamin is 873
#CHEM_ID for nicotinamide riboside is 100001310


Metabolomics_cdiff_4_long <- tidyr::pivot_longer(Metabolomics_cdiff_4, 
                                          cols = c(`100000980`, `873`, `100001310`, `100003047`), 
                                          names_to = "Metabolite", 
                                          values_to = "Value")

#Plotting
#excl. control since it is unperturbed and has no reliable unperturbed 16S
#Metabolomics_cdiff_4_long1 <- subset(Metabolomics_cdiff_4_long, Treatment!="Fecal_AB_CD_B.caccae_D20" & Treatment !="Fecal_control")
Metabolomics_cdiff_4_long1 <- subset(Metabolomics_cdiff_4_long)


shape_labels <- c(`100000980` = "1-kestose", 
                  `873` = "thiamin", 
                  `100001310` = "nicotinamide riboside", 
                  `100003047` = "1,1-kestotetraose", 
                  `507` = "spermine")


#displaying with mean ratio instead

z <- 1.96 # z-score for 95% CI
Metabolomics_cdiff_4_long$CI_lower <- log10(Metabolomics_cdiff_4_long$Mean_Ratio  - (Metabolomics_cdiff_4_long$SD_Ratio / sqrt(nrow(Metabolomics_cdiff_4_long))) * z)
Metabolomics_cdiff_4_long$CI_upper <- log10(Metabolomics_cdiff_4_long$Mean_Ratio  + (Metabolomics_cdiff_4_long$SD_Ratio / sqrt(nrow(Metabolomics_cdiff_4_long))) * z)

Metabolomics_cdiff_4_long1$CI_lower <- log10(Metabolomics_cdiff_4_long1$Mean_Ratio  - (Metabolomics_cdiff_4_long1$SD_Ratio / sqrt(nrow(Metabolomics_cdiff_4_long1))) * z)
Metabolomics_cdiff_4_long1$CI_upper <- log10(Metabolomics_cdiff_4_long1$Mean_Ratio  + (Metabolomics_cdiff_4_long1$SD_Ratio / sqrt(nrow(Metabolomics_cdiff_4_long1))) * z)



###boxplots
#here, we inspect the relative 'value' (i.e., detected abudance) of focus metabolites for FOS & B3 (see above)
ggplot(Metabolomics_cdiff_4_long, aes(x = Suppressiveness, y = log10(Value + 0.0001), fill = Suppressiveness)) +
  geom_boxplot(alpha = 0.6) +
  geom_jitter(width = 0.2, alpha = 0.6, size = 1.5) + 
  scale_fill_manual(values = c("non-suppressive" = "coral2", "suppressive" = "cyan3")) +
  labs(
    x = "Suppressiveness",
    y = "Log10(Value)",
    title = "Boxplot of Log10(Values) by Suppressiveness",
    fill = "Suppressiveness"
  ) +
  theme_minimal() +
  theme(legend.position = "none") +
  stat_compare_means(method = "wilcox.test", label = "p.signif", comparisons = list(c("suppressive", "non-suppressive"))) 


###Next:
#Compounds expected to correlate negatively with ratio (since they are depleted in 'suppressive' samples):
#CHEM_ID for NAD+ is 1310
#CHEM_ID for butyryl/isobutyryl CoA is 100015648
#CHEM_ID for propionyl CoA is 100000355
#CHEM_ID for acetyl CoA is 1830
#CHEM_ID for N1,N12-diacetylspermine is 100002132
#CHEM_ID for cyclo(Pro-Tyr) (D,L) is 100021013
#CHEM_ID for cyclo(Phe-Pro) (L,D) is 100004636
#CHEM_ID for cyclo(Pro-Val) (D,L) is 100021005
#CHEM_ID for cyclo(His-Pro) (D,L) is 100020993



Metabolomics_cdiff_fecal <- subset(Metabolomics_cdiff_4, !(Condition %in% c("Mix14_control", "Mix14_AB", "Mix14_AB_CD")))



Metabolomics_cdiff_4_long <- pivot_longer(Metabolomics_cdiff_4, 
                                          cols = c(`1310`, `100015648`, `100000355`, `1830`, `100002132`, `100004636`, `100021005`, `100020993`, `100021013`), 
                                          names_to = "Metabolite", 
                                          values_to = "Value")

#Plotting
#Metabolomics_cdiff_4_long1 <- subset(Metabolomics_cdiff_4_long, Treatment !="Fecal_control" & Treatment !="Fecal_AB_CD_B.caccae_D20")
Metabolomics_cdiff_4_long1 <- subset(Metabolomics_cdiff_4_long)


shape_labels <- c(
  `1310` = "NAD+",
  `100015648` = "butyryl/isobutyryl CoA",
  `100000355` = "propionyl CoA",
  `1830` = "acetyl CoA",
  `100002132` = "N1,N12-diacetylspermine",
  `100004636` = "cyclo(Phe-Pro) (L,D)",
  `100021005` = "cyclo(Pro-Val) (D,L)",
  `100020993` = "cyclo(His-Pro) (D,L)",
  `100021013` = "cyclo(Pro-Tyr) (D,L)"
)


ggplot(Metabolomics_cdiff_4_long1, aes(x = log10(Mean_Ratio), y = log10(Value + 0.0001), color = Suppressiveness, shape = Metabolite)) +
  #geom_smooth(method = "lm", se = TRUE, color = "grey") + # Add a single regression line for all data
  geom_point(alpha = 0.3, size = 2) +
  scale_color_manual(values = c("non-suppressive" = "coral2", "suppressive" = "cyan3")) +
  scale_shape_manual(values = c(`1310` = 16, `100015648` = 17, `100000355` = 18, `1830` = 19, `100002132` = 15, `100004636` = 0, `100021005`=1, `100020993`=2, `100021013`=5), labels = shape_labels) +
  labs(
    x = "log10(Mean Ratio)",
    y = "Log10(Value)",
    title = "Scatter Plot Colored by Suppressiveness",
    color = "Suppressiveness"
  ) +
  theme_minimal() +
  theme(legend.position = "right") +
  theme(
    legend.position = "right",
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.background = element_blank(),
    axis.line = element_line(color = "black")
  )

#significant negative correlation indeed
cor.test(log10(Metabolomics_cdiff_4_long1$Mean_Ratio), log10(Metabolomics_cdiff_4_long1$Value))





###relative ratios and relative compound amounts
Metabolomics_cdiff_3a <- Metabolomics_cdiff_3 %>%
  dplyr::left_join(combined_summary, by = "Condition") 

Metabolomics_cdiff_3_long <-tidyr::pivot_longer(Metabolomics_cdiff_3a, 
                                          cols = c(`100000980`, `873`, `100001310`, `100003047`, `507`, `1310`, `100015648`, `100000355`, `1830`, `100002132`, `100004636`, `100021005`, `100020993`, `100021013`), 
                                          names_to = "Metabolite", 
                                          values_to = "Value")

Metabolomics_cdiff_3_long_a <- Metabolomics_cdiff_3_long[, 572:584]

Metabolomics_cdiff_3_long_a <- Metabolomics_cdiff_3_long_a %>%
  dplyr::mutate(Value = ifelse(is.na(Value), 0, Value))

Metabolomics_cdiff_3_long_a <- Metabolomics_cdiff_3_long_a %>%
  dplyr::group_by(Metabolite, Treatment) %>%
  dplyr::mutate(Norm_Value = Value / max(Value, na.rm = TRUE)) %>%
  dplyr::ungroup()

Metabolomics_cdiff_3_long_a_summary <- Metabolomics_cdiff_3_long_a %>%
  dplyr::group_by(Treatment, Metabolite) %>%
  dplyr::summarize(
    Mean_Value = mean(Value, na.rm = TRUE), 
    SD_Value = sd(Value, na.rm = TRUE), 
    Logged_Mean_Value = mean(log10(Value + 0.0001), na.rm = TRUE), 
    SD_Logged_Value = sd(log10(Value + 0.0001), na.rm = TRUE), 
    Mean_Norm_Value = mean(Norm_Value, na.rm = TRUE),
    SD_Norm_Value = sd(Norm_Value, na.rm = TRUE),
    Median_Value = median(Value, na.rm = TRUE), 
    IQR_Value = IQR(Value, na.rm = TRUE), 
    .groups = 'drop' 
  )

Metabolomics_cdiff_3_long_b <- Metabolomics_cdiff_3_long_a %>%
  dplyr::left_join(Metabolomics_cdiff_3_long_a_summary, by = c("Treatment", "Metabolite"))


Metabolomics_cdiff_3_long_c <- Metabolomics_cdiff_3_long_b

Metabolomics_cdiff_3_long_c_unique <- Metabolomics_cdiff_3_long_c %>%
  dplyr::distinct(Metabolite, Treatment, .keep_all = TRUE)


relative_abundance <- Metabolomics_cdiff_3_long_c_unique %>%
  dplyr::group_by(Metabolite) %>%
  dplyr::summarize(
    Relative_metabolite_abundance = sum(Mean_Value[Suppressiveness == 'suppressive'], na.rm = TRUE) /
      sum(Mean_Value[Suppressiveness == 'non-suppressive'], na.rm = TRUE),
    .groups = 'drop'
  )

Metabolomics_cdiff_3_long_c_unique_b <- Metabolomics_cdiff_3_long_c_unique %>%
  dplyr::left_join(relative_abundance, by = "Metabolite")


shape_labels <- c(
  `100000980` = "1-kestose", 
  `873` = "thiamin", 
  `100001310` = "nicotinamide riboside", 
  `100003047` = "1,1-kestotetraose", 
  `507` = "spermine",
  `1310` = "NAD+",
  `100015648` = "butyryl/isobutyryl CoA",
  `100000355` = "propionyl CoA",
  `1830` = "acetyl CoA",
  `100002132` = "N1,N12-diacetylspermine",
  `100004636` = "cyclo(Phe-Pro) (L,D)",
  `100021005` = "cyclo(Pro-Val) (D,L)",
  `100020993` = "cyclo(His-Pro) (D,L)",
  `100021013` = "cyclo(Pro-Tyr) (D,L)"
)


#when choosing to subset to remove unperturbed/control fecal condition, uncomment below:
#Metabolomics_cdiff_3_long_c_unique_c <- subset(Metabolomics_cdiff_3_long_c_unique_b, Treatment != "Fecal_control")
Metabolomics_cdiff_3_long_c_unique_c <- Metabolomics_cdiff_3_long_c_unique_b


##Below are plots that can be found in the manuscript
#logscaling of errorbars can be depicted in two ways:
#first we use the pre-calculated log10(Mean_Value) and log10(Mean_Ratio) as calculated in the summary dataframes as: mean(log10(metric_of_interest + 0.0001)
#in this way, the standard deviation is informed by order of magnitude difference from the mean, which is then taken equivalently/symmetrically on 'either side' of the mean logged metric of interest.
#In other words: The error bars are plotted symmetrically around the mean of the log-transformed values. The standard deviation in this case reflects the variation in the log-transformed data, representing the "order of magnitude" differences from the mean.
#This method emphasises differences in the log-transformed space, with error bars showing the variability in terms of orders of magnitude. It treats the log-transformed mean as the central value and adds/subtracts the log-transformed standard deviation symmetrically.

#Alternatively, the standard deviation is included so that it scales logistically as well; with smaller order of magnitudes covering more of the variation, etc.
#Hence, in this method, we calculate mean and standard deviation on 'raw' data, then apply log-scaling to both the data and the error bars, making the error bars proportional to the log-transformed values
#The first method is more straightforward when already working in log-transformed space, while the second method keeps the interpretation in the original scale but represents the errors in a logarithmic context
#The first method is what is currently included in the manuscript:
#NOTE TO REVIEWERS: note that the original figure in draft manuscript did not have 1e-04 added to the ratios prior to log-scaling and hence had a slightly different distribution along the y-axis
#e.g., 'lifting' Fecal_AB's log10-scaled mean Ratio from -3 to around -2, and 'allowing' its y-axis errorbars to be present
#Further, we opted to exclude Fecal control samples in the draft manuscript for the respective figure (to only compare perturbed fecal samples), but can be included (as done in code below)
#'zonation' of suppressive versus non-suppressive samples holds w/ or w/o Fecal_control.

#First/current method of accounting for errorbars:
#B3 vitamin
ggplot(subset(Metabolomics_cdiff_3_long_c_unique_c, Metabolite == 100001310), 
       aes(x = Logged_Mean_Value, y = Logged_Mean_Ratio, color = Suppressiveness)) +
  geom_point(aes(shape = Treatment), size = 2.6, alpha = 0.6, stroke = 1.2) +
  geom_errorbar(aes(ymin = Logged_Mean_Ratio - SD_Logged_Ratio, 
                    ymax = Logged_Mean_Ratio + SD_Logged_Ratio), 
                width = 0.2, alpha = 0.3) +
  geom_errorbarh(aes(xmin = Logged_Mean_Value - SD_Logged_Value, 
                     xmax = Logged_Mean_Value + SD_Logged_Value), 
                 height = 0.2, alpha = 0.3) +
  scale_shape_manual(values = c('Fecal_control' = 1,
                                'Fecal_AB' = 8, 
                                'Fecal_AB_CD_D20' = 6, 
                                'Fecal_AB_CD_Mix_14_D20' = 7, 
                                'Mix-14_Antibiotics_C.difficile_D16' = 17, 
                                'Mix-14_Antibiotics_D16' = 15, 
                                'Mix-14_D16' = 16)) +
  labs(x = "Log10(Mean Nicotinamide Riboside (B3) Abundance + 1e-04)", 
       y = "Log10(Mean Ratio Bacteroides to Escherichia + 1e-04)", 
       title = "") +
  scale_color_manual(values = c("non-suppressive" = "coral3", 
                                "suppressive" = "cyan4")) +
  theme_minimal() +
  theme(legend.position = "right",
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background = element_blank(),
        axis.line = element_line(color = "black"))


#NAD+
ggplot(subset(Metabolomics_cdiff_3_long_c_unique_c, Metabolite == 1310), 
       aes(x = Logged_Mean_Value, y = Logged_Mean_Ratio, color = Suppressiveness)) +
  geom_point(aes(shape = Treatment), size = 3, alpha = 0.6, stroke = 1.2) +
  geom_errorbar(aes(ymin = Logged_Mean_Ratio - SD_Logged_Ratio, 
                    ymax = Logged_Mean_Ratio + SD_Logged_Ratio), 
                width = 0.2, alpha = 0.3) +
  geom_errorbarh(aes(xmin = Logged_Mean_Value - SD_Logged_Value, 
                     xmax = Logged_Mean_Value + SD_Logged_Value), 
                 height = 0.2, alpha = 0.3) +
  scale_shape_manual(values = c('Fecal_control' = 1,
                                'Fecal_AB' = 8, 
                                'Fecal_AB_CD_B.caccae_D20' = 0, 
                                'Fecal_AB_CD_D20' = 6, 
                                'Fecal_AB_CD_Mix_14_D20' = 7, 
                                'Mix-14_Antibiotics_C.difficile_D16' = 17, 
                                'Mix-14_Antibiotics_D16' = 15, 
                                'Mix-14_D16' = 16)) +
  labs(x = "Log10(Mean NAD+ Abundance + 1e-04)", 
       y = "Log10(Mean Ratio Bacteroides to Escherichia + 1e-04)", 
       title = "") +
  scale_color_manual(values = c("non-suppressive" = "coral3", 
                                "suppressive" = "cyan4")) +
  theme_minimal() +
  theme(legend.position = "right",
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background = element_blank(),
        axis.line = element_line(color = "black"))


#Second method of accounting for errorbars:
#B3 vitamin
ggplot(subset(Metabolomics_cdiff_3_long_c_unique_c, Metabolite == 100001310), 
       aes(x = log10(Mean_Value), y = log10(Mean_Ratio), color = Suppressiveness)) +
  geom_point(aes(shape = Treatment), size = 2.6, alpha = 0.6, stroke = 1.2) +
  geom_errorbar(aes(ymin = Logged_Mean_Ratio - SD_Logged_Ratio, 
                    ymax = Logged_Mean_Ratio + SD_Logged_Ratio), 
                width = 0.2, alpha = 0.3) +
  geom_errorbarh(aes(xmin = Logged_Mean_Value - SD_Logged_Value, 
                     xmax = Logged_Mean_Value + SD_Logged_Value), 
                 height = 0.2, alpha = 0.3) +
  scale_shape_manual(values = c('Fecal_control' = 1,
                                'Fecal_AB' = 8, 
                                'Fecal_AB_CD_D20' = 6, 
                                'Fecal_AB_CD_Mix_14_D20' = 7, 
                                'Mix-14_Antibiotics_C.difficile_D16' = 17, 
                                'Mix-14_Antibiotics_D16' = 15, 
                                'Mix-14_D16' = 16)) +
  labs(x = "Log10(Mean Nicotinamide Riboside (B3) Abundance + 1e-04)", 
       y = "Log10(Mean Ratio Bacteroides to Escherichia + 1e-04)", 
       title = "") +
  scale_color_manual(values = c("non-suppressive" = "coral3", 
                                "suppressive" = "cyan4")) +
  theme_minimal() +
  theme(legend.position = "right",
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background = element_blank(),
        axis.line = element_line(color = "black"))

#NAD+ 
ggplot(subset(Metabolomics_cdiff_3_long_c_unique_c, Metabolite == 1310), 
       aes(x = log10(Mean_Value), y = log10(Mean_Ratio), color = Suppressiveness)) +
  geom_point(aes(shape = Treatment), size = 3, alpha = 0.6, stroke = 1.2) +
  geom_errorbar(aes(ymin = Logged_Mean_Ratio - SD_Logged_Ratio, 
                    ymax = Logged_Mean_Ratio + SD_Logged_Ratio), 
                width = 0.2, alpha = 0.3) +
  geom_errorbarh(aes(xmin = Logged_Mean_Value - SD_Logged_Value, 
                     xmax = Logged_Mean_Value + SD_Logged_Value), 
                 height = 0.2, alpha = 0.3) +
  scale_shape_manual(values = c('Fecal_control' = 1,
                                'Fecal_AB' = 8, 
                                'Fecal_AB_CD_B.caccae_D20' = 0, 
                                'Fecal_AB_CD_D20' = 6, 
                                'Fecal_AB_CD_Mix_14_D20' = 7, 
                                'Mix-14_Antibiotics_C.difficile_D16' = 17, 
                                'Mix-14_Antibiotics_D16' = 15, 
                                'Mix-14_D16' = 16)) +
  labs(x = "Log10(Mean NAD+ Abundance + 1e-04)", 
       y = "Log10(Mean Ratio Bacteroides to Escherichia + 1e-04)", 
       title = "") +
  scale_color_manual(values = c("non-suppressive" = "coral3", 
                                "suppressive" = "cyan4")) +
  theme_minimal() +
  theme(legend.position = "right",
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background = element_blank(),
        axis.line = element_line(color = "black"))






##Probiotic mix study for RBX2660, S Kwak, JH Choi et al., Microbiome, 2020.
#See manuscript for references
genus_only_abundance <- read_csv("~/Downloads/genus_only_abundance.csv")
#View(genus_only_abundance)

#assigning metadata
metadata_RBX2660 <- read_csv("~/Documents/240329_ID_conversion_vShare.csv")
#View(X240329_ID_conversion_vShare)


metadata_selected <- metadata_RBX2660[, c("patientID", "stoolID", "time", "Days", "Status", "Status_2", "rCDI_within_60_days")]

names(metadata_selected)[names(metadata_selected) == "stoolID"] <- "sample"

RBX2660_relative_abundances <- merge(genus_only_abundance, metadata_selected, by = "sample", all.x = TRUE)

str(RBX2660_relative_abundances)
unique(RBX2660_relative_abundances$genus)

#take out viruses, fungi and archeae:
virus_rows <- grepl("virus|viridae|Saccharomyces|Naumovozyma|Eremothecium|Nakaseomyces|Candida|Methanobrevibacter", RBX2660_relative_abundances$genus, ignore.case = TRUE)

#Subset the df to exclude rows with 'virus' or 'viridae' in the genus name
RBX2660_relative_abundances_filtered <- RBX2660_relative_abundances[!virus_rows, ]

nrow(RBX2660_relative_abundances)
nrow(RBX2660_relative_abundances_filtered)



#first; transform to wide format
RBX2660_wide_data <- tidyr::pivot_wider(RBX2660_relative_abundances_filtered,
                          names_from = genus,
                          values_from = abundance,
                          values_fill = list(abundance = 0)) # Fills in NAs with 0

# Check the structure of the widened df
str(RBX2660_wide_data)
View(RBX2660_wide_data)

##adjust relative abundance data for the virus space that was taken out: (140/167)
RBX2660_wide_data$Sum <- rowSums(RBX2660_wide_data[, 8:140], na.rm = TRUE)
RBX2660_wide_data$Adjustment_factor <- 100 / RBX2660_wide_data$Sum

#take out patients where at least 50% of the relative abundance space was defined by fungi or viruses, since these are
#relative abundance profiles that are confounded:
RBX2660_wide_data <- RBX2660_wide_data %>%
  dplyr::filter(Adjustment_factor <= 1.5)

RBX2660_wide_data[, 8:140] <- sweep(RBX2660_wide_data[, 8:140], 1, 
                                                        RBX2660_wide_data$Adjustment_factor, "*")

#Check if all values are now 100
RBX2660_wide_data$Sum1 <- rowSums(RBX2660_wide_data[, 8:140], na.rm = TRUE)

#RBX2660_wide_data$g__Bacteroidales_noname, + (RBX2660_wide_data$g__Bacteroidales_noname) + (RBX2660_wide_data$g__Parabacteroides)
RBX2660_wide_data$Ratio <- ((RBX2660_wide_data$g__Bacteroides) + 0.0001) / ((RBX2660_wide_data$g__Escherichia + 0.0001))
#RBX2660_wide_data$Ratio <- (RBX2660_wide_data$g__Bacteroides + 0.0001) / (RBX2660_wide_data$g__Escherichia + 0.0001) 


#calc. Shannon index for alpha diversity:
genera_cols <- names(RBX2660_wide_data)[grep("^g__", names(RBX2660_wide_data))]



# Define the function to calculate Shannon diversity index
shannon_diversity <- function(abundances) {
  # Convert percentages to proportions
  proportions <- abundances / 100
  proportions <- proportions[proportions > 0] # Remove zeroes to avoid log(0)
  # Calculate the Shannon diversity index
  -sum(proportions * log(proportions))
}


RBX2660_wide_data <- RBX2660_wide_data %>%
  dplyr::rowwise() %>%
  dplyr::mutate(Shannon_Index = shannon_diversity(c_across(all_of(genera_cols)))) %>%
  dplyr::ungroup()


#Make another variable that is a simple binary: treatment (at some point) with RBX2660 yes or no, which we will call Status_3
#And another to exclude open label treatment types: called "Real_treatment"
RBX2660_wide_data <- RBX2660_wide_data %>%
  dplyr::mutate(Real_treatment = ifelse(Status %in% c('single_treatment', 'double_treatment'), 1, 0),
         Status_3 = ifelse(Status_2 %in% c('single_treatment', 'double_treatment', 'open_label_treatment'), 1, 0))


#first: examine the difference in ratio for all patient groups at day 0 (i.e., before anything has happened)
Ratio_At_Day_0 <- ggplot(subset(RBX2660_wide_data, Days == 0), aes(x = Status_2, y = log10(Ratio))) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(width = 0.2, alpha = 0.5, size = 1.5) +
  theme_minimal() +
  labs(title = "Day 0 (pre-treatment)",
       x = "Status",
       y = "Log10(Ratio Bacteroides to Escherichia) at day 0") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(), 
        panel.background = element_blank(), 
        axis.line = element_line(colour = "black")) 
Ratio_At_Day_0 
Ratio_At_Day_0  + stat_compare_means(method = "wilcox.test", 
                           comparisons = list(c("donor", "double_treatment"), c("donor", "placebo"), c("donor", "single_treatment"), c("double_treatment", "placebo"), c("placebo", "single_treatment"), c("double_treatment", "single_treatment")),
                           label = "p.value",
                           p.adjust.method = "BH",
                           label.y = c(5.7, 6.3, 6.9, 3, 3.6, 4.1)) 

#and alpha div:
Alpha_Div_At_Day_0  <- ggplot(subset(RBX2660_wide_data, Days == 0), aes(x = Status_2, y = Shannon_Index)) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(width = 0.2, alpha = 0.5, size = 1.5) +
  theme_minimal() +
  labs(title = "Day 0 (pre-treatment)",
       x = "Status",
       y = "Shannon alpha diversity at day 0") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(), 
        panel.background = element_blank(), 
        axis.line = element_line(colour = "black")) 
Alpha_Div_At_Day_0
Alpha_Div_At_Day_0 + stat_compare_means(method = "wilcox.test", 
                            comparisons = list(c("donor", "double_treatment"), c("donor", "placebo"), c("donor", "single_treatment"), c("double_treatment", "placebo"), c("placebo", "single_treatment"), c("double_treatment", "single_treatment")),
                            label = "p.value",
                            p.adjust.method = "BH",
                            label.y = c(3.7, 4.3, 4.9, 2.5, 2.9, 3.3)) 



#now after day 0
Ratio_After_Day_0 <- ggplot(subset(RBX2660_wide_data, Days > 0), aes(x = Status_2, y = log10(Ratio))) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(width = 0.2, alpha = 0.5, size = 1.5) +
  theme_minimal() +
  labs(title = "Post-treatment (Day > 0)",
       x = "Status",
       y = "Log10(Ratio Bacteroides to Escherichia) post-treatment points") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(), 
        panel.background = element_blank(), 
        axis.line = element_line(colour = "black")) 
Ratio_After_Day_0


Alpha_Div_After_Day_0 <- ggplot(subset(RBX2660_wide_data, Days > 0), aes(x = Status_2, y = Shannon_Index)) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(width = 0.2, alpha = 0.5, size = 1.5) +
  theme_minimal() +
  labs(title = "Post-treatment (Day > 0)",
       x = "Status",
       y = "Shannon alpha diversity post-treatment points") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(), 
        panel.background = element_blank(), 
        axis.line = element_line(colour = "black")) 
Alpha_Div_After_Day_0
Alpha_Div_After_Day_0 + stat_compare_means(method = "wilcox.test", 
                            comparisons = list(c("double_treatment", "open_label_treatment"), c("double_treatment", "placebo"), c("double_treatment", "single_treatment"), c("open_label_treatment", "placebo"), c("placebo", "single_treatment"), c("open_label_treatment", "single_treatment")),
                            label = "p.value",
                            p.adjust.method = "BH",
                            label.y = c(2.8, 3.2, 3.6, 4, 4.4, 4.8)) 


##take out rCDI_within_60_days and add as a boxplot
RBX2660_wide_data_mod <- RBX2660_wide_data
RBX2660_wide_data_mod$Status_3 <- RBX2660_wide_data_mod$Status_2
RBX2660_wide_data_mod <- RBX2660_wide_data %>%
  dplyr::mutate(Status_3 = if_else(rCDI_within_60_days == "Yes" & Status_2 != "open_label_treatment",
                            "rCDI within 60 days",
                            as.character(Status_2)))


RBX2660_wide_data_mod$Status_3 <- factor(RBX2660_wide_data_mod$Status_3, levels = c( "placebo", "rCDI within 60 days", "single_treatment", "double_treatment", "open_label_treatment"))


RBX2660_wide_data$g__Bacteroides
RBX2660_wide_data$g__Escherichia
plot_B_a <- ggplot(subset(RBX2660_wide_data, Days > 0), aes(x = Status_2, y = log10(g__Escherichia + 0.0001))) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(width = 0.2, alpha = 0.5, size = 1.5) +
  theme_minimal() +
  labs(title = "Post-treatment (Day > 0)",
       x = "Status",
       y = "Log10(Escherichia + 0.0001) post-treatment points") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(), 
        panel.background = element_blank(), 
        axis.line = element_line(colour = "black")) 
plot_B_a
plot_B_a + stat_compare_means(method = "wilcox.test", 
                            comparisons = list(c("double_treatment", "open_label_treatment"), c("double_treatment", "placebo"), c("double_treatment", "single_treatment"), c("open_label_treatment", "placebo"), c("placebo", "single_treatment"), c("open_label_treatment", "single_treatment")),
                            label = "p.value",
                            p.adjust.method = "BH",
                            label.y = c(5.7, 6.3, 6.9, 7.5, 8, 8.6)) 

plot_B_b <- ggplot(subset(RBX2660_wide_data, Days > 0), aes(x = Status_2, y = log10(g__Bacteroides))) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(width = 0.2, alpha = 0.5, size = 1.5) +
  theme_minimal() +
  labs(title = "Post-treatment (Day > 0)",
       x = "Status",
       y = "Log10(Bacteroides) post-treatment points") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(), 
        panel.background = element_blank(), 
        axis.line = element_line(colour = "black")) 
plot_B_b
plot_B_b + stat_compare_means(method = "wilcox.test", 
                              comparisons = list(c("double_treatment", "open_label_treatment"), c("double_treatment", "placebo"), c("double_treatment", "single_treatment"), c("open_label_treatment", "placebo"), c("placebo", "single_treatment"), c("open_label_treatment", "single_treatment")),
                              label = "p.value",
                              p.adjust.method = "BH",
                              label.y = c(5.7, 6.3, 6.9, 7.5, 8, 8.6)) 



##Now, we check the difference in failed versus nonfailed treatments

#exclude patients that were excluded in S1 as well 
RBX2660_wide_data_1 <- subset(RBX2660_wide_data, !(patientID %in% c("R1-17", "R2-17", "R1-22", "R2-09")))

Ratio_treatments_by_rCDI <- ggplot(subset(RBX2660_wide_data_1, Days > 0 & Status_2 %in% c("double_treatment", "single_treatment") & Ratio < 100000), aes(x = rCDI_within_60_days, y = log10(Ratio))) +
  geom_boxplot(outlier.shape = NA) + 
  geom_jitter(aes(color = Status_2), # Define colour
              width = 0.2, alpha = 0.5, size = 1.7, stroke = 1) +
  scale_color_manual(values = c("single_treatment" = "blue", "double_treatment" = "purple")) + 
  theme_minimal() +
  labs(title = "Boxplot of Log10(Ratio) by rCDI within 60 days",
       x = "rCDI within 60 days?",
       y = "Log10(Ratio Bacteroides to Escherichia)") + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(), 
        panel.background = element_blank(), 
        axis.line = element_line(colour = "black")) 
Ratio_treatments_by_rCDI

Ratio_treatments_by_rCDI + stat_compare_means(method = "t.test", 
                           comparisons = list(c("No", "Yes")),
                           label = "p.value",
                           #p.adjust.method = "BH",
                           label.y = c(6.5)) 



medians_2 <- subset(RBX2660_wide_data, Days > 0 & Status_2 %in% c("double_treatment", "single_treatment") & Ratio < 100000) %>%
  dplyr::group_by(rCDI_within_60_days) %>%
  dplyr::summarise(Ratio = median(log10(Ratio), na.rm = TRUE)) %>%
  dplyr::ungroup()
medians_2

medians_3 <- subset(RBX2660_wide_data_1, Days > 0 & Status_2 %in% c("double_treatment", "single_treatment") & Ratio < 100000) %>%
  dplyr::group_by(rCDI_within_60_days) %>%
  dplyr::summarise(Ratio = median(log10(Ratio), na.rm = TRUE)) %>%
  dplyr::ungroup()
medians_3




#alpha div:
alpha_div_treatments_by_rCDI <- ggplot(subset(RBX2660_wide_data_1, Days > 0 & Status_2 %in% c("double_treatment", "single_treatment") & Ratio < 100000), aes(x = rCDI_within_60_days, y = Shannon_Index)) +
  geom_boxplot(outlier.shape = NA) + 
  geom_jitter(aes(color = Status_2), # Define shape within geom_jitter
              width = 0.2, alpha = 0.5, size = 1.7, stroke = 1) +
  scale_color_manual(values = c("single_treatment" = "blue", "double_treatment" = "purple")) + 
  theme_minimal() +
  labs(title = "Boxplot of Alpha diversity by rCDI within 60 days",
       x = "rCDI within 60 days?",
       y = "Shannon alpha diversity") + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(), 
        panel.background = element_blank(), 
        axis.line = element_line(colour = "black")) 
alpha_div_treatments_by_rCDI

alpha_div_treatments_by_rCDI + stat_compare_means(method = "t.test", 
                             comparisons = list(c("No", "Yes")),
                             label = "p.value",
                             #p.adjust.method = "BH",
                             label.y = c(3.5)) 


##investigate distribution of log10 Ratio values:
subset_data_for_ratio <- RBX2660_wide_data_1 %>%
  dplyr::filter(Days > 0, 
         Status_2 %in% c("double_treatment", "single_treatment"), 
         Ratio < 100000)
#density plots
ggplot(subset_data_for_ratio, aes(x = log10(Ratio))) +
  geom_histogram(binwidth = 1, color = "black", fill = "blue") +
  labs(title = "Distribution of Log10(Ratio)",
       x = "Log10(Ratio)",
       y = "Frequency") +
  theme_minimal()








#remember that RBX2660_wide_data_1 excludes patients that were also excluded by authors of the paper:
medians_C_A <- subset(RBX2660_wide_data_1, Days > 0 & Status_2 %in% c("double_treatment", "single_treatment") & Ratio < 100000) %>%
  dplyr::group_by(rCDI_within_60_days) %>%
  dplyr::summarise(Shannon_Index = median(Shannon_Index, na.rm = TRUE)) %>%
  dplyr::ungroup()
medians_C_A

#log10-scaled:
medians_C_R <- subset(RBX2660_wide_data_1, Days > 0 & Status_2 %in% c("double_treatment", "single_treatment") & Ratio < 100000) %>%
  dplyr::group_by(rCDI_within_60_days) %>%
  dplyr::summarise(Ratio = median(log10(Ratio), na.rm = TRUE)) %>%
  dplyr::ungroup()
medians_C_R

#'normal':
medians_C_R <- subset(RBX2660_wide_data_1, Days > 0 & Status_2 %in% c("double_treatment", "single_treatment") & Ratio < 100000) %>%
  dplyr::group_by(rCDI_within_60_days) %>%
  dplyr::summarise(Ratio = median(Ratio, na.rm = TRUE)) %>%
  dplyr::ungroup()
medians_C_R



medians <- unique_samples1 %>%
  dplyr::filter(Condition != "Diarrhea") %>%
  dplyr::group_by(Condition) %>%
  dplyr::summarise(Median_Shannon_Index2 = median(Shannon_Index2, na.rm = TRUE)) %>%
  dplyr::ungroup()


RBX2660_wide_data_1a <- subset(RBX2660_wide_data_1, Days > 7 & Status_2 %in% c("double_treatment", "single_treatment") & rCDI_within_60_days == "No")
RBX2660_wide_data_1a <- RBX2660_wide_data_1a[c("Ratio", setdiff(names(RBX2660_wide_data_1a), "Ratio"))]




#Now, per treatment, we investigate the distribution of Ratio and Alpha diversity between patients with and without reported rCDI within 60 days:
RBX2660_wide_data_1 <- RBX2660_wide_data_1 %>% 
  dplyr::mutate(Status_combined = ifelse(is.na(Status_2) | is.na(rCDI_within_60_days),
                                         NA, # Handle cases where either value might be NA
                                         paste(Status_2, rCDI_within_60_days, sep = "_")))

RBX2660_wide_data_1$Status_combined <- factor(RBX2660_wide_data_1$Status_combined, levels = c( "placebo_No", "placebo_Yes", "single_treatment_No", "single_treatment_Yes", "double_treatment_No", "double_treatment_Yes","open_label_treatment_Yes"))

##As included in Figure 5 in the manuscript:
plot_B <- ggplot(subset(RBX2660_wide_data_1, Days > 0 & Ratio < 100000), aes(x = Status_combined, y = log10(Ratio), color = (rCDI_within_60_days == "Yes" & Status_2 != "open_label_treatment"))) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(width = 0.1, alpha = 0.5, size = 1.5) +
  scale_color_manual(values = c("FALSE" = "black", "TRUE" = "red")) +  # Set "Yes" to red and "No" to black
  theme_minimal() +
  labs(title = "Post-treatment (Day > 0)",
       x = "Status",
       y = "Log10(Ratio Bacteroides to Escherichia) post-treatment points",
       color = "rCDI within 60 days") +  
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(), 
        panel.background = element_blank(), 
        axis.line = element_line(colour = "black"),
        legend.position = "right") 

plot_B


#First: for Status_2 comparisons (i.e, comparing between treatment groups):
comparisons_B1 <- list(
  c("placebo", "single_treatment"),
  c("placebo", "double_treatment"),
  c("placebo", "open_label_treatment"),
  c("single_treatment", "double_treatment"),
  c("single_treatment", "open_label_treatment"),
  c("double_treatment", "open_label_treatment")
)



p_values_B1 <- sapply(comparisons_B1, function(x) {
  test <- wilcox.test(Ratio ~ Status_2, data = subset(RBX2660_wide_data_1, Days > 0 & Ratio < 100000), subset = Status_2 %in% x)
  test$p.value
})

p_adjusted_B1 <- p.adjust(p_values_B1, method = "BH")

results_df_B1_RBX2660 <- data.frame(
  Comparison = sapply(comparisons_B1, function(x) paste(x[1], "vs", x[2])),
  P_value = p_values_B1,
  P_adjusted = p_adjusted_B1
)


#Next, comparisons within treatment groups
comparisons_B2 <- list(
  c("placebo_Yes", "placebo_No"),
  c("single_treatment_Yes", "single_treatment_No"),
  c("double_treatment_Yes", "double_treatment_No")
)

p_values_B2 <- sapply(comparisons_B2, function(x) {
  test <- wilcox.test(Ratio ~ Status_combined, data = subset(RBX2660_wide_data_1, Days > 0 & Ratio < 100000), subset = Status_combined %in% x)
  test$p.value
})

unique(RBX2660_wide_data$Status_combined)

results_df_B2_RBX2660 <- data.frame(
  Comparison = sapply(comparisons_B2, function(x) paste(x[1], "vs", x[2])),
  P_value = p_values_B2
)



##As included in Figure 5 in the manuscript:
plot_A <- ggplot(subset(RBX2660_wide_data_1, Days > 0 & Ratio < 100000), aes(x = Status_combined, y = Shannon_Index, color = (rCDI_within_60_days == "Yes" & Status_2 != "open_label_treatment"))) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(width = 0.1, alpha = 0.5, size = 1.5) +
  scale_color_manual(values = c("FALSE" = "black", "TRUE" = "red")) +  # Set "Yes" to red and "No" to black
  theme_minimal() +
  labs(title = "Post-treatment (Day > 0)",
       x = "Status",
       y = "Shannon Diversity post-treatment points",
       color = "rCDI within 60 days") +  
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(), 
        panel.background = element_blank(), 
        axis.line = element_line(colour = "black"),
        legend.position = "right") 

plot_A


#First: for Status_2 comparisons (i.e., comparisons between treatment groups):
comparisons_A1 <- list(
  c("placebo", "single_treatment"),
  c("placebo", "double_treatment"),
  c("placebo", "open_label_treatment"),
  c("single_treatment", "double_treatment"),
  c("single_treatment", "open_label_treatment"),
  c("double_treatment", "open_label_treatment")
)



p_values_A1 <- sapply(comparisons_A1, function(x) {
  test <- wilcox.test(Shannon_Index ~ Status_2, data = subset(RBX2660_wide_data_1, Days > 0 & Ratio < 100000), subset = Status_2 %in% x)
  test$p.value
})

p_adjusted_A1 <- p.adjust(p_values_A1, method = "BH")

results_df_A1_RBX2660 <- data.frame(
  Comparison = sapply(comparisons_A1, function(x) paste(x[1], "vs", x[2])),
  P_value = p_values_A1,
  P_adjusted = p_adjusted_A1
)

#Now, comparisons of Shannon alpha div. within treatment groups:
comparisons_A2 <- list(
  c("placebo_Yes", "placebo_No"),
  c("single_treatment_Yes", "single_treatment_No"),
  c("double_treatment_Yes", "double_treatment_No")
)

p_values_A2 <- sapply(comparisons_A2, function(x) {
  test <- wilcox.test(Shannon_Index ~ Status_combined, data = subset(RBX2660_wide_data_1, Days > 0 & Ratio < 100000), subset = Status_combined %in% x)
  test$p.value
})

unique(RBX2660_wide_data$Status_combined)

results_df_A2_RBX2660 <- data.frame(
  Comparison = sapply(comparisons_A2, function(x) paste(x[1], "vs", x[2])),
  P_value = p_values_A2
)


